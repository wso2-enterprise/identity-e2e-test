{
	"info": {
		"name": "Management API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-Request",
			"item": [
				{
					"name": "Get application ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"});\r",
									"\r",
									"// Parse the JSON response body\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Check if the applications array exists\r",
									"if (response.applications && Array.isArray(response.applications)) {\r",
									"    // Search for the application with name \"New Application\"\r",
									"    let application = response.applications.find(t => t.name === \"E2E-Test-Suite-Token\");\r",
									"    \r",
									"    // If the application is found, set the ID as a collection variable\r",
									"    if (application) {\r",
									"        pm.collectionVariables.set(\"Main_Application_ID\", application.id);\r",
									"        console.log(\"Found application ID:\", application.id);  // Log the ID for verification\r",
									"    } else {\r",
									"        console.log(\"application with name 'E2E-Test-Suite-Token' not found\");\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"Response does not contain a valid 'applications' array\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Cookie",
								"value": "JSESSIONID=566CFE1CCF6EB34C2379186C9C728369"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications?limit=30&offset=0",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"api",
								"server",
								"v1",
								"applications"
							],
							"query": [
								{
									"key": "limit",
									"value": "30"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get application by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"Main_Application_Client_ID\", responseBody.clientId);\r",
									"\r",
									"pm.collectionVariables.set(\"Main_Application_Client_Secret\", responseBody.clientSecret);\r",
									"\r",
									"pm.test(\"Response status is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{Main_Application_ID}}/inbound-protocols/oidc",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"api",
								"server",
								"v1",
								"applications",
								"{{Main_Application_ID}}",
								"inbound-protocols",
								"oidc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get authHeader",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var username = pm.collectionVariables.get(\"Main_Application_Client_ID\");\r",
									"var password = pm.collectionVariables.get(\"Main_Application_Client_Secret\");\r",
									"\r",
									"if (username && password) {\r",
									"    let authString = username + \":\" + password;\r",
									"    let encodedAuth = Buffer.from(authString, 'utf-8').toString('base64'); \r",
									"\r",
									"    pm.collectionVariables.set(\"authHeader\", \"Basic \" + encodedAuth);\r",
									"    console.log(\"Encoded Auth Header:\", pm.collectionVariables.get(\"authHeader\"));\r",
									"} else {\r",
									"    console.error(\"Username or Password is missing\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"api",
								"server",
								"v1",
								"applications"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "admin",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "API resource management",
			"item": [
				{
					"name": "API Resources",
					"item": [
						{
							"name": "Add a new API resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"let apiResourceId = responseBody.id;\r",
											"\r",
											"pm.collectionVariables.set(\"apiResourceId\", apiResourceId);\r",
											"\r",
											"pm.test(\"Response status is 201\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"// Validate Response Body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    pm.expect(responseBody).to.have.property('id');\r",
											"    pm.expect(responseBody).to.have.property('name');\r",
											"    pm.expect(responseBody).to.have.property('description');\r",
											"    pm.expect(responseBody).to.have.property('identifier');\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody).to.have.property('requiresAuthorization');\r",
											"    pm.expect(responseBody).to.have.property('scopes');\r",
											"\r",
											"    pm.expect(responseBody.scopes).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each object in the array\r",
											"    responseBody.scopes.forEach((item) => {\r",
											"        pm.expect(item).to.have.property('id');\r",
											"        pm.expect(item).to.have.property('displayName');\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        pm.expect(item).to.have.property('description');\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Greetings API\",\n    \"identifier\": \"greetings_api\",\n    \"description\": \"Greetings API representation\",\n    \"requiresAuthorization\": true,\n    \"scopes\": [\n        {\n            \"name\": \"greetings:write\",\n            \"displayName\": \"Write Greetings\",\n            \"description\": \"Allows writing greetings\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"api-resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all API resources in the server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate Response Body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    var responseBody = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property('totalResults');\r",
											"    pm.expect(responseBody).to.have.property('links');\r",
											"    pm.expect(responseBody).to.have.property('apiResources');\r",
											"\r",
											"    pm.expect(responseBody.links).to.be.an(\"array\");\r",
											"    pm.expect(responseBody.apiResources).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each object in the array\r",
											"    responseBody.apiResources.forEach((item) => {\r",
											"        pm.expect(item).to.have.property('id');\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        pm.expect(item).to.have.property('identifier');\r",
											"        pm.expect(item).to.have.property('type');\r",
											"        pm.expect(item).to.have.property('requiresAuthorization');\r",
											"        pm.expect(item).to.have.property('self');\r",
											"    });\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"api-resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get API resource specified by the id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate Response Body\r",
											"pm.test(\"Validate response body\", function(){\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property('id');\r",
											"    pm.expect(responseBody).to.have.property('name');\r",
											"    pm.expect(responseBody).to.have.property('description');\r",
											"    pm.expect(responseBody).to.have.property('identifier');\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody).to.have.property('requiresAuthorization');\r",
											"    pm.expect(responseBody).to.have.property('scopes');\r",
											"\r",
											"    pm.expect(responseBody.scopes).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each object in the array\r",
											"    responseBody.scopes.forEach((item) => {\r",
											"        pm.expect(item).to.have.property('id');\r",
											"        pm.expect(item).to.have.property('displayName');\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        pm.expect(item).to.have.property('description');\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources/{{apiResourceId}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"api-resources",
										"{{apiResourceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch API resource specified by the id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Greetings API\",\n    \"description\": \"Greetings API representation\",\n    \"addedScopes\": [\n        {\n            \"name\": \"greetings:read\",\n            \"displayName\": \"Read Greetings\",\n            \"description\": \"Allows to read greetings\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources/{{apiResourceId}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"api-resources",
										"{{apiResourceId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "API Resource Scopes",
					"item": [
						{
							"name": "Get API resource scopes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate Response Body\r",
											"pm.test(\"Validate response body\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each object in the array\r",
											"    responseBody.forEach((item) => {\r",
											"        pm.expect(item).to.have.property('id');\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        pm.expect(item).to.have.property('displayName');\r",
											"        pm.expect(item).to.have.property('description');\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"scopeName\", \"greetings:write\")\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources/{{apiResourceId}}/scopes",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"api-resources",
										"{{apiResourceId}}",
										"scopes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add scopes to API resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"name\": \"greetings:write\",\n        \"displayName\": \"Write Greetings\",\n        \"description\": \"Allows writing greetings\"\n    },\n    {\n        \"name\": \"greetings:read\",\n        \"displayName\": \"Read Greetings\",\n        \"description\": \"Allows reading greetings\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources/{{apiResourceId}}/scopes",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"api-resources",
										"{{apiResourceId}}",
										"scopes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch scope specified by the name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"scopeName\", \"greetings:write\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									},
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"Write Greetings\",\r\n  \"description\": \"Allows writing greetings\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources/{{apiResourceId}}/scopes/{{scopeName}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"api-resources",
										"{{apiResourceId}}",
										"scopes",
										"{{scopeName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all scopes in the tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate Response Body\r",
											"pm.test(\"Validate response body\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each object in the array\r",
											"    responseBody.forEach((item) => {\r",
											"        pm.expect(item).to.have.property('id');\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        pm.expect(item).to.have.property('displayName');\r",
											"        pm.expect(item).to.have.property('description');\r",
											"        pm.expect(item).to.have.property('apiID');\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/scopes",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"scopes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "API Resource Collections",
					"item": [
						{
							"name": "List all API resource collections in the server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate Response Body\r",
											"pm.test(\"Validate response body\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
											"    pm.expect(responseBody).to.have.property(\"apiResourceCollections\");\r",
											"\r",
											"    pm.expect(responseBody.apiResourceCollections).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each object in the array\r",
											"    responseBody.apiResourceCollections.forEach((item) => {\r",
											"        pm.expect(item).to.have.property('id');\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        pm.expect(item).to.have.property('displayName');\r",
											"        pm.expect(item).to.have.property('type');\r",
											"        pm.expect(item).to.have.property('self');\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/meta/api-resource-collections",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"meta",
										"api-resource-collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get API resource collection specified by the id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"apiResourceCollectionId\", \"YXBwbGljYXRpb25z\")\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate Response Body\r",
											"pm.test(\"Validate response body\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"id\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\");\r",
											"    pm.expect(responseBody).to.have.property(\"apiResources\");\r",
											"\r",
											"    pm.expect(responseBody.apiResources).to.have.property(\"read\");\r",
											"\r",
											"    pm.expect(responseBody.apiResources.read).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each object in the array\r",
											"    responseBody.apiResources.read.forEach((item) => {\r",
											"        pm.expect(item).to.have.property('id');\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        pm.expect(item).to.have.property('scopes');\r",
											"        \r",
											"        pm.expect(item.scopes).to.be.an(\"array\");\r",
											"\r",
											"        item.scopes.forEach((subItem) => {\r",
											"            pm.expect(subItem).to.have.property('displayName');\r",
											"            pm.expect(subItem).to.have.property('name');\r",
											"            pm.expect(subItem).to.have.property('description');\r",
											"        })\r",
											"\r",
											"    });\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/meta/api-resource-collections/{{apiResourceCollectionId}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"meta",
										"api-resource-collections",
										"{{apiResourceCollectionId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Organization management API",
			"item": [
				{
					"name": "Organization",
					"item": [
						{
							"name": "Create a new organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.collectionVariables.set(\"sub_organization_id\", responseBody.id);\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"pm.test(\"Validate organization response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate main properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\");\r",
											"    pm.expect(responseBody).to.have.property(\"status\");\r",
											"    pm.expect(responseBody).to.have.property(\"created\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastModified\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\");\r",
											"    pm.expect(responseBody).to.have.property(\"parent\");\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\");\r",
											"\r",
											"    // Validate the 'parent' object structure\r",
											"    pm.expect(responseBody.parent).to.have.property(\"id\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"ref\");\r",
											"\r",
											"    // Validate the 'attributes' array\r",
											"    pm.expect(responseBody.attributes).to.be.an(\"array\");\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"key\");\r",
											"        pm.expect(attribute).to.have.property(\"value\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"ABC Builders\",\n  \"description\": \"Building constructions\",\n  \"attributes\": [\n    {\n      \"key\": \"Country\",\n      \"value\": \"USA\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve organizations created for this tenant which matches the defined search criteria, if any",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate organizations list response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the 'organizations' array\r",
											"    pm.expect(responseBody).to.have.property(\"organizations\");\r",
											"    pm.expect(responseBody.organizations).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each organization object in the array\r",
											"    responseBody.organizations.forEach(organization => {\r",
											"        pm.expect(organization).to.have.property(\"id\");\r",
											"        pm.expect(organization).to.have.property(\"name\");\r",
											"        pm.expect(organization).to.have.property(\"status\");\r",
											"        pm.expect(organization).to.have.property(\"ref\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check organization with given name exist among the organizations hierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Respnse status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response body\r",
											"pm.test(\"Validate expected body structure\", () => {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"available\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"XYZ Builders\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/check-name",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"check-name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch an organization property by ID. Patch is supported only for key-value pairs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"operation\": \"REPLACE\",\n    \"path\": \"/name\",\n    \"value\": \"XYZ Builders\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/{{sub_organization_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"{{sub_organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an existing organization, identified by the organization ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate organization details response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\");\r",
											"    pm.expect(responseBody).to.have.property(\"status\");\r",
											"    pm.expect(responseBody).to.have.property(\"created\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastModified\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\");\r",
											"    pm.expect(responseBody).to.have.property(\"parent\");\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\");\r",
											"    pm.expect(responseBody).to.have.property(\"permissions\");\r",
											"\r",
											"    // Validate parent object structure\r",
											"    pm.expect(responseBody.parent).to.have.property(\"id\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"ref\");\r",
											"\r",
											"    // Validate attributes array\r",
											"    pm.expect(responseBody.attributes).to.be.an(\"array\");\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"key\");\r",
											"        pm.expect(attribute).to.have.property(\"value\");\r",
											"    });\r",
											"\r",
											"    // Validate permissions array\r",
											"    pm.expect(responseBody.permissions).to.be.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/{{sub_organization_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"{{sub_organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an organization by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"ABCD Builders\",\n  \"description\": \"Building constructions company\",\n  \"status\": \"ACTIVE\",\n  \"attributes\": [\n    {\n      \"key\": \"Country\",\n      \"value\": \"USA\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/{{sub_organization_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"{{sub_organization_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization Metadata",
					"item": [
						{
							"name": "Get metadata of the logged in organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate super organization response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\");\r",
											"    pm.expect(responseBody).to.have.property(\"status\");\r",
											"    pm.expect(responseBody).to.have.property(\"created\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastModified\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\");\r",
											"    pm.expect(responseBody).to.have.property(\"permissions\");\r",
											"    pm.expect(responseBody).to.have.property(\"discoveryAttributes\");\r",
											"\r",
											"    // Validate permissions array\r",
											"    pm.expect(responseBody.permissions).to.be.an(\"array\");\r",
											"\r",
											"    // Validate discoveryAttributes array\r",
											"    pm.expect(responseBody.discoveryAttributes).to.be.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/metadata",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"metadata"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User management",
			"item": [
				{
					"name": "SCIM 2.0 API",
					"item": [
						{
							"name": "SCIM 2.0 Users API",
							"item": [
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status code\r",
													"pm.test(\"Response status is 201\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(201)\r",
													"});\r",
													"\r",
													"// Parse the response\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Get the user id\r",
													"pm.collectionVariables.set(\"user_id\", responseBody.id);\r",
													"\r",
													"// Validate that the response is an object\r",
													"pm.test(\"Response is an object\", function () {\r",
													"    pm.expect(responseBody).to.be.an(\"object\");\r",
													"});\r",
													"\r",
													"// Validate 'emails' array\r",
													"pm.test(\"'emails' is an array of strings\", function () {\r",
													"    pm.expect(responseBody).to.have.property(\"emails\").that.is.an(\"array\");\r",
													"});\r",
													"\r",
													"// Validate 'meta' object\r",
													"pm.test(\"'meta' contains required properties\", function () {\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    const meta = responseBody.meta;\r",
													"    pm.expect(meta).to.have.property(\"created\");\r",
													"    pm.expect(meta).to.have.property(\"location\");\r",
													"    pm.expect(meta).to.have.property(\"lastModified\");\r",
													"    pm.expect(meta).to.have.property(\"resourceType\");\r",
													"});\r",
													"\r",
													"// Validate 'schemas' array\r",
													"pm.test(\"'schemas' is an array of strings\", function () {\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    responseBody.schemas.forEach(schema => pm.expect(schema));\r",
													"});\r",
													"\r",
													"// Validate 'roles' array\r",
													"pm.test(\"'roles' contains required properties\", function () {\r",
													"    pm.expect(responseBody).to.have.property(\"roles\").that.is.an(\"array\");\r",
													"    responseBody.roles.forEach(role => {\r",
													"        pm.expect(role).to.have.property(\"audienceValue\");\r",
													"        pm.expect(role).to.have.property(\"display\");\r",
													"        pm.expect(role).to.have.property(\"audienceType\");\r",
													"        pm.expect(role).to.have.property(\"value\");\r",
													"        pm.expect(role).to.have.property(\"$ref\");\r",
													"        pm.expect(role).to.have.property(\"audienceDisplay\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate 'name' object\r",
													"pm.test(\"'name' contains givenName and familyName\", function () {\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    const name = responseBody.name;\r",
													"    pm.expect(name).to.have.property(\"givenName\");\r",
													"    pm.expect(name).to.have.property(\"familyName\");\r",
													"});\r",
													"\r",
													"// Validate 'id' and 'userName'\r",
													"pm.test(\"'id' and 'userName' are in the response body\", function () {\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"    pm.expect(responseBody).to.have.property(\"userName\");\r",
													"});\r",
													"\r",
													"// Validate SCIM extension\r",
													"pm.test(\"SCIM extension contains manager and employeeNumber\", function () {\r",
													"    const scimExtension = responseBody[\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"];\r",
													"    pm.expect(scimExtension).to.be.an(\"object\");\r",
													"    pm.expect(scimExtension).to.have.property(\"manager\").that.is.an(\"object\");\r",
													"    pm.expect(scimExtension.manager).to.have.property(\"value\");\r",
													"    pm.expect(scimExtension).to.have.property(\"employeeNumber\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_user_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [],\n\"name\": {\n  \"givenName\": \"Kim\",\n  \"familyName\": \"Berry\"\n},\n\"userName\": \"kim\",\n\"password\": \"MyPa33w@rd\",\n\"emails\": [\n  {\n    \"value\": \"kim@gmail.com\",\n  },\n  {\n    \"type\": \"work\",\n    \"value\": \"kim@wso2.com\"\n  }\n],\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n  \"employeeNumber\": \"1234A\",\n  \"manager\": {\n    \"value\": \"Taylor\"\n  }\n}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Users",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate root-level properties\r",
													"pm.test(\"Validate root-level properties\", function () {\r",
													"    pm.expect(responseBody).to.be.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
													"    pm.expect(responseBody).to.have.property(\"itemsPerPage\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\");\r",
													"    responseBody.schemas.forEach(schema => pm.expect(schema).to.be.a(\"string\"));\r",
													"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\");\r",
													"});\r",
													"\r",
													"// Validate each resource in the 'Resources' array\r",
													"pm.test(\"Validate 'Resources' array structure\", function () {\r",
													"    responseBody.Resources.forEach(resource => {\r",
													"        // Validate optional 'emails'\r",
													"        if (resource.hasOwnProperty(\"emails\")) {\r",
													"            pm.expect(resource.emails).to.be.an(\"array\");\r",
													"        }\r",
													"\r",
													"        // Validate 'meta' object\r",
													"        pm.expect(resource).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"        pm.expect(resource.meta).to.have.property(\"location\");\r",
													"        pm.expect(resource.meta).to.have.property(\"resourceType\");\r",
													"        if (resource.meta.hasOwnProperty(\"created\")) {\r",
													"            pm.expect(resource.meta.created).to.be.a(\"string\");\r",
													"        }\r",
													"        if (resource.meta.hasOwnProperty(\"lastModified\")) {\r",
													"            pm.expect(resource.meta.lastModified).to.be.a(\"string\");\r",
													"        }\r",
													"\r",
													"        // Validate optional 'roles'\r",
													"        if (resource.hasOwnProperty(\"roles\")) {\r",
													"            pm.expect(resource.roles).to.be.an(\"array\");\r",
													"            resource.roles.forEach(role => {\r",
													"                pm.expect(role).to.have.property(\"audienceValue\");\r",
													"                pm.expect(role).to.have.property(\"display\");\r",
													"                pm.expect(role).to.have.property(\"$ref\");\r",
													"                pm.expect(role).to.have.property(\"audienceType\");\r",
													"                if (role.hasOwnProperty(\"audienceDisplay\")) {\r",
													"                    pm.expect(role.audienceDisplay).to.be.a(\"string\");\r",
													"                }\r",
													"            });\r",
													"        }\r",
													"\r",
													"        // Validate optional 'groups'\r",
													"        if (resource.hasOwnProperty(\"groups\")) {\r",
													"            pm.expect(resource.groups).to.be.an(\"array\");\r",
													"            resource.groups.forEach(group => {\r",
													"                pm.expect(group).to.have.property(\"display\");\r",
													"                pm.expect(group).to.have.property(\"value\");\r",
													"                pm.expect(group).to.have.property(\"$ref\");\r",
													"            });\r",
													"        }\r",
													"\r",
													"        // Validate optional 'name'\r",
													"        if (resource.hasOwnProperty(\"name\")) {\r",
													"            pm.expect(resource.name).to.be.an(\"object\");\r",
													"            if (resource.name.hasOwnProperty(\"givenName\")) {\r",
													"                pm.expect(resource.name.givenName).to.be.a(\"string\");\r",
													"            }\r",
													"            if (resource.name.hasOwnProperty(\"familyName\")) {\r",
													"                pm.expect(resource.name.familyName).to.be.a(\"string\");\r",
													"            }\r",
													"        }\r",
													"\r",
													"        // Validate 'id' and 'userName'\r",
													"        pm.expect(resource).to.have.property(\"id\");\r",
													"        pm.expect(resource).to.have.property(\"userName\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Find the user object with userName \"admin\"\r",
													"let adminUser = responseBody.Resources.find(user => user.userName === \"admin\");\r",
													"\r",
													"if (adminUser && adminUser.id) {\r",
													"    // Set the id as a collection variable\r",
													"    pm.collectionVariables.set(\"user_admin_id\", adminUser.id);\r",
													"    console.log(\"user_admin_id set as:\", adminUser.id);\r",
													"} else {\r",
													"    console.error(\"User with userName 'admin' not found or missing id.\");\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_user_mgt_list\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Users",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate root-level properties\r",
													"pm.test(\"Validate root-level properties\", function () {\r",
													"    pm.expect(responseBody).to.be.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
													"    pm.expect(responseBody).to.have.property(\"itemsPerPage\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    responseBody.schemas.forEach(schema => pm.expect(schema).to.be.a(\"string\"));\r",
													"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\");\r",
													"});\r",
													"\r",
													"// Validate each resource in the 'Resources' array\r",
													"pm.test(\"Validate 'Resources' array structure\", function () {\r",
													"    responseBody.Resources.forEach(resource => {\r",
													"        pm.expect(resource).to.have.property(\"name\");\r",
													"        pm.expect(resource.name).to.have.property(\"familyName\");\r",
													"        pm.expect(resource).to.have.property(\"id\");\r",
													"        pm.expect(resource).to.have.property(\"userName\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_user_mgt_list\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"\n],\n\"attributes\": [\n  \"name.familyName\",\n  \"userName\"\n],\n\"filter\": \"userName sw ki and name.familyName co err\",\n\"domain\": \"PRIMARY\",\n\"startIndex\": 1,\n\"count\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Users/.search",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Users",
												".search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the JSON response\r",
													"const statusCode = pm.response.code;\r",
													"const responseData = pm.response.json();\r",
													"\r",
													"// Test based on the status code\r",
													"if (statusCode === 200) {\r",
													"    pm.test(\"Response contains required fields\", function () {\r",
													"    pm.expect(responseData).to.have.property(\"id\");\r",
													"    pm.expect(responseData).to.have.property(\"userName\");\r",
													"    pm.expect(responseData).to.have.property(\"emails\");\r",
													"    pm.expect(responseData).to.have.property(\"meta\");\r",
													"    pm.expect(responseData).to.have.property(\"roles\");\r",
													"    pm.expect(responseData).to.have.property(\"name\");\r",
													"    pm.expect(responseData).to.have.property(\"schemas\");\r",
													"    pm.expect(responseData).to.have.property(\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\");\r",
													"});\r",
													"\r",
													"// Test the email structure\r",
													"pm.test(\"Emails array validation\", function () {\r",
													"    pm.expect(responseData.emails).to.be.an(\"array\").that.is.not.empty;\r",
													"    responseData.emails.forEach(email => {\r",
													"        if (typeof email === \"object\") {\r",
													"            pm.expect(email).to.have.property(\"type\");\r",
													"            pm.expect(email).to.have.property(\"value\");\r",
													"        } else {\r",
													"            pm.expect(email).to.be.a(\"string\");\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// Check that the 'roles' array contains the expected structure\r",
													"pm.test(\"Roles array validation\", function () {\r",
													"    pm.expect(responseData.roles).to.be.an(\"array\").that.is.not.empty;\r",
													"    responseData.roles.forEach(role => {\r",
													"        pm.expect(role).to.have.property(\"display\");\r",
													"        pm.expect(role).to.have.property(\"audienceType\");\r",
													"        pm.expect(role).to.have.property(\"audienceDisplay\");\r",
													"        pm.expect(role).to.have.property(\"value\");\r",
													"        pm.expect(role).to.have.property(\"$ref\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Check that the 'meta' object has expected properties\r",
													"pm.test(\"Meta object validation\", function () {\r",
													"    pm.expect(responseData.meta).to.have.property(\"created\");\r",
													"    pm.expect(responseData.meta).to.have.property(\"location\");\r",
													"    pm.expect(responseData.meta).to.have.property(\"lastModified\");\r",
													"    pm.expect(responseData.meta).to.have.property(\"resourceType\");\r",
													"});\r",
													"\r",
													"// Validate 'name' object structure\r",
													"pm.test(\"Name object validation\", function () {\r",
													"    pm.expect(responseData.name).to.have.property(\"givenName\");\r",
													"    pm.expect(responseData.name).to.have.property(\"familyName\");\r",
													"});\r",
													"} else if (statusCode === 401) {\r",
													"    pm.test(\"Status 401: Unauthorized error response\", function () {\r",
													"        // Validate properties specific to a 401 error response\r",
													"        pm.expect(jsonData).to.have.property('status', '401');\r",
													"        pm.expect(jsonData).to.have.property('schemas', 'urn:ietf:params:scim:api:messages:2.0:Error');\r",
													"        pm.expect(jsonData).to.have.property('scimType', 'Unauthorized');\r",
													"    });\r",
													"} else if (statusCode === 403) {\r",
													"    pm.test(\"Status 403: Forbidden error response\", function () {\r",
													"        // Validate properties specific to a 403 error response\r",
													"        pm.expect(jsonData).to.have.property('status', '403');\r",
													"        pm.expect(jsonData).to.have.property('schemas', 'urn:ietf:params:scim:api:messages:2.0:Error');\r",
													"        pm.expect(jsonData).to.have.property('scimType', 'Forbidden');\r",
													"    });\r",
													"} else {\r",
													"    pm.test(\"Unexpected Status Code\", function () {\r",
													"        // Fail the test if an unexpected status code is received\r",
													"        pm.expect.fail(\"Received unexpected status code: \" + statusCode);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_user_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Users/{{user_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user - PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the JSON response\r",
													"const jsonData = pm.response.json();\r",
													"const statusCode = pm.response.code;\r",
													"\r",
													"// Test based on the status code\r",
													"if (statusCode === 200) {\r",
													"    pm.test(\"Status 200: Response matches expected structure\", function () {\r",
													"        // Validate 'emails' field\r",
													"        pm.expect(jsonData).to.have.property('emails').that.is.an('array');\r",
													"        pm.expect(jsonData.emails[0]).to.have.property('type');\r",
													"        pm.expect(jsonData.emails[0]).to.have.property('value');\r",
													"\r",
													"        // Validate 'meta' field\r",
													"        pm.expect(jsonData).to.have.property('meta');\r",
													"\r",
													"        // Validate 'schemas' field\r",
													"        pm.expect(jsonData).to.have.property('schemas').that.is.an('array');\r",
													"        pm.expect(jsonData.schemas).to.include('urn:ietf:params:scim:schemas:core:2.0:User');\r",
													"        pm.expect(jsonData.schemas).to.include('urn:ietf:params:scim:schemas:extension:enterprise:2.0:User');\r",
													"        pm.expect(jsonData.schemas).to.include('urn:scim:wso2:schema');\r",
													"\r",
													"        // Validate 'roles' field\r",
													"        pm.expect(jsonData).to.have.property('roles').that.is.an('array');\r",
													"        const role = jsonData.roles[0];\r",
													"        pm.expect(role).to.have.property('audienceValue');\r",
													"        pm.expect(role).to.have.property('display', 'everyone');\r",
													"        pm.expect(role).to.have.property('audienceType', 'organization');\r",
													"        pm.expect(role).to.have.property('value');\r",
													"        pm.expect(role).to.have.property('$ref');\r",
													"        pm.expect(role).to.have.property('audienceDisplay', 'Super');\r",
													"\r",
													"        // Validate 'name' field\r",
													"        pm.expect(jsonData).to.have.property('name');\r",
													"        pm.expect(jsonData.name).to.have.property('givenName');\r",
													"        pm.expect(jsonData.name).to.have.property('familyName');\r",
													"\r",
													"        // Validate 'id' and 'userName'\r",
													"        pm.expect(jsonData).to.have.property('id');\r",
													"        pm.expect(jsonData).to.have.property('userName');\r",
													"\r",
													"        // Validate extension fields under 'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User'\r",
													"        pm.expect(jsonData).to.have.property('urn:ietf:params:scim:schemas:extension:enterprise:2.0:User');\r",
													"        const userExtension = jsonData['urn:ietf:params:scim:schemas:extension:enterprise:2.0:User'];\r",
													"    });\r",
													"} else if (statusCode === 401) {\r",
													"    pm.test(\"Status 401: Unauthorized error response\", function () {\r",
													"        // Validate properties specific to a 401 error response\r",
													"        pm.expect(jsonData).to.have.property('status', '401');\r",
													"        pm.expect(jsonData).to.have.property('schemas', 'urn:ietf:params:scim:api:messages:2.0:Error');\r",
													"        pm.expect(jsonData).to.have.property('scimType', 'Unauthorized');\r",
													"    });\r",
													"} else if (statusCode === 403) {\r",
													"    pm.test(\"Status 403: Forbidden error response\", function () {\r",
													"        // Validate properties specific to a 403 error response\r",
													"        pm.expect(jsonData).to.have.property('status', '403');\r",
													"        pm.expect(jsonData).to.have.property('schemas', 'urn:ietf:params:scim:api:messages:2.0:Error');\r",
													"        pm.expect(jsonData).to.have.property('scimType', 'Forbidden');\r",
													"    });\r",
													"} else {\r",
													"    pm.test(\"Unexpected Status Code\", function () {\r",
													"        // Fail the test if an unexpected status code is received\r",
													"        pm.expect.fail(\"Received unexpected status code: \" + statusCode);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_user_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [],\n\"name\": {\n  \"givenName\": \"Kim\",\n  \"familyName\": \"Berry\"\n},\n\"userName\": \"kim\",\n\"emails\": [\n  {\n    \"value\": \"kim@gmail.com\"\n  },\n  {\n    \"type\": \"work\",\n    \"value\": \"kim@wso2.com\"\n  }\n],\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n  \"employeeNumber\": \"1234A\",\n  \"manager\": {\n    \"value\": \"Taylor\"\n  }\n}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Users/{{user_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user - PATCH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_user_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the response body as JSON\r",
													"let responseData = pm.response.json();\r",
													"\r",
													"// Test: Check if response contains the 'id' field and save it as an environment variable\r",
													"pm.test(\"Check if 'id' exists\", function () {\r",
													"    pm.expect(responseData).to.have.property(\"id\");\r",
													"    pm.environment.set(\"userId\", responseData.id); // Save 'id' as environment variable\r",
													"    console.log(\"User ID:\", responseData.id);\r",
													"});\r",
													"\r",
													"// Test: Validate that 'userName' is present and save it as an environment variable\r",
													"pm.test(\"Check if 'userName' exists\", function () {\r",
													"    pm.expect(responseData).to.have.property(\"userName\");\r",
													"    pm.environment.set(\"userName\", responseData.userName); // Save 'userName' as environment variable\r",
													"    console.log(\"User Name:\", responseData.userName);\r",
													"});\r",
													"\r",
													"// Test: Validate 'emails' array is not empty and contains a valid email\r",
													"pm.test(\"Check if 'emails' array contains at least one email\", function () {\r",
													"    pm.expect(responseData.emails).to.be.an('array').that.is.not.empty;\r",
													"   // Regex to check valid email format\r",
													"    pm.environment.set(\"userEmail\", responseData.emails[0]); // Save first email as environment variable\r",
													"    console.log(\"Email:\", responseData.emails[0]);\r",
													"});\r",
													"\r",
													"// Test: Check if 'meta' object and 'location' exist\r",
													"pm.test(\"Check if 'meta' and 'location' exist\", function () {\r",
													"    pm.expect(responseData).to.have.property(\"meta\");\r",
													"    pm.expect(responseData.meta).to.have.property(\"location\");\r",
													"    pm.environment.set(\"userLocation\", responseData.meta.location); // Save 'location' as environment variable\r",
													"    console.log(\"User Location:\", responseData.meta.location);\r",
													"});\r",
													"\r",
													"// Test: Validate 'roles' array is not empty and contains the correct role display\r",
													"pm.test(\"Check if 'roles' array contains a role with display 'everyone'\", function () {\r",
													"    pm.expect(responseData.roles).to.be.an('array').that.is.not.empty;\r",
													"    pm.expect(responseData.roles[0]).to.have.property(\"display\", \"everyone\");\r",
													"    console.log(\"Role Display:\", responseData.roles[0].display);\r",
													"});\r",
													"\r",
													"// Test: Check if 'name' object contains 'givenName' and 'familyName'\r",
													"pm.test(\"Check if 'name' object contains 'givenName' and 'familyName'\", function () {\r",
													"    pm.expect(responseData).to.have.property(\"name\");\r",
													"    pm.expect(responseData.name).to.have.property(\"givenName\");\r",
													"    pm.expect(responseData.name).to.have.property(\"familyName\");\r",
													"    pm.environment.set(\"userFullName\", `${responseData.name.givenName} ${responseData.name.familyName}`);\r",
													"    console.log(\"Full Name:\", `${responseData.name.givenName} ${responseData.name.familyName}`);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n],\n\"Operations\": [\n  {\n    \"op\": \"add\",\n    \"value\": {\n      \"nickName\": \"Shaggy\"\n    }\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Users/{{user_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SCIM 2.0 Groups API",
							"item": [
								{
									"name": "Create group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_group_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Or, alternatively, set it as a global variable\r",
													"pm.collectionVariables.set(\"group_id\", responseBody.id);\r",
													"\r",
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"pm.test(\"Response matches expected structure\", function () {\r",
													"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/scim+json');\r",
													"     pm.expect(pm.response.json()).to.be.an('object');\r",
													"     pm.expect(pm.response.json()).to.have.property('displayName');\r",
													"     pm.expect(pm.response.json()).to.have.property('meta').that.is.an('object');\r",
													"     pm.expect(pm.response.json().meta).to.have.property('created');\r",
													"     pm.expect(pm.response.json().meta).to.have.property('location');\r",
													"     pm.expect(pm.response.json().meta).to.have.property('lastModified');\r",
													"     pm.expect(pm.response.json()).to.have.property('schemas').that.is.an('array');\r",
													"     pm.expect(pm.response.json()).to.have.property('id');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n],\n\"displayName\": \"manager\",\n\"members\": [\n  {\n    \"value\": \"{{user_id}}\",\n    \"display\": \"Kim\"\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Groups",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"pm.test(\"Response body\", function () {\r",
													"     pm.expect(pm.response.json()).to.be.an('object');\r",
													"     pm.expect(pm.response.json()).to.have.property('totalResults');\r",
													"     pm.expect(pm.response.json()).to.have.property('startIndex');\r",
													"     pm.expect(pm.response.json()).to.have.property('itemsPerPage');\r",
													"     pm.expect(pm.response.json()).to.have.property('schemas');\r",
													"     pm.expect(pm.response.json().Resources).to.be.an('array');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_group_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Groups",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"pm.test(\"Response Body structure is as followed\", function () {\r",
													"     pm.expect(pm.response.json()).to.be.an('object');\r",
													"     pm.expect(pm.response.json()).to.have.property('totalResults');\r",
													"     pm.expect(pm.response.json()).to.have.property('startIndex');\r",
													"     pm.expect(pm.response.json()).to.have.property('itemsPerPage');\r",
													"     pm.expect(pm.response.json()).to.have.property('schemas').that.is.an('array');\r",
													"    // Check if the 'Resources' property exists and validate if it's an array\r",
													"pm.test(\"'Resources' property may or may not exist\", function () {\r",
													"    if (pm.response.json().hasOwnProperty('Resources')) {\r",
													"        pm.expect(pm.response.json().Resources).to.be.an('array');\r",
													"    } else {\r",
													"        pm.expect(pm.response.json().Resources).to.be.undefined;\r",
													"    }\r",
													"});\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_group_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"\n],\n\"startIndex\": 1,\n\"filter\": \"displayName eq manager\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Groups/.search",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Groups",
												".search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get group by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response Status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"pm.test(\"Response Body structure\", function () {\r",
													"     pm.expect(pm.response.json()).to.be.an('object');\r",
													"     pm.expect(pm.response.json()).to.have.property('displayName');\r",
													"     pm.expect(pm.response.json()).to.have.property('meta');\r",
													"     pm.expect(pm.response.json()).to.have.property('schemas');\r",
													"     pm.expect(pm.response.json()).to.have.property('members');\r",
													"     pm.expect(pm.response.json()).to.have.property('id');\r",
													"\r",
													"     // Check meta \r",
													"     const meta = pm.response.json().meta;\r",
													"     pm.expect(meta).to.have.property('created');\r",
													"     pm.expect(meta).to.have.property('location');\r",
													"     pm.expect(meta).to.have.property('lastModified');\r",
													"\r",
													"     // Check members\r",
													"     const members = pm.response.json().members;\r",
													"     const member = members[0];\r",
													"     pm.expect(member).to.have.property('display');\r",
													"     pm.expect(member).to.have.property('value');\r",
													"     pm.expect(member).to.have.property('$ref');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_group_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Groups/{{group_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group - PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response Status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"pm.test(\"Response Body structure\", function () {\r",
													"     pm.expect(pm.response.json()).to.be.an('object');\r",
													"     pm.expect(pm.response.json()).to.have.property('displayName');\r",
													"     pm.expect(pm.response.json()).to.have.property('meta');\r",
													"\r",
													"     // Validate meta\r",
													"     pm.expect(pm.response.json().meta).to.be.an('object');\r",
													"\r",
													"     pm.expect(pm.response.json().meta).to.have.property('created');\r",
													"     pm.expect(pm.response.json().meta).to.have.property('location');\r",
													"     pm.expect(pm.response.json().meta).to.have.property('lastModified');\r",
													"\r",
													"     // Validate schemas\r",
													"     pm.expect(pm.response.json()).to.have.property('schemas');\r",
													"     pm.expect(pm.response.json().schemas).to.be.an('array');\r",
													"\r",
													"     // Validate members\r",
													"     pm.expect(pm.response.json()).to.have.property('members');\r",
													"     pm.expect(pm.response.json().members).to.be.an('array');\r",
													"\r",
													"     const members = pm.response.json().members;\r",
													"     const member = members[0];\r",
													"\r",
													"     pm.expect(member).to.have.property('display');\r",
													"     pm.expect(member).to.have.property('value');\r",
													"     pm.expect(member).to.have.property('$ref');\r",
													"     \r",
													"\r",
													"     pm.expect(pm.response.json()).to.have.property('id');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_group_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"displayName\": \"manager\",\n\"members\": [\n  {\n    \"value\": \"{{user_id}}\",\n    \"display\": \"kim\"\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Groups/{{group_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group - PATCH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response Status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"pm.test(\"Response body structure\", function () {\r",
													"     pm.expect(pm.response.json()).to.be.an('object');\r",
													"     pm.expect(pm.response.json()).to.have.property('displayName');\r",
													"\r",
													"     //Validate meta\r",
													"     pm.expect(pm.response.json()).to.have.property('meta').that.is.an('object');\r",
													"     pm.expect(pm.response.json().meta).to.have.property('created');\r",
													"     pm.expect(pm.response.json().meta).to.have.property('location');\r",
													"     pm.expect(pm.response.json().meta).to.have.property('lastModified');\r",
													"\r",
													"     pm.expect(pm.response.json()).to.have.property('schemas').that.is.an('array');\r",
													"\r",
													"     //Validate members\r",
													"     pm.expect(pm.response.json()).to.have.property('members').that.is.an('array');\r",
													"     pm.response.json().members.forEach((member) => {\r",
													"            pm.expect(member).to.have.property('display');\r",
													"            pm.expect(member).to.have.property('value');\r",
													"            pm.expect(member).to.have.property('$ref');\r",
													"     });\r",
													"     pm.expect(pm.response.json()).to.have.property('id');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_group_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n],\n\"Operations\": [\n  {\n    \"op\": \"add\",\n    \"value\": {\n      \"members\": [\n        {\n          \"display\": \"kim\",\n          \"value\": \"{{user_id}}\"\n        }\n      ]\n    }\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Groups/{{group_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SCIM 2.0 Bulk API",
							"item": [
								{
									"name": "Create/ Update/ Delete SCIM Resources (Users/ Groups/ Roles) in Bulk",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('bulkId', 'ytrewq');\r",
													"pm.variables.set('userName', 'jesse');\r",
													"pm.variables.set('password', 'Jesspass!1');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_bulk_resource_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate root-level properties\r",
													"pm.test(\"Validate root-level properties\", function () {\r",
													"    pm.expect(responseBody).to.be.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    responseBody.schemas.forEach(schema => pm.expect(schema).to.be.a(\"string\"));\r",
													"    pm.expect(responseBody).to.have.property(\"Operations\").that.is.an(\"array\");\r",
													"});\r",
													"\r",
													"// Validate each operation in the 'Operations' array\r",
													"pm.test(\"Validate 'Operations' array structure\", function () {\r",
													"    responseBody.Operations.forEach(operation => {\r",
													"        pm.expect(operation).to.have.property(\"bulkId\");\r",
													"        pm.expect(operation).to.have.property(\"method\");\r",
													"        pm.expect(operation).to.have.property(\"response\");\r",
													"        pm.expect(operation).to.have.property(\"status\").that.is.an(\"object\");\r",
													"        pm.expect(operation.status).to.have.property(\"code\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Getting the id of the user\r",
													"\r",
													"// Check if Operations array and response exist\r",
													"if (responseBody.Operations && responseBody.Operations.length > 0) {\r",
													"    let operation = responseBody.Operations[0];\r",
													"    \r",
													"    // Check if 'response' field exists\r",
													"    if (operation.response) {\r",
													"        // Parse the 'response' field\r",
													"        let nestedResponse = JSON.parse(operation.response);\r",
													"        \r",
													"        // Check if 'id' exists in the parsed response\r",
													"        if (nestedResponse.id) {\r",
													"            // Set the id as a collection variable\r",
													"            pm.collectionVariables.set(\"user_id_01\", nestedResponse.id);\r",
													"            console.log(\"User ID set as collection variable:\", nestedResponse.id);\r",
													"        } else {\r",
													"            console.warn(\"ID not found in the nested response.\");\r",
													"        }\r",
													"    } else {\r",
													"        console.warn(\"'response' field is missing in the operation.\");\r",
													"    }\r",
													"} else {\r",
													"    console.warn(\"Operations array is empty or missing.\");\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"failOnErrors\": 1,\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\n],\n\"Operations\": [\n  {\n    \"method\": \"POST\",\n    \"path\": \"/Users\",\n    \"bulkId\": \"{{bulkId}}\",\n    \"data\": {\n      \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\"\n      ],\n      \"userName\": \"{{userName}}\",\n      \"password\": \"{{password}}\"\n    }\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Bulk",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"Bulk"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SCIM 2.0 Resource types API",
							"item": [
								{
									"name": "Get resource types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate root-level properties\r",
													"pm.test(\"Validate root-level properties\", function () {\r",
													"    pm.expect(responseBody).to.be.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    responseBody.schemas.forEach(schema => pm.expect(schema).to.be.a(\"string\"));\r",
													"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\");\r",
													"});\r",
													"\r",
													"// Validate each resource in the 'Resources' array\r",
													"pm.test(\"Validate 'Resources' array structure\", function () {\r",
													"    responseBody.Resources.forEach(resource => {\r",
													"        pm.expect(resource).to.have.property(\"schema\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"endpoint\").that.is.a(\"string\");\r",
													"        \r",
													"        // Validate 'meta' object\r",
													"        pm.expect(resource).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"        pm.expect(resource.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"        pm.expect(resource.meta).to.have.property(\"resourceType\").that.is.a(\"string\");\r",
													"        \r",
													"        // Validate 'schemas' array\r",
													"        pm.expect(resource).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"        resource.schemas.forEach(schema => pm.expect(schema).to.be.a(\"string\"));\r",
													"        \r",
													"        pm.expect(resource).to.have.property(\"name\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"description\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"id\").that.is.a(\"string\");\r",
													"        \r",
													"        // Optional 'schemaExtensions'\r",
													"        if (resource.hasOwnProperty(\"schemaExtensions\")) {\r",
													"            pm.expect(resource.schemaExtensions).to.be.an(\"array\");\r",
													"            resource.schemaExtensions.forEach(extension => {\r",
													"                pm.expect(extension).to.have.property(\"schema\").that.is.a(\"string\");\r",
													"                pm.expect(extension).to.have.property(\"required\").that.is.a(\"boolean\");\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/ResourceTypes",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"ResourceTypes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SCIM 2.0 Service provider configuration API",
							"item": [
								{
									"name": "Get service provider config",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"pm.test(\"Validate response body\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"    \r",
													"    // Validate top-level attributes\r",
													"    pm.expect(responseBody).to.have.property('patch');\r",
													"    pm.expect(responseBody).to.have.property('filter');\r",
													"    pm.expect(responseBody).to.have.property('documentationUri');\r",
													"    pm.expect(responseBody).to.have.property('authenticationSchemes');\r",
													"    pm.expect(responseBody).to.have.property('schemas');\r",
													"    pm.expect(responseBody).to.have.property('etag');\r",
													"    pm.expect(responseBody).to.have.property('sort');\r",
													"    pm.expect(responseBody).to.have.property('bulk');\r",
													"    pm.expect(responseBody).to.have.property('changePassword');\r",
													"    \r",
													"    // Validate 'patch' object\r",
													"    pm.expect(responseBody.patch).to.have.property('supported', true);\r",
													"    \r",
													"    // Validate 'filter' object\r",
													"    pm.expect(responseBody.filter).to.have.property('maxResults');\r",
													"    pm.expect(responseBody.filter).to.have.property('supported', true);\r",
													"    \r",
													"    // Validate 'authenticationSchemes' array\r",
													"    pm.expect(responseBody.authenticationSchemes).to.be.an('array');\r",
													"    responseBody.authenticationSchemes.forEach(function (scheme) {\r",
													"        pm.expect(scheme).to.have.property('name');\r",
													"        pm.expect(scheme).to.have.property('description');\r",
													"        pm.expect(scheme).to.have.property('specUri');\r",
													"        pm.expect(scheme).to.have.property('type');\r",
													"        pm.expect(scheme).to.have.property('primary');\r",
													"    });\r",
													"    \r",
													"    // Validate 'schemas' array\r",
													"    pm.expect(responseBody.schemas).to.be.an('array').that.includes(\"urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig\");\r",
													"    \r",
													"    // Validate 'etag' object\r",
													"    pm.expect(responseBody.etag).to.have.property('supported', false);\r",
													"    \r",
													"    // Validate 'sort' object\r",
													"    pm.expect(responseBody.sort).to.have.property('supported', false);\r",
													"    \r",
													"    // Validate 'bulk' object\r",
													"    pm.expect(responseBody.bulk).to.have.property('maxPayloadSize');\r",
													"    pm.expect(responseBody.bulk).to.have.property('maxOperations');\r",
													"    pm.expect(responseBody.bulk).to.have.property('supported', true);\r",
													"    \r",
													"    // Validate 'changePassword' object\r",
													"    pm.expect(responseBody.changePassword).to.have.property('supported', false);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/ServiceProviderConfig",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"ServiceProviderConfig"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Offline user onboard management API",
					"item": [
						{
							"name": "Temporary Link",
							"item": [
								{
									"name": "Generates a random link that can be used to set a new password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate the status code\r",
													"pm.test(\"Response status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_offline_invite\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"Kim\",\n    \"userstore\": \"PRIMARY\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/users/v1/offline-invite-link",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"users",
												"v1",
												"offline-invite-link"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Application management",
			"item": [
				{
					"name": "Application management API",
					"item": [
						{
							"name": "Applications",
							"item": [
								{
									"name": "Add application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"New Application\",\n    \"advancedConfigurations\":{\n        \"discoverableByEndUsers\":false,\n        \"skipLogoutConsent\":true,\n        \"skipLoginConsent\":true\n    },\n    \"authenticationSequence\":{\n        \"type\":\"DEFAULT\",\n        \"steps\":[\n            {\n                \"id\":1,\n                \"options\":[\n                    {\n                        \"idp\":\"LOCAL\",\n                        \"authenticator\":\"basic\"\n                    }\n                    ]\n            }\n            ]\n            },\n        \"claimConfiguration\":{\n            \"dialect\":\"LOCAL\",\n            \"requestedClaims\":[\n                {\n                    \"claim\":{\n                        \"uri\":\"http://wso2.org/claims/username\"\n                        }\n                }\n                ]\n                },\n        \"inboundProtocolConfiguration\":{\n            \"oidc\":{\n                \"grantTypes\":[\n                    \"authorization_code\"\n                    ],\n                \"allowedOrigins\":[\n                    \"https://myapp.io.login\"\n                    ],\n                \"callbackURLs\":[\n                    \"https://myapp.io.login\"\n                    ],\n                \"publicClient\":false,\n                \"refreshToken\":{\n                    \"expiryInSeconds\":86400\n                    }}},\n                \"templateId\":\"b9c5e11e-fc78-484b-9bec-015d247561b8\",\n                \"associatedRoles\":{\n                    \"allowedAudience\":\"APPLICATION\",\n                    \"roles\":[]}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "List applications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the JSON response body\r",
													"let response = pm.response.json();\r",
													"\r",
													"\r",
													"// Check if the applications array exists\r",
													"if (response.applications && Array.isArray(response.applications)) {\r",
													"    // Search for the application with name \"New Application\"\r",
													"    let application = response.applications.find(t => t.name === \"New Application\");\r",
													"    \r",
													"    // If the application is found, set the ID as a collection variable\r",
													"    if (application) {\r",
													"        pm.collectionVariables.set(\"applicationID\", application.id);\r",
													"        console.log(\"Found application ID:\", application.id);  // Log the ID for verification\r",
													"    } else {\r",
													"        console.log(\"application with name '{New Application' not found\");\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response does not contain a valid 'applications' array\");\r",
													"}\r",
													"\r",
													"pm.test(\"Validate response body properties\", function () {\r",
													"     var responseBody = pm.response.json();\r",
													"     pm.expect(responseBody).to.be.an('object');\r",
													"     pm.expect(responseBody).to.have.property('totalResults');\r",
													"     pm.expect(responseBody).to.have.property('startIndex');\r",
													"     pm.expect(responseBody).to.have.property('count');\r",
													"     pm.expect(responseBody).to.have.property('applications');\r",
													"     pm.expect(responseBody).to.have.property('links');\r",
													"     pm.expect(responseBody.applications).to.be.an('array');\r",
													"\r",
													"      // Validate each applications structure      \r",
													"    responseBody.applications.forEach(function(applications) {\r",
													"        pm.expect(applications).to.have.property(\"id\");\r",
													"        pm.expect(applications).to.have.property(\"name\");\r",
													"        pm.expect(applications).to.have.property(\"access\");\r",
													"        pm.expect(applications).to.have.property(\"self\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications?limit=30&offset=0",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications"
											],
											"query": [
												{
													"key": "limit",
													"value": "30"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve application by ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body validation\", function () {\r",
													"     pm.expect(pm.response.json()).to.be.an('object');\r",
													"     pm.expect(pm.response.json()).to.have.property('id');\r",
													"     pm.expect(pm.response.json()).to.have.property('name');\r",
													"     pm.expect(pm.response.json()).to.have.property('applicationVersion');\r",
													"     pm.expect(pm.response.json()).to.have.property('clientId');\r",
													"     pm.expect(pm.response.json()).to.have.property('issuer');\r",
													"     pm.expect(pm.response.json()).to.have.property('realm');\r",
													"     pm.expect(pm.response.json()).to.have.property('templateId');\r",
													"     pm.expect(pm.response.json()).to.have.property('isManagementApp');\r",
													"     pm.expect(pm.response.json()).to.have.property('applicationEnabled');\r",
													"     pm.expect(pm.response.json()).to.have.property('associatedRoles');\r",
													"     pm.expect(pm.response.json()).to.have.property('claimConfiguration');\r",
													"     pm.expect(pm.response.json()).to.have.property('inboundProtocols');\r",
													"     pm.expect(pm.response.json()).to.have.property('authenticationSequence');\r",
													"     pm.expect(pm.response.json()).to.have.property('advancedConfigurations');\r",
													"     pm.expect(pm.response.json()).to.have.property('provisioningConfigurations');\r",
													"     pm.expect(pm.response.json()).to.have.property('access');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partially update application by ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provisioningConfigurations\": {\n        \"inboundProvisioning\": {\n            \"provisioningUserstoreDomain\": \"PRIMARY\",\n            \"proxyMode\": false\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Export application as an XML file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/octet-stream"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/export?exportSecrets=false",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"export"
											],
											"query": [
												{
													"key": "exportSecrets",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Export application in XML, YAML, or JSON file formats.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/yaml"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/exportFile?exportSecrets=false",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"exportFile"
											],
											"query": [
												{
													"key": "exportSecrets",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Authenticators",
							"item": [
								{
									"name": "Get configured authenticators",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"application_API\", \"cb2bd2a7-8739-4e49-8d1b-1a95a8317d9c\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body as JSON\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Test: Response is an array\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    pm.expect(responseBody).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"// Iterate through each step object\r",
													"responseBody.forEach((step, index) => {\r",
													"    // Test: Each step object has stepId, localAuthenticators, and federatedAuthenticators\r",
													"    pm.test(`Step object at index ${index} has required properties`, function () {\r",
													"        pm.expect(step).to.have.property(\"stepId\");\r",
													"        pm.expect(step).to.have.property(\"localAuthenticators\");\r",
													"        pm.expect(step).to.have.property(\"federatedAuthenticators\");\r",
													"\r",
													"        // Verify localAuthenticators and federatedAuthenticators are arrays\r",
													"        pm.expect(step.localAuthenticators).to.be.an(\"array\");\r",
													"        pm.expect(step.federatedAuthenticators).to.be.an(\"array\");\r",
													"    });\r",
													"\r",
													"    // Test: Each object in localAuthenticators has required properties\r",
													"    step.localAuthenticators.forEach((auth, authIndex) => {\r",
													"        pm.test(`Local authenticator at index ${authIndex} in step ${index} has required properties`, function () {\r",
													"            pm.expect(auth).to.have.property(\"name\");\r",
													"            pm.expect(auth).to.have.property(\"type\");\r",
													"        });\r",
													"    });\r",
													"\r",
													"    // Test: Each object in federatedAuthenticators has required properties\r",
													"    step.federatedAuthenticators.forEach((auth, authIndex) => {\r",
													"        pm.test(`Federated authenticator at index ${authIndex} in step ${index} has required properties`, function () {\r",
													"            pm.expect(auth).to.have.property(\"name\");\r",
													"            pm.expect(auth).to.have.property(\"type\");\r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/authenticators",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"authenticators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Authorized APIs",
							"item": [
								{
									"name": "Authorized an API to the application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{apiResourceId}}\",\n    \"policyIdentifier\": \"RBAC\",\n    \"scopes\": [\n        \"greetings:write\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/authorized-apis",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"authorized-apis"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get authorized APIs of the application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body as JSON\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Test: Response is an array\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    pm.expect(responseBody).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"// Iterate through each object in the array\r",
													"responseBody.forEach((obj, index) => {\r",
													"    // Test: Each object has required properties\r",
													"    pm.test(`Object at index ${index} has required properties`, function () {\r",
													"        pm.expect(obj).to.have.property(\"id\");\r",
													"        pm.expect(obj).to.have.property(\"identifier\");\r",
													"        pm.expect(obj).to.have.property(\"displayName\");\r",
													"        pm.expect(obj).to.have.property(\"policyId\");\r",
													"        pm.expect(obj).to.have.property(\"type\");\r",
													"        pm.expect(obj).to.have.property(\"authorizedScopes\");\r",
													"        pm.expect(obj.authorizedScopes).to.be.an(\"array\");\r",
													"    });\r",
													"\r",
													"    // Test: Each authorizedScope object has required properties\r",
													"    obj.authorizedScopes.forEach((scope, scopeIndex) => {\r",
													"        pm.test(`Scope object at index ${scopeIndex} in authorizedScopes of object ${index} has required properties`, function () {\r",
													"            pm.expect(scope).to.have.property(\"id\");\r",
													"            pm.expect(scope).to.have.property(\"name\");\r",
													"            pm.expect(scope).to.have.property(\"displayName\");\r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/authorized-apis",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"authorized-apis"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update authorized API scopes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"apiID\", \"4b7a2bea-d03d-44fa-976e-3aa56b351da4\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"addedScopes\": [\n        \"greetings:write\"\n    ],\n    \"removedScopes\": [\n \n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/authorized-apis/{{apiResourceId}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"authorized-apis",
												"{{apiResourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove API authorization from the application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 204\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/authorized-apis/{{apiResourceId}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"authorized-apis",
												"{{apiResourceId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requrements\n\n- Have to have an application with authorized API/s"
						},
						{
							"name": "Resident Application",
							"item": [
								{
									"name": "Update resident application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body as JSON\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Test: Response contains provisioningConfigurations\r",
													"pm.test(\"Response has provisioningConfigurations\", function () {\r",
													"    pm.expect(responseBody).to.have.property(\"provisioningConfigurations\");\r",
													"    pm.expect(responseBody.provisioningConfigurations).to.have.property(\"inboundProvisioning\");\r",
													"    pm.expect(responseBody.provisioningConfigurations).to.have.property(\"outboundProvisioningIdps\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"inboundProvisioning\": {\n  \"proxyMode\": true,\n  \"provisioningUserstoreDomain\": \"PRIMARY\"\n},\n\"outboundProvisioningIdps\": [\n  {\n    \"idp\": \"Google\",\n    \"connector\": \"googleapps\",\n    \"blocking\": false,\n    \"rules\": false,\n    \"jit\": false\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/resident",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"resident"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get resident application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body as JSON\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Test: Response contains provisioningConfigurations\r",
													"pm.test(\"Response has provisioningConfigurations\", function () {\r",
													"    pm.expect(responseBody).to.have.property(\"provisioningConfigurations\");\r",
													"    pm.expect(responseBody.provisioningConfigurations).to.have.property(\"inboundProvisioning\");\r",
													"    pm.expect(responseBody.provisioningConfigurations).to.have.property(\"outboundProvisioningIdps\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/resident",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"resident"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete updated outbound provisioning",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer 7253f5f1-367f-388a-8eae-03a2e1696890"
											},
											{
												"key": "Referer",
												"value": ""
											},
											{
												"key": "User-Agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"outboundProvisioningIdps\":[]}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/resident",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"resident"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Inbound Protocols",
							"item": [
								{
									"name": "Retrieve inbound protocol configurations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response Body is an Array with required properties\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Check if the response body is an array\r",
													"    pm.expect(Array.isArray(responseBody)).to.be.true;\r",
													"\r",
													"    // Check if each item in the array has 'type' and 'self' properties\r",
													"    responseBody.forEach(function(item) {\r",
													"        pm.expect(item).to.have.property('type');\r",
													"        pm.expect(item).to.have.property('self');\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/inbound-protocols/",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"inbound-protocols",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Inbound Protocols - SAML",
							"item": [
								{
									"name": "Add SAML Application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Application_SAML\",\n    \"advancedConfigurations\": {\n        \"discoverableByEndUsers\": false,\n        \"skipLogoutConsent\": true,\n        \"skipLoginConsent\": true\n    },\n    \"authenticationSequence\": {\n        \"type\": \"DEFAULT\",\n        \"steps\": [\n            {\n                \"id\": 1,\n                \"options\": [\n                    {\n                        \"idp\": \"LOCAL\",\n                        \"authenticator\": \"basic\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"inboundProtocolConfiguration\": {\n        \"saml\": {\n            \"manualConfiguration\": {\n                \"issuer\": \"https://example.issuer\",\n                \"assertionConsumerUrls\": [\n                    \"https://example.consumer.io\"\n                ],\n                \"attributeProfile\": {\n                    \"enabled\": true,\n                    \"alwaysIncludeAttributesInResponse\": true\n                },\n                \"singleLogoutProfile\": {\n                    \"enabled\": true,\n                    \"logoutMethod\": \"BACKCHANNEL\",\n                    \"idpInitiatedSingleLogout\": {\n                        \"enabled\": false\n                    }\n                }\n            }\n        }\n    },\n    \"templateId\": \"776a73da-fd8e-490b-84ff-93009f8ede85\",\n    \"associatedRoles\": {\n        \"allowedAudience\": \"APPLICATION\",\n        \"roles\": []\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve SAML Application ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"// Check if the applications array exists\r",
													"if (response.applications && Array.isArray(response.applications)) {\r",
													"    // Search for the application with name \"Application_SAML\"\r",
													"    let application = response.applications.find(t => t.name === \"Application_SAML\");\r",
													"    \r",
													"    // If the application is found, set the ID as a collection variable\r",
													"    if (application) {\r",
													"        pm.collectionVariables.set(\"application_saml_id\", application.id);\r",
													"        console.log(\"Found application ID:\", application.id);  // Log the ID for verification\r",
													"    } else {\r",
													"        console.log(\"application with name '{Application_SAML' not found\");\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response does not contain a valid 'applications' array\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve SAML2 authentication protocol parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Top-level properties\r",
													"    pm.expect(responseBody).to.have.property('issuer');\r",
													"    pm.expect(responseBody).to.have.property('assertionConsumerUrls');\r",
													"    pm.expect(responseBody).to.have.property('defaultAssertionConsumerUrl');\r",
													"    pm.expect(responseBody).to.have.property('singleSignOnProfile');\r",
													"    pm.expect(responseBody).to.have.property('attributeProfile');\r",
													"    pm.expect(responseBody).to.have.property('singleLogoutProfile');\r",
													"    pm.expect(responseBody).to.have.property('requestValidation');\r",
													"    pm.expect(responseBody).to.have.property('responseSigning');\r",
													"    pm.expect(responseBody).to.have.property('enableAssertionQueryProfile');\r",
													"\r",
													"    // Validate 'assertionConsumerUrls'\r",
													"    pm.expect(responseBody.assertionConsumerUrls).to.be.an('array').that.is.not.empty;\r",
													"\r",
													"    // Validate 'singleSignOnProfile'\r",
													"    pm.expect(responseBody.singleSignOnProfile).to.have.property('bindings');\r",
													"    pm.expect(responseBody.singleSignOnProfile.bindings).to.be.an('array');\r",
													"    pm.expect(responseBody.singleSignOnProfile).to.have.property('enableSignatureValidationForArtifactBinding');\r",
													"    pm.expect(responseBody.singleSignOnProfile).to.have.property('attributeConsumingServiceIndex');\r",
													"    pm.expect(responseBody.singleSignOnProfile).to.have.property('enableIdpInitiatedSingleSignOn');\r",
													"    pm.expect(responseBody.singleSignOnProfile).to.have.property('assertion');\r",
													"\r",
													"    // Validate 'assertion' inside 'singleSignOnProfile'\r",
													"    const assertion = responseBody.singleSignOnProfile.assertion;\r",
													"    pm.expect(assertion).to.have.property('nameIdFormat');\r",
													"    pm.expect(assertion).to.have.property('audiences');\r",
													"    pm.expect(assertion.audiences).to.be.an('array');\r",
													"    pm.expect(assertion).to.have.property('recipients');\r",
													"    pm.expect(assertion.recipients).to.be.an('array');\r",
													"    pm.expect(assertion).to.have.property('digestAlgorithm');\r",
													"    pm.expect(assertion).to.have.property('encryption');\r",
													"\r",
													"    // Validate 'encryption' inside 'assertion'\r",
													"    const encryption = assertion.encryption;\r",
													"    pm.expect(encryption).to.have.property('enabled');\r",
													"    pm.expect(encryption).to.have.property('assertionEncryptionAlgorithm');\r",
													"    pm.expect(encryption).to.have.property('keyEncryptionAlgorithm');\r",
													"\r",
													"    // Validate 'attributeProfile'\r",
													"    const attributeProfile = responseBody.attributeProfile;\r",
													"    pm.expect(attributeProfile).to.have.property('enabled');\r",
													"    pm.expect(attributeProfile).to.have.property('alwaysIncludeAttributesInResponse');\r",
													"\r",
													"    // Validate 'singleLogoutProfile'\r",
													"    const singleLogoutProfile = responseBody.singleLogoutProfile;\r",
													"    pm.expect(singleLogoutProfile).to.have.property('enabled');\r",
													"    pm.expect(singleLogoutProfile).to.have.property('logoutMethod');\r",
													"    pm.expect(singleLogoutProfile).to.have.property('idpInitiatedSingleLogout');\r",
													"    pm.expect(singleLogoutProfile.idpInitiatedSingleLogout).to.have.property('enabled');\r",
													"    pm.expect(singleLogoutProfile.idpInitiatedSingleLogout).to.have.property('returnToUrls');\r",
													"    pm.expect(singleLogoutProfile.idpInitiatedSingleLogout.returnToUrls).to.be.an('array');\r",
													"\r",
													"    // Validate 'requestValidation'\r",
													"    const requestValidation = responseBody.requestValidation;\r",
													"    pm.expect(requestValidation).to.have.property('enableSignatureValidation');\r",
													"\r",
													"    // Validate 'responseSigning'\r",
													"    const responseSigning = responseBody.responseSigning;\r",
													"    pm.expect(responseSigning).to.have.property('enabled');\r",
													"    pm.expect(responseSigning).to.have.property('signingAlgorithm');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{application_saml_id}}/inbound-protocols/saml",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{application_saml_id}}",
												"inbound-protocols",
												"saml"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update SAML2 authentication protocol parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"manualConfiguration\": {\n        \"assertionConsumerUrls\": [\n            \"https://example.consumer.io\"\n        ],\n        \"attributeProfile\": {\n            \"alwaysIncludeAttributesInResponse\": true,\n            \"enabled\": true\n        },\n        \"defaultAssertionConsumerUrl\": \"https://example.consumer.io\",\n        \"enableAssertionQueryProfile\": false,\n        \"idpEntityIdAlias\": \"\",\n        \"issuer\": \"https://example.issuer\",\n        \"requestValidation\": {\n            \"enableSignatureValidation\": false\n        },\n        \"responseSigning\": {\n            \"enabled\": false,\n            \"signingAlgorithm\": \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"\n        },\n        \"serviceProviderQualifier\": \"\",\n        \"singleLogoutProfile\": {\n            \"enabled\": true,\n            \"idpInitiatedSingleLogout\": {\n                \"enabled\": false,\n                \"returnToUrls\": []\n            },\n            \"logoutMethod\": \"BACKCHANNEL\",\n            \"logoutRequestUrl\": \"\",\n            \"logoutResponseUrl\": \"\"\n        },\n        \"singleSignOnProfile\": {\n            \"assertion\": {\n                \"audiences\": [],\n                \"digestAlgorithm\": \"http://www.w3.org/2001/04/xmlenc#sha256\",\n                \"encryption\": {\n                    \"assertionEncryptionAlgorithm\": \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\",\n                    \"enabled\": false,\n                    \"keyEncryptionAlgorithm\": \"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\"\n                },\n                \"nameIdFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\",\n                \"recipients\": []\n            },\n            \"bindings\": [\n                \"HTTP_POST\",\n                \"HTTP_REDIRECT\"\n            ],\n            \"enableIdpInitiatedSingleSignOn\": false,\n            \"enableSignatureValidationForArtifactBinding\": false\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{application_saml_id}}/inbound-protocols/saml",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{application_saml_id}}",
												"inbound-protocols",
												"saml"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete SAML2 authentication protocol parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.execution.skipRequest();\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{application_saml_id}}/inbound-protocols/saml",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{application_saml_id}}",
												"inbound-protocols",
												"saml"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Inbound Protocols - OAuth / OIDC",
							"item": [
								{
									"name": "Retrieve OIDC authentication protocol parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Extract the clientId and clientSecret\r",
													"let clientId = responseBody.clientId;\r",
													"let clientSecret = responseBody.clientSecret;\r",
													"\r",
													"// Set the clientId and clientSecret as a collection variable\r",
													"pm.collectionVariables.set(\"clientId_oidc\", clientId);\r",
													"pm.collectionVariables.set(\"clientSecret_oidc\", clientSecret);\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Top-level properties\r",
													"    pm.expect(responseBody).to.have.property('clientId');\r",
													"    pm.expect(responseBody).to.have.property('clientSecret');\r",
													"    pm.expect(responseBody).to.have.property('state');\r",
													"    pm.expect(responseBody).to.have.property('grantTypes');\r",
													"    pm.expect(responseBody).to.have.property('callbackURLs');\r",
													"    pm.expect(responseBody).to.have.property('allowedOrigins');\r",
													"    pm.expect(responseBody).to.have.property('publicClient');\r",
													"    pm.expect(responseBody).to.have.property('pkce');\r",
													"    pm.expect(responseBody).to.have.property('accessToken');\r",
													"    pm.expect(responseBody).to.have.property('refreshToken');\r",
													"    pm.expect(responseBody).to.have.property('idToken');\r",
													"    pm.expect(responseBody).to.have.property('logout');\r",
													"    pm.expect(responseBody).to.have.property('validateRequestObjectSignature');\r",
													"    pm.expect(responseBody).to.have.property('scopeValidators');\r",
													"    pm.expect(responseBody).to.have.property('clientAuthentication');\r",
													"    pm.expect(responseBody).to.have.property('requestObject');\r",
													"    pm.expect(responseBody).to.have.property('pushAuthorizationRequest');\r",
													"    pm.expect(responseBody).to.have.property('subject');\r",
													"    pm.expect(responseBody).to.have.property('isFAPIApplication');\r",
													"\r",
													"    // Validate arrays\r",
													"    pm.expect(responseBody.grantTypes).to.be.an('array').that.is.not.empty;\r",
													"    pm.expect(responseBody.callbackURLs).to.be.an('array').that.is.not.empty;\r",
													"    pm.expect(responseBody.allowedOrigins).to.be.an('array').that.is.not.empty;\r",
													"    pm.expect(responseBody.idToken.audience).to.be.an('array');\r",
													"    pm.expect(responseBody.scopeValidators).to.be.an('array');\r",
													"\r",
													"    // Validate 'pkce'\r",
													"    const pkce = responseBody.pkce;\r",
													"    pm.expect(pkce).to.have.property('mandatory');\r",
													"    pm.expect(pkce).to.have.property('supportPlainTransformAlgorithm');\r",
													"\r",
													"    // Validate 'accessToken'\r",
													"    const accessToken = responseBody.accessToken;\r",
													"    pm.expect(accessToken).to.have.property('type');\r",
													"    pm.expect(accessToken).to.have.property('userAccessTokenExpiryInSeconds');\r",
													"    pm.expect(accessToken).to.have.property('applicationAccessTokenExpiryInSeconds');\r",
													"    pm.expect(accessToken).to.have.property('revokeTokensWhenIDPSessionTerminated');\r",
													"    pm.expect(accessToken).to.have.property('validateTokenBinding');\r",
													"\r",
													"    // Validate 'refreshToken'\r",
													"    const refreshToken = responseBody.refreshToken;\r",
													"    pm.expect(refreshToken).to.have.property('expiryInSeconds');\r",
													"    pm.expect(refreshToken).to.have.property('renewRefreshToken');\r",
													"\r",
													"    // Validate 'idToken'\r",
													"    const idToken = responseBody.idToken;\r",
													"    pm.expect(idToken).to.have.property('expiryInSeconds');\r",
													"    pm.expect(idToken).to.have.property('audience');\r",
													"    pm.expect(idToken).to.have.property('encryption');\r",
													"\r",
													"    // Validate 'encryption' inside 'idToken'\r",
													"    const idTokenEncryption = idToken.encryption;\r",
													"    pm.expect(idTokenEncryption).to.have.property('enabled');\r",
													"    pm.expect(idTokenEncryption).to.have.property('algorithm');\r",
													"    pm.expect(idTokenEncryption).to.have.property('method');\r",
													"\r",
													"    // Validate 'requestObject'\r",
													"    const requestObject = responseBody.requestObject;\r",
													"    pm.expect(requestObject).to.have.property('encryption');\r",
													"    const requestObjectEncryption = requestObject.encryption;\r",
													"    pm.expect(requestObjectEncryption).to.have.property('algorithm');\r",
													"    pm.expect(requestObjectEncryption).to.have.property('method');\r",
													"\r",
													"    // Validate 'pushAuthorizationRequest'\r",
													"    const pushAuthorizationRequest = responseBody.pushAuthorizationRequest;\r",
													"    pm.expect(pushAuthorizationRequest).to.have.property('requirePushAuthorizationRequest');\r",
													"\r",
													"    // Validate 'subject'\r",
													"    const subject = responseBody.subject;\r",
													"    pm.expect(subject).to.have.property('subjectType');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/inbound-protocols/oidc",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"inbound-protocols",
												"oidc"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OIDC authentication protocol parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clientId\": \"{{clientId_oidc}}\",\n    \"clientSecret\": \"{{clientSecret_oidc}}\",\n    \"state\": \"ACTIVE\",\n    \"grantTypes\": [\n        \"authorization_code\",\n        \"client_credentials\"\n    ],\n    \"callbackURLs\": [\n        \"https://myapp.io/login\"\n    ],\n    \"allowedOrigins\": [\n        \"https://myapp.io\"\n    ],\n    \"publicClient\": false,\n    \"pkce\": {\n        \"mandatory\": false,\n        \"supportPlainTransformAlgorithm\": false\n    },\n    \"accessToken\": {\n        \"type\": \"Default\",\n        \"userAccessTokenExpiryInSeconds\": 3600,\n        \"applicationAccessTokenExpiryInSeconds\": 3600,\n        \"revokeTokensWhenIDPSessionTerminated\": false,\n        \"validateTokenBinding\": false\n    },\n    \"refreshToken\": {\n        \"expiryInSeconds\": 86400,\n        \"renewRefreshToken\": false\n    },\n    \"idToken\": {\n        \"expiryInSeconds\": 3600,\n        \"audience\": [],\n        \"encryption\": {\n            \"enabled\": false,\n            \"algorithm\": \"\",\n            \"method\": \"\"\n        }\n    },\n    \"logout\": {},\n    \"validateRequestObjectSignature\": false,\n    \"scopeValidators\": [],\n    \"clientAuthentication\": {},\n    \"requestObject\": {\n        \"encryption\": {\n            \"algorithm\": \"\",\n            \"method\": \"\"\n        }\n    },\n    \"pushAuthorizationRequest\": {\n        \"requirePushAuthorizationRequest\": false\n    },\n    \"subject\": {\n        \"subjectType\": \"public\"\n    },\n    \"isFAPIApplication\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/inbound-protocols/oidc",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"inbound-protocols",
												"oidc"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OIDC authentication protocol parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.execution.skipRequest();"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationId_OIDC}}/inbound-protocols/oidc",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationId_OIDC}}",
												"inbound-protocols",
												"oidc"
											]
										}
									},
									"response": []
								},
								{
									"name": "Revoke the OAuth2/OIDC client of application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/inbound-protocols/oidc/revoke",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"inbound-protocols",
												"oidc",
												"revoke"
											]
										}
									},
									"response": []
								},
								{
									"name": "Regenerate the OAuth2/OIDC client secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Top-level properties\r",
													"    pm.expect(responseBody).to.have.property('clientId');\r",
													"    pm.expect(responseBody).to.have.property('clientSecret');\r",
													"    pm.expect(responseBody).to.have.property('state');\r",
													"    pm.expect(responseBody).to.have.property('grantTypes');\r",
													"    pm.expect(responseBody).to.have.property('callbackURLs');\r",
													"    pm.expect(responseBody).to.have.property('allowedOrigins');\r",
													"    pm.expect(responseBody).to.have.property('publicClient');\r",
													"    pm.expect(responseBody).to.have.property('pkce');\r",
													"    pm.expect(responseBody).to.have.property('accessToken');\r",
													"    pm.expect(responseBody).to.have.property('refreshToken');\r",
													"    pm.expect(responseBody).to.have.property('idToken');\r",
													"    pm.expect(responseBody).to.have.property('logout');\r",
													"    pm.expect(responseBody).to.have.property('validateRequestObjectSignature');\r",
													"    pm.expect(responseBody).to.have.property('scopeValidators');\r",
													"    pm.expect(responseBody).to.have.property('clientAuthentication');\r",
													"    pm.expect(responseBody).to.have.property('requestObject');\r",
													"    pm.expect(responseBody).to.have.property('pushAuthorizationRequest');\r",
													"    pm.expect(responseBody).to.have.property('subject');\r",
													"    pm.expect(responseBody).to.have.property('isFAPIApplication');\r",
													"\r",
													"    // Validate arrays\r",
													"    pm.expect(responseBody.grantTypes).to.be.an('array').that.includes('authorization_code');\r",
													"    pm.expect(responseBody.grantTypes).to.include('client_credentials');\r",
													"    pm.expect(responseBody.callbackURLs).to.be.an('array').that.includes('https://myapp.io/login');\r",
													"    pm.expect(responseBody.allowedOrigins).to.be.an('array');\r",
													"\r",
													"    // Validate 'pkce'\r",
													"    const pkce = responseBody.pkce;\r",
													"    pm.expect(pkce).to.have.property('mandatory', false);\r",
													"    pm.expect(pkce).to.have.property('supportPlainTransformAlgorithm', false);\r",
													"\r",
													"    // Validate 'accessToken'\r",
													"    const accessToken = responseBody.accessToken;\r",
													"    pm.expect(accessToken).to.have.property('type', 'Default');\r",
													"    pm.expect(accessToken).to.have.property('userAccessTokenExpiryInSeconds', 3600);\r",
													"    pm.expect(accessToken).to.have.property('applicationAccessTokenExpiryInSeconds', 3600);\r",
													"    pm.expect(accessToken).to.have.property('revokeTokensWhenIDPSessionTerminated', false);\r",
													"    pm.expect(accessToken).to.have.property('validateTokenBinding', false);\r",
													"\r",
													"    // Validate 'refreshToken'\r",
													"    const refreshToken = responseBody.refreshToken;\r",
													"    pm.expect(refreshToken).to.have.property('expiryInSeconds', 86400);\r",
													"    pm.expect(refreshToken).to.have.property('renewRefreshToken', false);\r",
													"\r",
													"    // Validate 'idToken'\r",
													"    const idToken = responseBody.idToken;\r",
													"    pm.expect(idToken).to.have.property('expiryInSeconds', 3600);\r",
													"    pm.expect(idToken).to.have.property('audience').that.is.an('array');\r",
													"    pm.expect(idToken).to.have.property('encryption');\r",
													"\r",
													"    // Validate 'encryption' inside 'idToken'\r",
													"    const idTokenEncryption = idToken.encryption;\r",
													"    pm.expect(idTokenEncryption).to.have.property('enabled', false);\r",
													"    pm.expect(idTokenEncryption).to.have.property('algorithm', '');\r",
													"    pm.expect(idTokenEncryption).to.have.property('method', '');\r",
													"\r",
													"    // Validate 'requestObject'\r",
													"    const requestObject = responseBody.requestObject;\r",
													"    pm.expect(requestObject).to.have.property('encryption');\r",
													"    const requestObjectEncryption = requestObject.encryption;\r",
													"    pm.expect(requestObjectEncryption).to.have.property('algorithm', '');\r",
													"    pm.expect(requestObjectEncryption).to.have.property('method', '');\r",
													"\r",
													"    // Validate 'pushAuthorizationRequest'\r",
													"    const pushAuthorizationRequest = responseBody.pushAuthorizationRequest;\r",
													"    pm.expect(pushAuthorizationRequest).to.have.property('requirePushAuthorizationRequest', false);\r",
													"\r",
													"    // Validate 'subject'\r",
													"    const subject = responseBody.subject;\r",
													"    pm.expect(subject).to.have.property('subjectType', 'public');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/inbound-protocols/oidc/regenerate-secret",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"inbound-protocols",
												"oidc",
												"regenerate-secret"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Inbound Protocols - Passive STS",
							"item": [
								{
									"name": "Add Passive STS Application",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Application_Passive_STS\",\n    \"advancedConfigurations\": {\n        \"skipLogoutConsent\": true,\n        \"skipLoginConsent\": true\n    },\n    \"inboundProtocolConfiguration\": {\n        \"passiveSts\": {\n            \"realm\": \"PassiveSTSSampleApp\",\n            \"replyTo\": \"http://localhost:8080/PassiveSTSSampleApp/index.jsp\"\n        }\n    },\n    \"templateId\": \"custom-application-passive-sts\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve Passive STS Application ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();\r",
													"\r",
													"// Check if the applications array exists\r",
													"if (response.applications && Array.isArray(response.applications)) {\r",
													"    // Search for the application with name \"Application_Passive_STS\"\r",
													"    let application = response.applications.find(t => t.name === \"Application_Passive_STS\");\r",
													"    \r",
													"    // If the application is found, set the ID as a collection variable\r",
													"    if (application) {\r",
													"        pm.collectionVariables.set(\"application_sts_id\", application.id);\r",
													"        console.log(\"Found application ID:\", application.id);  // Log the ID for verification\r",
													"    } else {\r",
													"        console.log(\"application with name 'Application_Passive_STS' not found\");\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response does not contain a valid 'applications' array\");\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve Passive STS authentication protocol parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Response body validation\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    pm.expect(responseBody).to.have.property('realm');\r",
													"    pm.expect(responseBody).to.have.property('replyTo');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{application_sts_id}}/inbound-protocols/passive-sts",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{application_sts_id}}",
												"inbound-protocols",
												"passive-sts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Passive STS authentication protocol parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"realm\": \"PassiveSTSSampleApp\",\n\"replyTo\": \"http://localhost:8080/PassiveSTSSampleApp/index.jsp\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{application_sts_id}}/inbound-protocols/passive-sts",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{application_sts_id}}",
												"inbound-protocols",
												"passive-sts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Passive STS authentication protocol parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.execution.skipRequest();\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{application_sts_id}}/inbound-protocols/passive-sts",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{application_sts_id}}",
												"inbound-protocols",
												"passive-sts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Application Metadata",
							"item": [
								{
									"name": "Retrieve the list of inbound authentication protocols available",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate that the response is an array\r",
													"    pm.expect(responseBody).to.be.an('array').that.is.not.empty;\r",
													"\r",
													"    // Validate each object in the array\r",
													"    responseBody.forEach((item) => {\r",
													"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
													"        pm.expect(item).to.have.property('displayName').that.is.a('string');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/meta/inbound-protocols?customOnly=false",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"meta",
												"inbound-protocols"
											],
											"query": [
												{
													"key": "customOnly",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve all the metadata related to the auth protocol SAML",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate that the response body is not empty\r",
													"    pm.expect(responseBody).to.not.be.empty;\r",
													"\r",
													"    // Validate that the \"defaultNameIdFormat\" is present and has the expected value\r",
													"    pm.expect(responseBody).to.have.property(\"defaultNameIdFormat\");\r",
													"\r",
													"    // Validate that \"certificateAlias\" is present and has valid options\r",
													"    pm.expect(responseBody).to.have.property(\"certificateAlias\");\r",
													"    pm.expect(responseBody.certificateAlias).to.have.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"    pm.expect(responseBody.certificateAlias.options).to.include(\"wso2carbon\"); // Default value check\r",
													"\r",
													"    // Validate that \"responseSigningAlgorithm\" is present and has valid options\r",
													"    pm.expect(responseBody).to.have.property(\"responseSigningAlgorithm\");\r",
													"    pm.expect(responseBody.responseSigningAlgorithm).to.have.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate that \"responseDigestAlgorithm\" is present and has valid options\r",
													"    pm.expect(responseBody).to.have.property(\"responseDigestAlgorithm\");\r",
													"    pm.expect(responseBody.responseDigestAlgorithm).to.have.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Additional check to ensure required fields are present\r",
													"    pm.expect(responseBody).to.have.property(\"defaultNameIdFormat\");\r",
													"    pm.expect(responseBody).to.have.property(\"certificateAlias\");\r",
													"    pm.expect(responseBody).to.have.property(\"responseSigningAlgorithm\");\r",
													"    pm.expect(responseBody).to.have.property(\"responseDigestAlgorithm\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/meta/inbound-protocols/saml",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"meta",
												"inbound-protocols",
												"saml"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve all the metadata related to the authentication protocol OAuth / OIDC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate 'allowedGrantTypes' and its 'options' array\r",
													"    pm.expect(responseBody).to.have.property(\"allowedGrantTypes\").that.has.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate 'defaultUserAccessTokenExpiryTime'\r",
													"    pm.expect(responseBody).to.have.property(\"defaultUserAccessTokenExpiryTime\");\r",
													"\r",
													"    // Validate 'idTokenEncryptionAlgorithm' and its 'options'\r",
													"    pm.expect(responseBody).to.have.property(\"idTokenEncryptionAlgorithm\").that.has.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate 'idTokenEncryptionMethod' and its 'options'\r",
													"    pm.expect(responseBody).to.have.property(\"idTokenEncryptionMethod\").that.has.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate 'accessTokenType' and its 'options'\r",
													"    pm.expect(responseBody).to.have.property(\"accessTokenType\").that.has.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate 'tokenEndpointAuthMethod' and its 'options'\r",
													"    pm.expect(responseBody).to.have.property(\"tokenEndpointAuthMethod\").that.has.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate 'subjectType' and its 'options'\r",
													"    pm.expect(responseBody).to.have.property(\"subjectType\").that.has.property(\"options\").that.is.an(\"array\").that.is.not.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/meta/inbound-protocols/oidc",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"meta",
												"inbound-protocols",
												"oidc"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve all the metadata related to the auth protocol WS Trust",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.execution.skipRequest();"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/meta/inbound-protocols/ws-trust",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"meta",
												"inbound-protocols",
												"ws-trust"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve all the metadata related to the custom auth protocol identified by the inboundProtocolId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.execution.skipRequest();"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/meta/inbound-protocols/{inbound-protocol-id}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"meta",
												"inbound-protocols",
												"{inbound-protocol-id}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve adaptive authentication sample templates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body validation\", function () {\r",
													"     pm.expect(pm.response.json()).to.be.an('object');\r",
													"     pm.expect(pm.response.json().templatesJSON).to.exist;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/meta/adaptive-auth-templates",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"meta",
												"adaptive-auth-templates"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Application Templates",
							"item": [
								{
									"name": "Add application template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"OIDC Protocol Template\",\n\"description\": \"Template to be used for Single Page Applications\",\n\"image\": \"https://example.com/logo/my-logo.png\",\n\"authenticationProtocol\": \"oidc\",\n\"types\": [\n  \"react\",\n  \"angular\"\n],\n\"category\": \"DEFAULT\",\n\"templateGroup\": \"web-application\",\n\"displayOrder\": 2,\n\"application\": {\n  \"name\": \"pickup\",\n  \"description\": \"This is the configuration for Pickup application.\",\n  \"imageUrl\": \"https://example.com/logo/my-logo.png\",\n  \"accessUrl\": \"https://example.com/login\",\n  \"templateId\": \"980b8tester24c64a8a09a0d80abf8c337bd2555\",\n  \"isManagementApp\": false,\n  \"claimConfiguration\": {\n    \"dialect\": \"LOCAL\",\n    \"claimMappings\": [\n      {\n        \"applicationClaim\": \"firstname\",\n        \"localClaim\": {\n          \"uri\": \"http://wso2.org/claims/username\"\n        }\n      }\n    ],\n    \"requestedClaims\": [\n      {\n        \"claim\": {\n          \"uri\": \"http://wso2.org/claims/username\"\n        },\n        \"mandatory\": false\n      }\n    ],\n    \"subject\": {\n      \"claim\": {\n        \"uri\": \"http://wso2.org/claims/username\"\n      },\n      \"includeUserDomain\": false,\n      \"includeTenantDomain\": false,\n      \"useMappedLocalSubject\": false\n    },\n    \"role\": {\n      \"mappings\": [\n        {\n          \"localRole\": \"admin\",\n          \"applicationRole\": \"Administrator\"\n        }\n      ],\n      \"includeUserDomain\": true,\n      \"claim\": {\n        \"uri\": \"http://wso2.org/claims/username\"\n      }\n    }\n  },\n  \"inboundProtocolConfiguration\": {\n    \"saml\": {\n      \"metadataFile\": \"Base64 encoded metadata file content\",\n      \"metadataURL\": \"https://example.com/samlsso/meta\",\n      \"manualConfiguration\": {\n        \"issuer\": \"string\",\n        \"serviceProviderQualifier\": \"string\",\n        \"assertionConsumerUrls\": [\n          \"string\"\n        ],\n        \"defaultAssertionConsumerUrl\": \"string\",\n        \"idpEntityIdAlias\": \"string\",\n        \"singleSignOnProfile\": {\n          \"bindings\": [\n            \"HTTP_POST\"\n          ],\n          \"enableSignatureValidationForArtifactBinding\": false,\n          \"enableIdpInitiatedSingleSignOn\": false,\n          \"assertion\": {\n            \"nameIdFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\",\n            \"audiences\": [\n              \"https://app.example.com/saml\"\n            ],\n            \"recipients\": [\n              \"https://app.example.com/saml\"\n            ],\n            \"digestAlgorithm\": \"http://www.w3.org/2000/09/xmldsig#sha1\",\n            \"encryption\": {\n              \"enabled\": false,\n              \"assertionEncryptionAlgorithm\": \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\",\n              \"keyEncryptionAlgorithm\": \"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\"\n            }\n          }\n        },\n        \"attributeProfile\": {\n          \"enabled\": false,\n          \"alwaysIncludeAttributesInResponse\": false\n        },\n        \"singleLogoutProfile\": {\n          \"enabled\": true,\n          \"logoutRequestUrl\": \"string\",\n          \"logoutResponseUrl\": \"string\",\n          \"logoutMethod\": \"BACKCHANNEL\",\n          \"idpInitiatedSingleLogout\": {\n            \"enabled\": false,\n            \"returnToUrls\": [\n              \"string\"\n            ]\n          }\n        },\n        \"requestValidation\": {\n          \"enableSignatureValidation\": true,\n          \"signatureValidationCertAlias\": \"string\"\n        },\n        \"responseSigning\": {\n          \"enabled\": true,\n          \"signingAlgorithm\": \"string\"\n        },\n        \"enableAssertionQueryProfile\": false\n      }\n    },\n    \"oidc\": {\n      \"clientId\": \"string\",\n      \"clientSecret\": \"string\",\n      \"grantTypes\": [\n        \"authorization_code\",\n        \"password\"\n      ],\n      \"callbackURLs\": [\n        \"regexp=(https://app.example.com/callback1|https://app.example.com/callback2)\"\n      ],\n      \"allowedOrigins\": [\n        \"https://app.example.com\"\n      ],\n      \"publicClient\": false,\n      \"pkce\": {\n        \"mandatory\": false,\n        \"supportPlainTransformAlgorithm\": true\n      },\n      \"accessToken\": {\n        \"type\": \"JWT\",\n        \"userAccessTokenExpiryInSeconds\": 3600,\n        \"applicationAccessTokenExpiryInSeconds\": 3600,\n        \"bindingType\": \"cookie\",\n        \"revokeTokensWhenIDPSessionTerminated\": true,\n        \"validateTokenBinding\": true\n      },\n      \"refreshToken\": {\n        \"expiryInSeconds\": 86400,\n        \"renewRefreshToken\": true\n      },\n      \"idToken\": {\n        \"expiryInSeconds\": 3600,\n        \"audience\": [\n          \"http://idp.xyz.com\",\n          \"http://idp.abc.com\"\n        ],\n        \"encryption\": {\n          \"enabled\": false,\n          \"algorithm\": \"RSA-OAEP\",\n          \"method\": \"A128CBC+HS256\"\n        }\n      },\n      \"logout\": {\n        \"backChannelLogoutUrl\": \"https://app.example.com/backchannel/callback\",\n        \"frontChannelLogoutUrl\": \"https://app.example.com/frontchannel/callback\"\n      },\n      \"validateRequestObjectSignature\": false,\n      \"scopeValidators\": [\n        \"Role based scope validator\",\n        \"XACML Scope Validator\"\n      ]\n    },\n    \"passiveSts\": {\n      \"realm\": \"string\",\n      \"replyTo\": \"string\"\n    },\n    \"wsTrust\": {\n      \"audience\": \"https://wstrust.endpoint.com\",\n      \"certificateAlias\": \"wso2carbon\"\n    },\n    \"custom\": [\n      {\n        \"name\": \"cas\",\n        \"configName\": \"cas\",\n        \"properties\": [\n          {\n            \"key\": \"app-identifier\",\n            \"value\": \"http://app.wso2.com/employeeApp\",\n            \"friendlyName\": \"Application Identifier\"\n          }\n        ]\n      }\n    ]\n  },\n  \"authenticationSequence\": {\n    \"type\": \"DEFAULT\",\n    \"steps\": [\n      {\n        \"id\": 1,\n        \"options\": [\n          {\n            \"idp\": \"LOCAL\",\n            \"authenticator\": \"basic\"\n          }\n        ]\n      }\n    ],\n    \"requestPathAuthenticators\": [\n      \"string\"\n    ],\n    \"script\": \"string\",\n    \"subjectStepId\": 1,\n    \"attributeStepId\": 1\n  },\n  \"advancedConfigurations\": {\n    \"saas\": false,\n    \"discoverableByEndUsers\": false,\n    \"certificate\": {\n      \"type\": \"string\",\n      \"value\": \"string\"\n    },\n    \"skipLoginConsent\": false,\n    \"skipLogoutConsent\": false,\n    \"useExternalConsentPage\": false,\n    \"returnAuthenticatedIdpList\": false,\n    \"enableAuthorization\": true,\n    \"additionalSpProperties\": [\n      {\n        \"name\": \"isInternalApp\",\n        \"value\": \"true\",\n        \"displayName\": \"Internal Application\"\n      }\n    ]\n  },\n  \"provisioningConfigurations\": {\n    \"inboundProvisioning\": {\n      \"proxyMode\": false,\n      \"provisioningUserstoreDomain\": \"PRIMARY\"\n    },\n    \"outboundProvisioningIdps\": [\n      {\n        \"idp\": \"Google\",\n        \"connector\": \"googleapps\",\n        \"blocking\": false,\n        \"rules\": false,\n        \"jit\": false\n      }\n    ]\n  }\n}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/templates",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"templates"
											]
										}
									},
									"response": []
								},
								{
									"name": "List application templates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the JSON response body\r",
													"let response = pm.response.json();\r",
													"\r",
													"// Log the response to verify structure\r",
													"console.log(response);\r",
													"\r",
													"// Check if the templates array exists\r",
													"if (response.templates && Array.isArray(response.templates)) {\r",
													"    // Search for the template with name \"OIDC Protocol Template\"\r",
													"    let template = response.templates.find(t => t.name === \"OIDC Protocol Template\");\r",
													"    \r",
													"    // If the template is found, set the ID as a collection variable\r",
													"    if (template) {\r",
													"        pm.collectionVariables.set(\"oidcTemplateId\", template.id);\r",
													"        console.log(\"Found template ID:\", template.id);  // Log the ID for verification\r",
													"    } else {\r",
													"        console.log(\"Template with name 'OIDC Protocol Template' not found\");\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Response does not contain a valid 'templates' array\");\r",
													"}\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate 'templates' array\r",
													"    pm.expect(responseBody).to.have.property(\"templates\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate each template structure\r",
													"    responseBody.templates.forEach(function(template) {\r",
													"        pm.expect(template).to.have.property(\"id\");\r",
													"        pm.expect(template).to.have.property(\"name\");\r",
													"        pm.expect(template).to.have.property(\"description\");\r",
													"        pm.expect(template).to.have.property(\"image\");\r",
													"        pm.expect(template).to.have.property(\"authenticationProtocol\");\r",
													"        pm.expect(template).to.have.property(\"types\").that.is.an(\"array\").that.is.not.empty;\r",
													"        pm.expect(template).to.have.property(\"category\");\r",
													"        pm.expect(template).to.have.property(\"displayOrder\");\r",
													"        pm.expect(template).to.have.property(\"templateGroup\");\r",
													"        pm.expect(template).to.have.property(\"self\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/templates",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"templates"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve application template by ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    pm.expect(responseBody).to.have.property(\"description\");\r",
													"    pm.expect(responseBody).to.have.property(\"image\");\r",
													"    pm.expect(responseBody).to.have.property(\"authenticationProtocol\");\r",
													"    pm.expect(responseBody).to.have.property(\"types\").that.is.an(\"array\").that.is.not.empty;\r",
													"    pm.expect(responseBody).to.have.property(\"category\");\r",
													"    pm.expect(responseBody).to.have.property(\"displayOrder\");\r",
													"    pm.expect(responseBody).to.have.property(\"templateGroup\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/templates/{{oidcTemplateId}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"templates",
												"{{oidcTemplateId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update the application template by the template ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"OIDC Protocol Template\",\n\"description\": \"Template to be used for Single Page Applications\",\n\"image\": \"https://example.com/logo/my-logo.png\",\n\"authenticationProtocol\": \"oidc\",\n\"types\": [\n  \"react\",\n  \"angular\"\n],\n\"category\": \"DEFAULT\",\n\"templateGroup\": \"web-application\",\n\"displayOrder\": 2,\n\"application\": {\n  \"name\": \"pickup\",\n  \"description\": \"This is the configuration for Pickup application.\",\n  \"imageUrl\": \"https://example.com/logo/my-logo.png\",\n  \"accessUrl\": \"https://example.com/login\",\n  \"templateId\": \"980b8tester24c64a8a09a0d80abf8c337bd2555\",\n  \"isManagementApp\": false,\n  \"claimConfiguration\": {\n    \"dialect\": \"LOCAL\",\n    \"claimMappings\": [\n      {\n        \"applicationClaim\": \"firstname\",\n        \"localClaim\": {\n          \"uri\": \"http://wso2.org/claims/username\"\n        }\n      }\n    ],\n    \"requestedClaims\": [\n      {\n        \"claim\": {\n          \"uri\": \"http://wso2.org/claims/username\"\n        },\n        \"mandatory\": false\n      }\n    ],\n    \"subject\": {\n      \"claim\": {\n        \"uri\": \"http://wso2.org/claims/username\"\n      },\n      \"includeUserDomain\": false,\n      \"includeTenantDomain\": false,\n      \"useMappedLocalSubject\": false\n    },\n    \"role\": {\n      \"mappings\": [\n        {\n          \"localRole\": \"admin\",\n          \"applicationRole\": \"Administrator\"\n        }\n      ],\n      \"includeUserDomain\": true,\n      \"claim\": {\n        \"uri\": \"http://wso2.org/claims/username\"\n      }\n    }\n  },\n  \"inboundProtocolConfiguration\": {\n    \"saml\": {\n      \"metadataFile\": \"Base64 encoded metadata file content\",\n      \"metadataURL\": \"https://example.com/samlsso/meta\",\n      \"manualConfiguration\": {\n        \"issuer\": \"string\",\n        \"serviceProviderQualifier\": \"string\",\n        \"assertionConsumerUrls\": [\n          \"string\"\n        ],\n        \"defaultAssertionConsumerUrl\": \"string\",\n        \"idpEntityIdAlias\": \"string\",\n        \"singleSignOnProfile\": {\n          \"bindings\": [\n            \"HTTP_POST\"\n          ],\n          \"enableSignatureValidationForArtifactBinding\": false,\n          \"enableIdpInitiatedSingleSignOn\": false,\n          \"assertion\": {\n            \"nameIdFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\",\n            \"audiences\": [\n              \"https://app.example.com/saml\"\n            ],\n            \"recipients\": [\n              \"https://app.example.com/saml\"\n            ],\n            \"digestAlgorithm\": \"http://www.w3.org/2000/09/xmldsig#sha1\",\n            \"encryption\": {\n              \"enabled\": false,\n              \"assertionEncryptionAlgorithm\": \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\",\n              \"keyEncryptionAlgorithm\": \"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\"\n            }\n          }\n        },\n        \"attributeProfile\": {\n          \"enabled\": false,\n          \"alwaysIncludeAttributesInResponse\": false\n        },\n        \"singleLogoutProfile\": {\n          \"enabled\": true,\n          \"logoutRequestUrl\": \"string\",\n          \"logoutResponseUrl\": \"string\",\n          \"logoutMethod\": \"BACKCHANNEL\",\n          \"idpInitiatedSingleLogout\": {\n            \"enabled\": false,\n            \"returnToUrls\": [\n              \"string\"\n            ]\n          }\n        },\n        \"requestValidation\": {\n          \"enableSignatureValidation\": true,\n          \"signatureValidationCertAlias\": \"string\"\n        },\n        \"responseSigning\": {\n          \"enabled\": true,\n          \"signingAlgorithm\": \"string\"\n        },\n        \"enableAssertionQueryProfile\": false\n      }\n    },\n    \"oidc\": {\n      \"clientId\": \"string\",\n      \"clientSecret\": \"string\",\n      \"grantTypes\": [\n        \"authorization_code\",\n        \"password\"\n      ],\n      \"callbackURLs\": [\n        \"regexp=(https://app.example.com/callback1|https://app.example.com/callback2)\"\n      ],\n      \"allowedOrigins\": [\n        \"https://app.example.com\"\n      ],\n      \"publicClient\": false,\n      \"pkce\": {\n        \"mandatory\": false,\n        \"supportPlainTransformAlgorithm\": true\n      },\n      \"accessToken\": {\n        \"type\": \"JWT\",\n        \"userAccessTokenExpiryInSeconds\": 3600,\n        \"applicationAccessTokenExpiryInSeconds\": 3600,\n        \"bindingType\": \"cookie\",\n        \"revokeTokensWhenIDPSessionTerminated\": true,\n        \"validateTokenBinding\": true\n      },\n      \"refreshToken\": {\n        \"expiryInSeconds\": 86400,\n        \"renewRefreshToken\": true\n      },\n      \"idToken\": {\n        \"expiryInSeconds\": 3600,\n        \"audience\": [\n          \"http://idp.xyz.com\",\n          \"http://idp.abc.com\"\n        ],\n        \"encryption\": {\n          \"enabled\": false,\n          \"algorithm\": \"RSA-OAEP\",\n          \"method\": \"A128CBC+HS256\"\n        }\n      },\n      \"logout\": {\n        \"backChannelLogoutUrl\": \"https://app.example.com/backchannel/callback\",\n        \"frontChannelLogoutUrl\": \"https://app.example.com/frontchannel/callback\"\n      },\n      \"validateRequestObjectSignature\": false,\n      \"scopeValidators\": [\n        \"Role based scope validator\",\n        \"XACML Scope Validator\"\n      ]\n    },\n    \"passiveSts\": {\n      \"realm\": \"string\",\n      \"replyTo\": \"string\"\n    },\n    \"wsTrust\": {\n      \"audience\": \"https://wstrust.endpoint.com\",\n      \"certificateAlias\": \"wso2carbon\"\n    },\n    \"custom\": [\n      {\n        \"name\": \"cas\",\n        \"configName\": \"cas\",\n        \"properties\": [\n          {\n            \"key\": \"app-identifier\",\n            \"value\": \"http://app.wso2.com/employeeApp\",\n            \"friendlyName\": \"Application Identifier\"\n          }\n        ]\n      }\n    ]\n  },\n  \"authenticationSequence\": {\n    \"type\": \"DEFAULT\",\n    \"steps\": [\n      {\n        \"id\": 1,\n        \"options\": [\n          {\n            \"idp\": \"LOCAL\",\n            \"authenticator\": \"basic\"\n          }\n        ]\n      }\n    ],\n    \"requestPathAuthenticators\": [\n      \"string\"\n    ],\n    \"script\": \"string\",\n    \"subjectStepId\": 1,\n    \"attributeStepId\": 1\n  },\n  \"advancedConfigurations\": {\n    \"saas\": false,\n    \"discoverableByEndUsers\": false,\n    \"certificate\": {\n      \"type\": \"string\",\n      \"value\": \"string\"\n    },\n    \"skipLoginConsent\": false,\n    \"skipLogoutConsent\": false,\n    \"useExternalConsentPage\": false,\n    \"returnAuthenticatedIdpList\": false,\n    \"enableAuthorization\": true,\n    \"additionalSpProperties\": [\n      {\n        \"name\": \"isInternalApp\",\n        \"value\": \"true\",\n        \"displayName\": \"Internal Application\"\n      }\n    ]\n  },\n  \"provisioningConfigurations\": {\n    \"inboundProvisioning\": {\n      \"proxyMode\": false,\n      \"provisioningUserstoreDomain\": \"PRIMARY\"\n    },\n    \"outboundProvisioningIdps\": [\n      {\n        \"idp\": \"Google\",\n        \"connector\": \"googleapps\",\n        \"blocking\": false,\n        \"rules\": false,\n        \"jit\": false\n      }\n    ]\n  }\n}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/templates/{{oidcTemplateId}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"templates",
												"{{oidcTemplateId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete application template by template ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 204\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_application_mgt_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/templates/{{oidcTemplateId}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"templates",
												"{{oidcTemplateId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Application Sharing",
							"item": [
								{
									"name": "Share the application from the root organization to the given organization(s)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_shared_application_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"shareWithAllChildren\": false,\n  \"sharedOrganizations\": [\n    \"{{sub_organization_id}}\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/share",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"share"
											]
										}
									},
									"response": []
								},
								{
									"name": "List of organizations that the application is shared to",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate 'organizations' array\r",
													"    pm.expect(responseBody).to.have.property(\"organizations\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate each organizations structure\r",
													"    responseBody.organizations.forEach(function(organizations) {\r",
													"        pm.expect(organizations).to.have.property(\"id\");\r",
													"        pm.expect(organizations).to.have.property(\"name\");\r",
													"        pm.expect(organizations).to.have.property(\"ref\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_shared_application_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/share",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"share"
											]
										}
									},
									"response": []
								},
								{
									"name": "List of shared applications along with its organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate 'sharedApplications' array\r",
													"    pm.expect(responseBody).to.have.property(\"sharedApplications\").that.is.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Validate each sharedApplications structure\r",
													"    responseBody.sharedApplications.forEach(function(sharedApplications) {\r",
													"        pm.expect(sharedApplications).to.have.property(\"applicationId\");\r",
													"        pm.expect(sharedApplications).to.have.property(\"organizationId\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_shared_application_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/shared-apps",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"shared-apps"
											]
										}
									},
									"response": []
								},
								{
									"name": "Stop sharing an application to a organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_shared_application_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/share/{{sub_organization_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"share",
												"{{sub_organization_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Stop sharing an application with all organizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 204\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_shared_application_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}/shared-apps",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"applications",
												"{{applicationID}}",
												"shared-apps"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "OpenID Connect scope management API",
					"item": [
						{
							"name": "OIDC Scope Endpoint",
							"item": [
								{
									"name": "Retrieve the list of scopes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate that the response is an array\r",
													"    pm.expect(responseBody).to.be.an('array')\r",
													"\r",
													"    // Validate each object in the array\r",
													"    responseBody.forEach((item) => {\r",
													"        pm.expect(item).to.have.property('name');\r",
													"        pm.expect(item).to.have.property('displayName');\r",
													"        pm.expect(item).to.have.property('description');\r",
													"        pm.expect(item).to.have.property('claims');\r",
													"        \r",
													"        pm.expect(item.claims).to.be.an('array');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oidc_scope_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/oidc/scopes",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"oidc",
												"scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add a new OIDC scope",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"scope_name\" ,\"Scope1\")\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oidc_scope_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"{{scope_name}}\",\n\"displayName\": \"{{scope_name}}\",\n\"description\": \"Sample scope one\",\n\"claims\": [\n  \"birthdate\",\n  \"gender\"\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/oidc/scopes",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"oidc",
												"scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"        pm.expect(responseBody).to.have.property('name');\r",
													"        pm.expect(responseBody).to.have.property('displayName');\r",
													"        pm.expect(responseBody).to.have.property('description');\r",
													"        pm.expect(responseBody).to.have.property('claims');\r",
													"        \r",
													"        pm.expect(responseBody.claims).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oidc_scope_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/oidc/scopes/{{scope_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"oidc",
												"scopes",
												"{{scope_name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an OIDC scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oidc_scope_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"displayName\": \"scopeOne\",\n\"description\": \"Sample updated scope one\",\n\"claims\": [\n  \"birthdate\",\n  \"gender\",\n  \"age\"\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/oidc/scopes/{{scope_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"oidc",
												"scopes",
												"{{scope_name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete an OIDC scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 204\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oidc_scope_mgt_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/oidc/scopes/{{scope_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"oidc",
												"scopes",
												"{{scope_name}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "OAuth 2.0 scope management API",
					"item": [
						{
							"name": "Scope Management",
							"item": [
								{
									"name": "Return all available scopes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate that the response is an array\r",
													"    pm.expect(responseBody).to.be.an('array')\r",
													"\r",
													"    // Validate each object in the array\r",
													"    responseBody.forEach((item) => {\r",
													"        pm.expect(item).to.have.property('name');\r",
													"        pm.expect(item).to.have.property('displayName');\r",
													"        pm.expect(item).to.have.property('description');\r",
													"        pm.expect(item).to.have.property('bindings');\r",
													"        pm.expect(item).to.have.property('scopeBindings');\r",
													"\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oauth_scope_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/v1.0/scopes?startIndex=1&count=4&includeOIDCScopes=true",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"v1.0",
												"scopes"
											],
											"query": [
												{
													"key": "startIndex",
													"value": "1"
												},
												{
													"key": "count",
													"value": "4"
												},
												{
													"key": "includeOIDCScopes",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Register a scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"        pm.expect(responseBody).to.have.property('name');\r",
													"        pm.expect(responseBody).to.have.property('displayName');\r",
													"        pm.expect(responseBody).to.have.property('description');\r",
													"        pm.expect(responseBody).to.have.property('bindings');\r",
													"        pm.expect(responseBody).to.have.property('scopeBindings');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"scope_name\", \"NewScope\");\r",
													"pm.variables.set(\"display_name\", \"newscope\");\r",
													"pm.variables.set(\"description\", \"This is my new script\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oauth_scope_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"name\": \"{{scope_name}}\",\n\"displayName\": \"{{display_name}}\",\n\"description\": \"{{description}}\",\n\"bindings\": [\n  \"string\"\n],\n\"scopeBindings\": [\n  {\n    \"bindingType\": \"string\",\n    \"binding\": [\n      \"string\"\n    ]\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/v1.0/scopes",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"v1.0",
												"scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Return a scope by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"        pm.expect(responseBody).to.have.property('name');\r",
													"        pm.expect(responseBody).to.have.property('displayName');\r",
													"        pm.expect(responseBody).to.have.property('description');\r",
													"        pm.expect(responseBody).to.have.property('bindings');\r",
													"        pm.expect(responseBody).to.have.property('scopeBindings');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oauth_scope_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/v1.0/scopes/name/{{scope_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"v1.0",
												"scopes",
												"name",
												"{{scope_name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"        pm.expect(responseBody).to.have.property('name');\r",
													"        pm.expect(responseBody).to.have.property('displayName');\r",
													"        pm.expect(responseBody).to.have.property('description');\r",
													"        pm.expect(responseBody).to.have.property('bindings');\r",
													"        pm.expect(responseBody).to.have.property('scopeBindings');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oauth_scope_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"displayName\": \"NewScope\",\n\"description\": \"This is my updated scope\",\n\"bindings\": [\n  \"string\"\n],\n\"scopeBindings\": [\n  {\n    \"bindingType\": \"string\",\n    \"binding\": [\n      \"string\"\n    ]\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/v1.0/scopes/name/{{scope_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"v1.0",
												"scopes",
												"name",
												"{{scope_name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check scope existence using scope name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oauth_scope_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/v1.0/scopes/name/{{scope_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"v1.0",
												"scopes",
												"name",
												"{{scope_name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a scope",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_oauth_scope_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/v1.0/scopes/name/{{scope_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"v1.0",
												"scopes",
												"name",
												"{{scope_name}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "OIDC Dynamic Client Registration API",
					"item": [
						{
							"name": "OAuth2 DCR",
							"item": [
								{
									"name": "Get OAuth2 application information",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"application_name\", \"New Application\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_dcr_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate root-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"client_id\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"client_secret\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"client_secret_expires_at\").that.is.a(\"number\");\r",
													"\r",
													"    // Validate arrays\r",
													"    pm.expect(responseBody).to.have.property(\"redirect_uris\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.redirect_uris.forEach(uri => pm.expect(uri).to.be.a(\"string\"));\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"grant_types\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.grant_types.forEach(type => pm.expect(type).to.be.a(\"string\"));\r",
													"\r",
													"    // Validate other properties\r",
													"    pm.expect(responseBody).to.have.property(\"client_name\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_display_name\").that.satisfy(val => val === null || typeof val === \"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_owner\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_user_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_refresh_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_id_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_pkce_mandatory\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_pkce_support_plain\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_public_client\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"token_type_extension\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_token_type\").that.is.a(\"string\");\r",
													"\r",
													"    // Validate nullable properties\r",
													"    const nullableProps = [\r",
													"        \"jwks_uri\",\r",
													"        \"token_endpoint_auth_method\",\r",
													"        \"token_endpoint_auth_signing_alg\",\r",
													"        \"sector_identifier_uri\",\r",
													"        \"id_token_signed_response_alg\",\r",
													"        \"id_token_encrypted_response_alg\",\r",
													"        \"id_token_encrypted_response_enc\",\r",
													"        \"request_object_signing_alg\",\r",
													"        \"tls_client_auth_subject_dn\",\r",
													"        \"software_statement\"\r",
													"    ];\r",
													"    nullableProps.forEach(prop => pm.expect(responseBody).to.have.property(prop).that.satisfy(val => val === null || typeof val === \"string\"));\r",
													"\r",
													"    // Validate booleans\r",
													"    pm.expect(responseBody).to.have.property(\"require_pushed_authorization_requests\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"require_signed_request_object\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"tls_client_certificate_bound_access_tokens\").that.is.a(\"boolean\");\r",
													"\r",
													"    // Validate additional string fields\r",
													"    pm.expect(responseBody).to.have.property(\"subject_type\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"request_object_encryption_alg\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"request_object_encryption_enc\").that.is.a(\"string\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/dcr/v1.1/register?client_name={{application_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"dcr",
												"v1.1",
												"register"
											],
											"query": [
												{
													"key": "client_name",
													"value": "{{application_name}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Registers an OAuth2 application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseBody = pm.response.json();\r",
													"\r",
													"clientId = responseBody.client_id;\r",
													"clientSecret = responseBody.client_secret;\r",
													"\r",
													"pm.collectionVariables.set(\"clientId\", clientId);\r",
													"pm.collectionVariables.set(\"clientSecret\", clientSecret);\r",
													"\r",
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    \r",
													"    // Validate root-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"client_id\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"client_secret\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"client_secret_expires_at\").that.is.a(\"number\");\r",
													"\r",
													"    // Validate arrays\r",
													"    pm.expect(responseBody).to.have.property(\"redirect_uris\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.redirect_uris.forEach(uri => pm.expect(uri).to.be.a(\"string\"));\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"grant_types\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.grant_types.forEach(type => pm.expect(type).to.be.a(\"string\"));\r",
													"\r",
													"    // Validate other properties\r",
													"    pm.expect(responseBody).to.have.property(\"client_name\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_display_name\").that.satisfy(val => val === null || typeof val === \"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_owner\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_user_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_refresh_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_id_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_pkce_mandatory\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_pkce_support_plain\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_public_client\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"token_type_extension\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_token_type\").that.is.a(\"string\");\r",
													"\r",
													"    // Validate booleans\r",
													"    pm.expect(responseBody).to.have.property(\"require_pushed_authorization_requests\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"require_signed_request_object\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"tls_client_certificate_bound_access_tokens\").that.is.a(\"boolean\");\r",
													"\r",
													"    // Validate additional string fields\r",
													"    pm.expect(responseBody).to.have.property(\"subject_type\");\r",
													"    pm.expect(responseBody).to.have.property(\"request_object_encryption_alg\");\r",
													"    pm.expect(responseBody).to.have.property(\"request_object_encryption_enc\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_dcr_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"redirect_uris\": [\n  \"https://myapp.io/login\"\n],\n\"client_name\": \"MyClient\",\n\"grant_types\": [\n  \"client_credentials\"\n],\n\"application_type\": \"oidc\",\n\n\"contacts\": [\n  \n],\n\"post_logout_redirect_uris\": [\n  \"https://example.io/logout\"\n],\n\"request_uris\": [\n  \"https://myapp.io/login\"\n],\n\"response_types\": [\n  \"APPLICATION\"\n],\n\"backchannel_logout_session_required\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/dcr/v1.1/register",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"dcr",
												"v1.1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get OAuth2 application information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    \r",
													"    // Validate root-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"client_id\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"client_secret\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"client_secret_expires_at\").that.is.a(\"number\");\r",
													"\r",
													"    // Validate arrays\r",
													"    pm.expect(responseBody).to.have.property(\"redirect_uris\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.redirect_uris.forEach(uri => pm.expect(uri).to.be.a(\"string\"));\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"grant_types\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.grant_types.forEach(type => pm.expect(type).to.be.a(\"string\"));\r",
													"\r",
													"    // Validate other properties\r",
													"    pm.expect(responseBody).to.have.property(\"client_name\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_display_name\").that.satisfy(val => val === null || typeof val === \"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_owner\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_user_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_refresh_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_id_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_pkce_mandatory\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_pkce_support_plain\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_public_client\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"token_type_extension\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_token_type\").that.is.a(\"string\");\r",
													"\r",
													"    // Validate booleans\r",
													"    pm.expect(responseBody).to.have.property(\"require_pushed_authorization_requests\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"require_signed_request_object\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"tls_client_certificate_bound_access_tokens\").that.is.a(\"boolean\");\r",
													"\r",
													"    // Validate additional string fields\r",
													"    pm.expect(responseBody).to.have.property(\"subject_type\");\r",
													"    pm.expect(responseBody).to.have.property(\"request_object_encryption_alg\");\r",
													"    pm.expect(responseBody).to.have.property(\"request_object_encryption_enc\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_dcr_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/dcr/v1.1/register/{{clientId}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"dcr",
												"v1.1",
												"register",
												"{{clientId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Updates an OAuth2 application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response structure validation\", function () {\r",
													"    \r",
													"    // Validate root-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"client_id\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"client_secret\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"client_secret_expires_at\").that.is.a(\"number\");\r",
													"\r",
													"    // Validate arrays\r",
													"    pm.expect(responseBody).to.have.property(\"redirect_uris\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.redirect_uris.forEach(uri => pm.expect(uri).to.be.a(\"string\"));\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"grant_types\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.grant_types.forEach(type => pm.expect(type).to.be.a(\"string\"));\r",
													"\r",
													"    // Validate other properties\r",
													"    pm.expect(responseBody).to.have.property(\"client_name\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_display_name\").that.satisfy(val => val === null || typeof val === \"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_owner\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_application_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_user_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_refresh_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_id_token_lifetime\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_pkce_mandatory\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_pkce_support_plain\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_public_client\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"token_type_extension\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"ext_token_type\").that.is.a(\"string\");\r",
													"\r",
													"    // Validate booleans\r",
													"    pm.expect(responseBody).to.have.property(\"require_pushed_authorization_requests\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"require_signed_request_object\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"tls_client_certificate_bound_access_tokens\").that.is.a(\"boolean\");\r",
													"\r",
													"    // Validate additional string fields\r",
													"    pm.expect(responseBody).to.have.property(\"subject_type\");\r",
													"    pm.expect(responseBody).to.have.property(\"request_object_encryption_alg\");\r",
													"    pm.expect(responseBody).to.have.property(\"request_object_encryption_enc\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_dcr_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"redirect_uris\": [\n  \"https://client.oauth2/dcr/register\"\n],\n\"client_name\": \"MyClient\",\n\"client_id\": \"{{clientId}}\",\n\"client_secret\": \"{{clientSecret}}\",\n\"grant_types\": [\n  \"authorization_code\",\n  \"implicit\"\n],\n\"backchannel_logout_uri\": \"https://myblabla./logout\",\n\"backchannel_logout_session_required\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/dcr/v1.1/register/{{clientId}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"dcr",
												"v1.1",
												"register",
												"{{clientId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OAuth2 application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 204\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_dcr_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/oauth2/dcr/v1.1/register/{{clientId}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"identity",
												"oauth2",
												"dcr",
												"v1.1",
												"register",
												"{{clientId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Script Library management API",
					"item": [
						{
							"name": "Script Libraries",
							"item": [
								{
									"name": "Add a new script library",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"script_library_name\",\"networkUtils.js\")\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_functional_lib_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "{{script_library_name}}",
													"type": "text"
												},
												{
													"key": "description",
													"value": "Network utils functions",
													"type": "text"
												},
												{
													"key": "content",
													"type": "file",
													"src": "postman-cloud:///1efae2c3-71b3-4a20-9caa-104fe3deea1a"
												}
											]
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/script-libraries",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"script-libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "List script libraries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    responseBody = pm.response.json();\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
													"    pm.expect(responseBody).to.have.property(\"count\");\r",
													"    pm.expect(responseBody).to.have.property(\"scriptLibraries\");\r",
													"\r",
													"    pm.expect(responseBody.scriptLibraries).to.be.an(\"array\");\r",
													"\r",
													"    // Validate each object in the array\r",
													"    responseBody.scriptLibraries.forEach((item) => {\r",
													"        pm.expect(item).to.have.property('name');\r",
													"        pm.expect(item).to.have.property('description');\r",
													"        pm.expect(item).to.have.property('self');\r",
													"    });\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_functional_lib_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/script-libraries",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"script-libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get script library",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Validate response body\r",
													"pm.test(\"Validate response body\", function(){\r",
													"    responseBody = pm.response.json();\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    pm.expect(responseBody).to.have.property(\"description\");\r",
													"    pm.expect(responseBody).to.have.property(\"content-ref\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_functional_lib_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/script-libraries/{{script_library_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"script-libraries",
												"{{script_library_name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a script library",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_functional_lib_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "description",
													"value": "Util functions",
													"type": "text"
												},
												{
													"key": "content",
													"type": "file",
													"src": "postman-cloud:///1efae2c7-b15b-4930-bdfb-e91c1ba2402e"
												}
											]
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/script-libraries/networkUtils.js",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"script-libraries",
												"networkUtils.js"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the content of the script library",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response body\", function(){\r",
													"pm.expect(pm.response.text()).to.be.a(\"string\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_functional_lib_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/script-libraries/{{script_library_name}}/content",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"script-libraries",
												"{{script_library_name}}",
												"content"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a script library",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 204\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_functional_lib_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/script-libraries/{{script_library_name}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"script-libraries",
												"{{script_library_name}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Authentication Data API",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Authenticate user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"kim\",\n    \"password\": \"MyPa33w@rd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/auth/v1.1/authenticate",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"identity",
										"auth",
										"v1.1",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve an authentication context parameter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/auth/v1.1/{sessionKey_id}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"identity",
										"auth",
										"v1.1",
										"{sessionKey_id}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve sensitive parameters used at the authentication flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/auth/v.1/data/AuthRequestKey/7a6886ab-b02f-424f-9cd4-adf5e92f0798",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"identity",
										"auth",
										"v.1",
										"data",
										"AuthRequestKey",
										"7a6886ab-b02f-424f-9cd4-adf5e92f0798"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "**Instructions for the** **`/data`** **endpoint**  \nTo configure the Authentication Data API add the following configuration to the `deployment.toml` file found in the `IS_HOME/repository/conf` directory and restart the IS server.\n\n``` toml\n[authentication.endpoint.redirect_params]\nfilter_policy = \"include\"\nremove_on_consume_from_api = \"true\"\nparameters = [\"sessionDataKey\"]\n\n ```\n\nEndFragment"
		},
		{
			"name": "Authenticators API",
			"item": [
				{
					"name": "Authenticators",
					"item": [
						{
							"name": "List all authenticators in the server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the array length\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    responseBody.forEach(item => {\r",
											"        // Validate each item structure\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(item).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"self\").that.is.a(\"string\");\r",
											"\r",
											"        // Validate tags if present\r",
											"        if (item.hasOwnProperty(\"tags\")) {\r",
											"            pm.expect(item.tags).to.be.an(\"array\");\r",
											"            item.tags.forEach(tag => pm.expect(tag).to.be.a(\"string\"));\r",
											"        }\r",
											"\r",
											"        // Validate federated types for additional properties\r",
											"        if (item.type === \"FEDERATED\") {\r",
											"            pm.expect(item).to.have.property(\"image\").that.is.a(\"string\");\r",
											"            pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_authenticator_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all authenticator tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation with tags check\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the array length\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_authenticator_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/authenticators/meta/tags",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"authenticators",
										"meta",
										"tags"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Connected apps of local authenticators",
					"item": [
						{
							"name": "Get connected apps by authenticator ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the root properties\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"count\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"links\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"authenticator_Id\", \"SldUQmFzaWNBdXRoZW50aWNhdG9y\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_authenticator_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/authenticators/{{authenticator_Id}}/connected-apps",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"authenticators",
										"{{authenticator_Id}}",
										"connected-apps"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Branding Preferences API",
			"item": [
				{
					"name": "Branding Preference",
					"item": [
						{
							"name": "Add branding preferences for a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate preference properties\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"organizationDetails\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"images\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"urls\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"stylesheets\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"configs\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate organizationDetails properties\r",
											"    const orgDetails = preference.organizationDetails;\r",
											"    pm.expect(orgDetails).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"siteTitle\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"copyrightText\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"supportEmail\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate images properties\r",
											"    const images = preference.images;\r",
											"    pm.expect(images).to.have.property(\"logo\").that.is.an(\"object\");\r",
											"    pm.expect(images).to.have.property(\"favicon\").that.is.an(\"object\");\r",
											"\r",
											"    const logo = images.logo;\r",
											"    pm.expect(logo).to.have.property(\"imgURL\").that.is.a(\"string\");\r",
											"    pm.expect(logo).to.have.property(\"altText\").that.is.a(\"string\");\r",
											"\r",
											"    const favicon = images.favicon;\r",
											"    pm.expect(favicon).to.have.property(\"imgURL\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate URLs\r",
											"    const urls = preference.urls;\r",
											"    pm.expect(urls).to.have.property(\"privacyPolicyURL\").that.is.a(\"string\");\r",
											"    pm.expect(urls).to.have.property(\"termsOfUseURL\").that.is.a(\"string\");\r",
											"    pm.expect(urls).to.have.property(\"cookiePolicyURL\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate stylesheets\r",
											"    const stylesheets = preference.stylesheets;\r",
											"    pm.expect(stylesheets).to.have.property(\"accountApp\").that.is.a(\"string\");\r",
											"    pm.expect(stylesheets).to.have.property(\"myAccountApp\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate configs\r",
											"    const configs = preference.configs;\r",
											"    pm.expect(configs).to.have.property(\"isBrandingEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(configs).to.have.property(\"removeDefaultBranding\").that.is.a(\"boolean\");\r",
											"    pm.expect(configs).to.have.property(\"selfSignUpEnabled\").that.is.a(\"boolean\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_branding_preference_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"ORG\",\n  \"name\": \"WSO2\",\n  \"locale\": \"en-US\",\n  \"preference\": {\n    \"organizationDetails\": {\n      \"displayName\": \"Ballerina.io\",\n      \"siteTitle\": \"Login - Ballerina\",\n      \"copyrightText\": \"© 2021 WSO2\",\n      \"supportEmail\": \"support@ballerina.io\"\n    },\n    \"images\": {\n      \"logo\": {\n        \"imgURL\": \"https://ballerina.io/img/ballerina-logo.svg\",\n        \"altText\": \"Ballerina.io Logo\"\n      },\n      \"favicon\": {\n        \"imgURL\": \"https://central.ballerina.io/favicon.ico\"\n      }\n    },\n    \"urls\": {\n      \"privacyPolicyURL\": \"https://ballerina.io/privacy-policy\",\n      \"termsOfUseURL\": \"https://ballerina.io/terms-of-service/\",\n      \"cookiePolicyURL\": \"https://ballerina.io/privacy-policy/#cookie-policy\"\n    },\n    \"stylesheets\": {\n      \"accountApp\": \"https://firebasestorage.googleapis.com/v0/b/asgardeo-branding.appspot.com/o/ballerina%2Flogin-portal.overrides.css?alt=media&token=0315462e-534e-4f33-83f9-e4c092d0273d\",\n      \"myAccountApp\": \"https://asgardeo-branding/user-portal.css\"\n    },\n    \"configs\": {\n      \"isBrandingEnabled\": true,\n      \"removeDefaultBranding\": false,\n      \"selfSignUpEnabled\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update branding preferences of a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate preference properties\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"organizationDetails\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"images\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"urls\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"stylesheets\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"configs\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate organizationDetails properties\r",
											"    const orgDetails = preference.organizationDetails;\r",
											"    pm.expect(orgDetails).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"siteTitle\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"copyrightText\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"supportEmail\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate images properties\r",
											"    const images = preference.images;\r",
											"    pm.expect(images).to.have.property(\"logo\").that.is.an(\"object\");\r",
											"    pm.expect(images).to.have.property(\"favicon\").that.is.an(\"object\");\r",
											"\r",
											"    const logo = images.logo;\r",
											"    pm.expect(logo).to.have.property(\"imgURL\").that.is.a(\"string\");\r",
											"    pm.expect(logo).to.have.property(\"altText\").that.is.a(\"string\");\r",
											"\r",
											"    const favicon = images.favicon;\r",
											"    pm.expect(favicon).to.have.property(\"imgURL\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate URLs\r",
											"    const urls = preference.urls;\r",
											"    pm.expect(urls).to.have.property(\"privacyPolicyURL\").that.is.a(\"string\");\r",
											"    pm.expect(urls).to.have.property(\"termsOfUseURL\").that.is.a(\"string\");\r",
											"    pm.expect(urls).to.have.property(\"cookiePolicyURL\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate stylesheets\r",
											"    const stylesheets = preference.stylesheets;\r",
											"    pm.expect(stylesheets).to.have.property(\"accountApp\").that.is.a(\"string\");\r",
											"    pm.expect(stylesheets).to.have.property(\"myAccountApp\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate configs\r",
											"    const configs = preference.configs;\r",
											"    pm.expect(configs).to.have.property(\"isBrandingEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(configs).to.have.property(\"removeDefaultBranding\").that.is.a(\"boolean\");\r",
											"    pm.expect(configs).to.have.property(\"selfSignUpEnabled\").that.is.a(\"boolean\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_branding_preference_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"ORG\",\n  \"name\": \"WSO2\",\n  \"locale\": \"en-US\",\n  \"preference\": {\n    \"organizationDetails\": {\n      \"displayName\": \"Ballerina.io\",\n      \"siteTitle\": \"Login - Ballerina\",\n      \"copyrightText\": \"© 2021 WSO2\",\n      \"supportEmail\": \"support@ballerina.io\"\n    },\n    \"images\": {\n      \"logo\": {\n        \"imgURL\": \"https://ballerina.io/img/ballerina-logo.svg\",\n        \"altText\": \"Ballerina.io Logo\"\n      },\n      \"favicon\": {\n        \"imgURL\": \"https://central.ballerina.io/favicon.ico\"\n      }\n    },\n    \"urls\": {\n      \"privacyPolicyURL\": \"https://ballerina.io/privacy-policy\",\n      \"termsOfUseURL\": \"https://ballerina.io/terms-of-service/\",\n      \"cookiePolicyURL\": \"https://ballerina.io/privacy-policy/#cookie-policy\"\n    },\n    \"stylesheets\": {\n      \"accountApp\": \"https://firebasestorage.googleapis.com/v0/b/asgardeo-branding.appspot.com/o/ballerina%2Flogin-portal.overrides.css?alt=media&token=0315462e-534e-4f33-83f9-e4c092d0273d\",\n      \"myAccountApp\": \"https://asgardeo-branding/user-portal.css\"\n    },\n    \"configs\": {\n      \"isBrandingEnabled\": true,\n      \"removeDefaultBranding\": false,\n      \"selfSignUpEnabled\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get branding preference of a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate preference properties\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"organizationDetails\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"images\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"urls\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"stylesheets\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"configs\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate organizationDetails properties\r",
											"    const orgDetails = preference.organizationDetails;\r",
											"    pm.expect(orgDetails).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"siteTitle\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"copyrightText\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"supportEmail\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate images properties\r",
											"    const images = preference.images;\r",
											"    pm.expect(images).to.have.property(\"logo\").that.is.an(\"object\");\r",
											"    pm.expect(images).to.have.property(\"favicon\").that.is.an(\"object\");\r",
											"\r",
											"    const logo = images.logo;\r",
											"    pm.expect(logo).to.have.property(\"imgURL\").that.is.a(\"string\");\r",
											"    pm.expect(logo).to.have.property(\"altText\").that.is.a(\"string\");\r",
											"\r",
											"    const favicon = images.favicon;\r",
											"    pm.expect(favicon).to.have.property(\"imgURL\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate URLs\r",
											"    const urls = preference.urls;\r",
											"    pm.expect(urls).to.have.property(\"privacyPolicyURL\").that.is.a(\"string\");\r",
											"    pm.expect(urls).to.have.property(\"termsOfUseURL\").that.is.a(\"string\");\r",
											"    pm.expect(urls).to.have.property(\"cookiePolicyURL\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate stylesheets\r",
											"    const stylesheets = preference.stylesheets;\r",
											"    pm.expect(stylesheets).to.have.property(\"accountApp\").that.is.a(\"string\");\r",
											"    pm.expect(stylesheets).to.have.property(\"myAccountApp\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate configs\r",
											"    const configs = preference.configs;\r",
											"    pm.expect(configs).to.have.property(\"isBrandingEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(configs).to.have.property(\"removeDefaultBranding\").that.is.a(\"boolean\");\r",
											"    pm.expect(configs).to.have.property(\"selfSignUpEnabled\").that.is.a(\"boolean\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference?type=ORG&name=WSO2&locale=en-US",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Resolve branding preference of an organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate preference properties\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"organizationDetails\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"images\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"urls\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"stylesheets\").that.is.an(\"object\");\r",
											"    pm.expect(preference).to.have.property(\"configs\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate organizationDetails properties\r",
											"    const orgDetails = preference.organizationDetails;\r",
											"    pm.expect(orgDetails).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"siteTitle\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"copyrightText\").that.is.a(\"string\");\r",
											"    pm.expect(orgDetails).to.have.property(\"supportEmail\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate images properties\r",
											"    const images = preference.images;\r",
											"    pm.expect(images).to.have.property(\"logo\").that.is.an(\"object\");\r",
											"    pm.expect(images).to.have.property(\"favicon\").that.is.an(\"object\");\r",
											"\r",
											"    const logo = images.logo;\r",
											"    pm.expect(logo).to.have.property(\"imgURL\").that.is.a(\"string\");\r",
											"    pm.expect(logo).to.have.property(\"altText\").that.is.a(\"string\");\r",
											"\r",
											"    const favicon = images.favicon;\r",
											"    pm.expect(favicon).to.have.property(\"imgURL\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate URLs\r",
											"    const urls = preference.urls;\r",
											"    pm.expect(urls).to.have.property(\"privacyPolicyURL\").that.is.a(\"string\");\r",
											"    pm.expect(urls).to.have.property(\"termsOfUseURL\").that.is.a(\"string\");\r",
											"    pm.expect(urls).to.have.property(\"cookiePolicyURL\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate stylesheets\r",
											"    const stylesheets = preference.stylesheets;\r",
											"    pm.expect(stylesheets).to.have.property(\"accountApp\").that.is.a(\"string\");\r",
											"    pm.expect(stylesheets).to.have.property(\"myAccountApp\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate configs\r",
											"    const configs = preference.configs;\r",
											"    pm.expect(configs).to.have.property(\"isBrandingEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(configs).to.have.property(\"removeDefaultBranding\").that.is.a(\"boolean\");\r",
											"    pm.expect(configs).to.have.property(\"selfSignUpEnabled\").that.is.a(\"boolean\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference/resolve?type=ORG&name=WSO2&locale=en-US",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference",
										"resolve"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes branding preferences of a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_branding_preference_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference?type=ORG&name=WSO2&locale=en-US",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Custom Text",
					"item": [
						{
							"name": "Add custom text for a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"screen\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate preference properties\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"login\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"welcome\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"account.linking\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"username\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"email.username\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"back.to.sign.in\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"or\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"dont.have.an.account\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_branding_preference_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"ORG\",\n  \"name\": \"WSO2\",\n  \"locale\": \"en-US\",\n  \"screen\": \"login\",\n  \"preference\": {\n    \"login\": \"Sign In\",\n    \"welcome\": \"Welcome\",\n    \"account.linking\": \"Account Linking\",\n    \"username\": \"Username\",\n    \"email.username\": \"Email address\",\n    \"back.to.sign.in\": \"Back to Sign In\",\n    \"or\": \"Or\",\n    \"dont.have.an.account\": \"Don't have an account?\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference/text",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom text of a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"screen\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate preference properties\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"login\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"welcome\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"account.linking\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"username\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"email.username\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"back.to.sign.in\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"or\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"dont.have.an.account\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_branding_preference_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"ORG\",\n  \"name\": \"WSO2\",\n  \"locale\": \"en-US\",\n  \"screen\": \"login\",\n  \"preference\": {\n    \"login\": \"Sign In\",\n    \"welcome\": \"Welcome\",\n    \"account.linking\": \"Account Linking\",\n    \"username\": \"Username\",\n    \"email.username\": \"Email address\",\n    \"back.to.sign.in\": \"Back to Sign In\",\n    \"or\": \"Or\",\n    \"dont.have.an.account\": \"Don't have an account?\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference/text",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Custom text of a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"screen\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate preference properties\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"login\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"welcome\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"account.linking\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"username\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"email.username\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"back.to.sign.in\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"or\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"dont.have.an.account\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference/text?type=ORG&name=WSO2&locale=en-US&screen=login",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										},
										{
											"key": "screen",
											"value": "login"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Resolve custom text of an organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"screen\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate preference properties\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"login\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"welcome\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"account.linking\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"username\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"email.username\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"back.to.sign.in\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"or\").that.is.a(\"string\");\r",
											"    pm.expect(preference).to.have.property(\"dont.have.an.account\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference/text/resolve?type=ORG&name=WSO2&locale=en-US&screen=login",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text",
										"resolve"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										},
										{
											"key": "screen",
											"value": "login"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes custom text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_branding_preference_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/branding-preference/text?type=ORG&name=WSO2&locale=en-US&screen=login",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										},
										{
											"key": "screen",
											"value": "login"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Claim management API",
			"item": [
				{
					"name": "management",
					"item": [
						{
							"name": "Add a local claim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"claimURI\": \"http://wso2.org/claims/petname\",\n\"description\": \"Some description of the claim.\",\n\"displayOrder\": 10,\n\"displayName\": \"Petname\",\n\"readOnly\": true,\n\"regEx\": \"^([a-zA-Z)$\",\n\"required\": true,\n\"supportedByDefault\": true,\n\"attributeMapping\": [\n  {\n    \"mappedAttribute\": \"username\",\n    \"userstore\": \"PRIMARY\"\n  }\n],\n\"properties\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/local/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"local",
										"claims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve local claims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Extract Petname ID and set as collection variable\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Find the claim with displayName \"Petname\"\r",
											"    const petnameClaim = responseBody.find(claim => claim.displayName === \"Petname\");\r",
											"\r",
											"    // Ensure the claim was found and extract the ID\r",
											"    pm.expect(petnameClaim).to.not.be.undefined;\r",
											"    pm.expect(petnameClaim).to.have.property(\"id\");\r",
											"\r",
											"    // Set the extracted ID as a collection variable\r",
											"    pm.collectionVariables.set(\"claimId\", petnameClaim.id);\r",
											"\r",
											"    // Log the id to the console\r",
											"    console.log(\"Petname Claim ID:\", petnameClaim.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure and content\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    responseBody.forEach((claim, index) => {\r",
											"        // Validate required properties\r",
											"        pm.expect(claim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"claimURI\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"        pm.expect(claim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"readOnly\").that.is.a(\"boolean\");\r",
											"        pm.expect(claim).to.have.property(\"regEx\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"required\").that.is.a(\"boolean\");\r",
											"        pm.expect(claim).to.have.property(\"supportedByDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"        // Validate attributeMapping is an array and has the required structure\r",
											"        pm.expect(claim).to.have.property(\"attributeMapping\").that.is.an(\"array\");\r",
											"        claim.attributeMapping.forEach(mapping => {\r",
											"            pm.expect(mapping).to.have.property(\"mappedAttribute\").that.is.a(\"string\");\r",
											"            pm.expect(mapping).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"        });\r",
											"\r",
											"        // Validate properties is an array\r",
											"        pm.expect(claim).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/local/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"local",
										"claims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve local claim by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate single claim response\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate required properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"claimURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"readOnly\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"regEx\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"required\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"supportedByDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate attributeMapping is an array and has the required structure\r",
											"    pm.expect(responseBody).to.have.property(\"attributeMapping\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate properties is an array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/local/claims/{{claimId}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"local",
										"claims",
										"{{claimId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a local claim by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"claimURI\": \"http://wso2.org/claims/petname\",\n\"description\": \"Some description of the claim.\",\n\"displayOrder\": 10,\n\"displayName\": \"PetName\",\n\"readOnly\": true,\n\"regEx\": \"^([a-zA-Z)$\",\n\"required\": true,\n\"supportedByDefault\": true,\n\"attributeMapping\": [\n  {\n    \"mappedAttribute\": \"username\",\n    \"userstore\": \"PRIMARY\"\n  }\n],\n\"properties\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/local/claims/{{claimId}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"local",
										"claims",
										"{{claimId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a local claim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/local/claims/{{claimId}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"local",
										"claims",
										"{{claimId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a claim dialect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"dialectURI\": \"urn:ietf:params:scim:schemas:core:2.0:Subuser\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve claim dialects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Extract Subuser ID and set as collection variable\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Find the claim-dialet with dialectURI \"urn:ietf:params:scim:schemas:core:2.0:Subuser\"\r",
											"    const subuserClaim = responseBody.find(claim => claim.dialectURI === \"urn:ietf:params:scim:schemas:core:2.0:Subuser\");\r",
											"\r",
											"    // Ensure the claim was found and extract the ID\r",
											"    pm.expect(subuserClaim).to.not.be.undefined;\r",
											"    pm.expect(subuserClaim).to.have.property(\"id\");\r",
											"\r",
											"    // Set the extracted ID as a collection variable\r",
											"    pm.collectionVariables.set(\"dialect_Id\", subuserClaim.id);\r",
											"\r",
											"    // Log the id to the console\r",
											"    console.log(\"Subuser Dialect Claim ID:\", subuserClaim.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate claim dialects response\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    responseBody.forEach((item, index) => {\r",
											"        pm.test(`Validate item at index ${index}`, function () {\r",
											"            // Validate required properties\r",
											"            pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"            pm.expect(item).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"\r",
											"            // Validate 'link' object structure\r",
											"            pm.expect(item).to.have.property(\"link\").that.is.an(\"object\");\r",
											"            pm.expect(item.link).to.have.property(\"href\").that.is.a(\"string\");\r",
											"            pm.expect(item.link).to.have.property(\"rel\").that.is.a(\"string\");\r",
											"            pm.expect(item.link.rel).to.equal(\"claims\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve claim dialect",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate single claim dialect object\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate required top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"link\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate nested 'link' object properties\r",
											"    pm.expect(responseBody.link).to.have.property(\"href\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.link).to.have.property(\"rel\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.link.rel).to.equal(\"claims\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a claim dialect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"dialectURI\": \"urn:ietf:params:scim:schemas:core:2.0:Subuser\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export a claim dialect with claims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate claim dialect response\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate required top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"claims\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"link\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate 'claims' array is present and is empty\r",
											"    pm.expect(responseBody.claims).to.be.an(\"array\").that.is.empty;\r",
											"\r",
											"    // Validate nested 'link' object properties\r",
											"    pm.expect(responseBody.link).to.have.property(\"href\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.link).to.have.property(\"rel\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.link.rel).to.equal(\"claims\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}/export",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a claim dialect with claims",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "text/xml",
											"type": "file",
											"src": "postman-cloud:///1efb1430-d08c-4b20-86de-c8559944b4b6"
										}
									]
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an external claim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"claimURI\": \"urn:ietf:params:scim:schemas:core:2.0:User:userName\",\n\"mappedLocalClaimURI\": \"http://wso2.org/claims/username\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}",
										"claims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve external claims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Assign claim ID to collection variable\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Extract the ID from the response\r",
											"    const claimId = responseBody[0].id;\r",
											"\r",
											"    // Set the extracted ID as a collection variable\r",
											"    pm.collectionVariables.set(\"claim_Id\", claimId);\r",
											"\r",
											"    // Log the ID to the console\r",
											"    console.log(\"Claim ID:\", claimId);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate claim array response\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate that the response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    // Loop through each claim object in the array\r",
											"    responseBody.forEach(claim => {\r",
											"        // Validate required top-level properties\r",
											"        pm.expect(claim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"claimURI\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"claimDialectURI\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"mappedLocalClaimURI\").that.is.a(\"string\");\r",
											"\r",
											"        // Additional validations (optional)\r",
											"        // Check if 'claimURI' contains a specific format or string\r",
											"        pm.expect(claim.claimURI).to.match(/^urn:ietf:params:scim:schemas:core:2.0:[A-Za-z]+/);\r",
											"\r",
											"        // Check if 'mappedLocalClaimURI' starts with 'http://'\r",
											"        pm.expect(claim.mappedLocalClaimURI).to.match(/^http:\\/\\//);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}",
										"claims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve external claim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate single claim object response\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"claimURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"claimDialectURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"mappedLocalClaimURI\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}/claims/{{claim_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}",
										"claims",
										"{{claim_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an external claim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"claimURI\": \"urn:ietf:params:scim:schemas:core:2.0:User:userName\",\n\"mappedLocalClaimURI\": \"http://wso2.org/claims/username\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}/claims/{{claim_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}",
										"claims",
										"{{claim_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an external claim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}/claims/{{claim_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}",
										"claims",
										"{{claim_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a claim dialect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_claim_meta_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/claim-dialects/{{dialect_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Extension management API",
			"item": [
				{
					"name": "Browse",
					"item": [
						{
							"name": "List the extensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure and content\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    responseBody.forEach((item) => {\r",
											"        // Validate top-level properties\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"image\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"        pm.expect(item).to.have.property(\"tags\").that.is.an(\"array\");\r",
											"        pm.expect(item).to.have.property(\"category\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"self\").that.is.a(\"string\");\r",
											"\r",
											"        // Validate `tags` array is not empty\r",
											"        pm.expect(item.tags).to.be.an(\"array\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_extensions_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/extensions",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"extensions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List the extensions by type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure and content\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    responseBody.forEach((item) => {\r",
											"        // Validate top-level properties\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"image\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"        pm.expect(item).to.have.property(\"tags\").that.is.an(\"array\");\r",
											"        pm.expect(item).to.have.property(\"category\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"type\").that.is.a(\"string\").to.equal(\"connections\");\r",
											"        pm.expect(item).to.have.property(\"self\").that.is.a(\"string\");\r",
											"\r",
											"        // Validate `tags` array is not empty\r",
											"        pm.expect(item.tags).to.be.an(\"array\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"extensionType\", \"connections\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_extensions_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/extensions/{{extensionType}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"extensions",
										"{{extensionType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the extension info by type and id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure and content\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\"); // Can be empty\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"image\").that.is.a(\"string\"); // Can be empty\r",
											"    pm.expect(responseBody).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"tags\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"category\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"extensionId\", \"enterprise-saml-idp\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_extensions_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/extensions/{{extensionType}}/{{extensionId}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"extensions",
										"{{extensionType}}",
										"{{extensionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the extension metadata by type and id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_extensions_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response based on status code\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const statusCode = pm.response.code;\r",
											"\r",
											"    switch (statusCode) {\r",
											"        case 200:\r",
											"            pm.expect(response).to.be.an(\"object\");\r",
											"            pm.expect(response).to.have.property(\"image\");\r",
											"            pm.expect(response).to.have.property(\"docLink\");\r",
											"            pm.expect(response).to.have.property(\"displayOrder\");\r",
											"            pm.expect(response).to.have.property(\"description\");\r",
											"            pm.expect(response).to.have.property(\"services\");\r",
											"            pm.expect(response).to.have.property(\"templateId\");\r",
											"            pm.expect(response).to.have.property(\"tags\");\r",
											"            pm.expect(response).to.have.property(\"templateGroup\");\r",
											"            pm.expect(response).to.have.property(\"idp\");\r",
											"            break;\r",
											"\r",
											"        case 400:\r",
											"            pm.expect(response).to.be.an(\"object\");\r",
											"            pm.expect(response).to.have.property(\"error\");\r",
											"            pm.expect(response.error).to.have.property(\"code\");\r",
											"            pm.expect(response.error).to.have.property(\"message\");\r",
											"            pm.expect(response.error.message).to.be.a(\"string\");\r",
											"            break;\r",
											"\r",
											"        case 404:\r",
											"            pm.expect(response).to.be.an(\"object\");\r",
											"            pm.expect(response).to.have.property(\"code\");\r",
											"            pm.expect(response).to.have.property(\"message\");\r",
											"            pm.expect(response).to.have.property(\"description\");\r",
											"            pm.expect(response).to.have.property(\"traceId\");\r",
											"            break;\r",
											"\r",
											"        default:\r",
											"            pm.test(`Unexpected status code: ${statusCode}`, () => {\r",
											"                pm.expect(false).to.be.true; // Fail the test for unexpected status codes\r",
											"            });\r",
											"            break;\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/extensions/{{extensionType}}/{{extensionId}}/metadata",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"extensions",
										"{{extensionType}}",
										"{{extensionId}}",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the extension template by type and id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure\", () => {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    // Check top-level structure\r",
											"    pm.expect(response).to.have.property(\"image\");\r",
											"    pm.expect(response).to.have.property(\"docLink\");\r",
											"    pm.expect(response).to.have.property(\"displayOrder\");\r",
											"    pm.expect(response).to.have.property(\"description\");\r",
											"    pm.expect(response).to.have.property(\"services\");\r",
											"    pm.expect(response).to.have.property(\"templateId\");\r",
											"    pm.expect(response).to.have.property(\"tags\");\r",
											"    pm.expect(response).to.have.property(\"templateGroup\");\r",
											"    pm.expect(response).to.have.property(\"idp\");\r",
											"\r",
											"    // Validate 'idp' object\r",
											"    pm.expect(response.idp).to.have.property(\"image\");\r",
											"    pm.expect(response.idp).to.have.property(\"isPrimary\");\r",
											"    pm.expect(response.idp).to.have.property(\"roles\");\r",
											"    pm.expect(response.idp).to.have.property(\"certificate\");\r",
											"    pm.expect(response.idp).to.have.property(\"claims\");\r",
											"    pm.expect(response.idp).to.have.property(\"name\");\r",
											"    pm.expect(response.idp).to.have.property(\"alias\");\r",
											"    pm.expect(response.idp).to.have.property(\"description\");\r",
											"    pm.expect(response.idp).to.have.property(\"federatedAuthenticators\");\r",
											"\r",
											"    // Validate nested 'federatedAuthenticators'\r",
											"    pm.expect(response.idp.federatedAuthenticators).to.have.property(\"defaultAuthenticatorId\");\r",
											"    pm.expect(response.idp.federatedAuthenticators).to.have.property(\"authenticators\");\r",
											"\r",
											"    // Validate properties of authenticators\r",
											"    response.idp.federatedAuthenticators.authenticators.forEach(authenticator => {\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\");\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\");\r",
											"        pm.expect(authenticator).to.have.property(\"properties\");\r",
											"\r",
											"        // Validate each property inside 'properties'\r",
											"        authenticator.properties.forEach(property => {\r",
											"            pm.expect(property).to.have.property(\"regex\");\r",
											"            pm.expect(property).to.have.property(\"isConfidential\");\r",
											"            pm.expect(property).to.have.property(\"displayName\");\r",
											"            pm.expect(property).to.have.property(\"defaultValue\");\r",
											"            pm.expect(property).to.have.property(\"displayOrder\");\r",
											"            pm.expect(property).to.have.property(\"description\");\r",
											"            pm.expect(property).to.have.property(\"key\");\r",
											"            pm.expect(property).to.have.property(\"isMandatory\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_extensions_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/extensions/{{extensionType}}/{{extensionId}}/template",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"extensions",
										"{{extensionType}}",
										"{{extensionId}}",
										"template"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Identity provider API",
			"item": [
				{
					"name": "Identity Providers",
					"item": [
						{
							"name": "Add a new identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"let identity_provider_id = responseBody.id;\r",
											"\r",
											"pm.collectionVariables.set(\"identity_provider_id\", identity_provider_id);\r",
											"\r",
											"console.log(identity_provider_id);\r",
											"\r",
											"// Validate status code \r",
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isPrimary\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"image\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isFederationHub\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmIdentifier\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate certificate object\r",
											"    pm.expect(responseBody).to.have.property(\"certificate\");\r",
											"    pm.expect(responseBody.certificate).to.have.property(\"jwksUri\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate alias\r",
											"    pm.expect(responseBody).to.have.property(\"alias\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate claims object\r",
											"    pm.expect(responseBody).to.have.property(\"claims\");\r",
											"    pm.expect(responseBody.claims).to.have.property(\"userIdClaim\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"roleClaim\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    responseBody.claims.mappings.forEach((mapping) => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"provisioningClaims\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate roles object\r",
											"    pm.expect(responseBody).to.have.property(\"roles\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"outboundProvisioningRoles\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate federatedAuthenticators object\r",
											"    pm.expect(responseBody).to.have.property(\"federatedAuthenticators\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"    responseBody.federatedAuthenticators.authenticators.forEach((authenticator) => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate provisioning object\r",
											"    pm.expect(responseBody).to.have.property(\"provisioning\");\r",
											"    pm.expect(responseBody.provisioning).to.have.property(\"jit\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.provisioning).to.have.property(\"outboundConnectors\");\r",
											"    pm.expect(responseBody.provisioning.outboundConnectors).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.outboundConnectors).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"    responseBody.provisioning.outboundConnectors.connectors.forEach((connector) => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate implicitAssociation object\r",
											"    pm.expect(responseBody).to.have.property(\"implicitAssociation\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"lookupAttribute\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"google\",\n    \"description\": \"IdP for Google Federation\",\n    \"image\": \"https://localhost:9443/console/resources/connections/assets/images/logos/google.svg\",\n    \"isPrimary\": false,\n    \"isFederationHub\": false,\n    \"homeRealmIdentifier\": \"localhost\",\n    \"certificate\": {\n        \"certificates\": [],\n        \"jwksUri\": \"https://localhost:9444/oauth2/jwks\"\n    },\n    \"alias\": \"https://localhost:9444/oauth2/token\",\n    \"claims\": {\n        \"userIdClaim\": {\n            \"uri\": \"http://wso2.org/claims/username\"\n        },\n        \"roleClaim\": {\n            \"uri\": \"http://wso2.org/claims/username\"\n        },\n        \"mappings\": [\n            {\n                \"idpClaim\": \"country\",\n                \"localClaim\": {\n                    \"uri\": \"http://wso2.org/claims/username\"\n                }\n            }\n        ],\n        \"provisioningClaims\": [\n            {\n                \"claim\": {\n                    \"uri\": \"http://wso2.org/claims/username\"\n                },\n                \"defaultValue\": \"sathya\"\n            }\n        ]\n    },\n    \"roles\": {\n        \"mappings\": [\n            {\n                \"idpRole\": \"google-manager\",\n                \"localRole\": \"manager\"\n            }\n        ],\n        \"outboundProvisioningRoles\": [\n            \"admin\"\n        ]\n    },\n    \"federatedAuthenticators\": {\n        \"defaultAuthenticatorId\": \"VHdpdHRlckF1dGhlbnRpY2F0b3I\",\n        \"authenticators\": [\n            {\n                \"authenticatorId\": \"VHdpdHRlckF1dGhlbnRpY2F0b3I\",\n                \"isEnabled\": true,\n                \"isDefault\": false,\n                \"properties\": [\n                    {\n                        \"key\": \"somePropertyKey\",\n                        \"value\": \"somePropertyValue\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"provisioning\": {\n        \"jit\": {\n            \"isEnabled\": true,\n            \"scheme\": \"PROVISION_SILENTLY\",\n            \"userstore\": \"PRIMARY\",\n            \"associateLocalUser\": true,\n            \"attributeSyncMethod\": \"OVERRIDE_ALL\"\n        },\n        \"outboundConnectors\": {\n            \"defaultConnectorId\": \"U0NJTTI\",\n            \"connectors\": [\n                {\n                    \"connectorId\": \"U0NJTTI\",\n                    \"isEnabled\": true,\n                    \"isDefault\": false,\n                    \"blockingEnabled\": false,\n                    \"rulesEnabled\": false,\n                    \"properties\": [\n                        {\n                            \"key\": \"somePropertyKey\",\n                            \"value\": \"somePropertyValue\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "List identity providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
											"    pm.expect(responseBody).to.have.property(\"count\");\r",
											"    pm.expect(responseBody).to.have.property(\"links\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"identityProviders\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate identityProviders array\r",
											"    responseBody.identityProviders.forEach((provider) => {\r",
											"        pm.expect(provider).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(provider).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(provider).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(provider).to.have.property(\"image\").that.is.a(\"string\");\r",
											"        pm.expect(provider).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve identity provider by identity provider's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isPrimary\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"image\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isFederationHub\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmIdentifier\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate certificate object\r",
											"    pm.expect(responseBody).to.have.property(\"certificate\");\r",
											"    pm.expect(responseBody.certificate).to.have.property(\"jwksUri\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate alias\r",
											"    pm.expect(responseBody).to.have.property(\"alias\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate claims object\r",
											"    pm.expect(responseBody).to.have.property(\"claims\");\r",
											"    pm.expect(responseBody.claims).to.have.property(\"userIdClaim\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"roleClaim\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    responseBody.claims.mappings.forEach((mapping) => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"provisioningClaims\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate roles object\r",
											"    pm.expect(responseBody).to.have.property(\"roles\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"outboundProvisioningRoles\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate federatedAuthenticators object\r",
											"    pm.expect(responseBody).to.have.property(\"federatedAuthenticators\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"    responseBody.federatedAuthenticators.authenticators.forEach((authenticator) => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate provisioning object\r",
											"    pm.expect(responseBody).to.have.property(\"provisioning\");\r",
											"    pm.expect(responseBody.provisioning).to.have.property(\"jit\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.provisioning).to.have.property(\"outboundConnectors\");\r",
											"    pm.expect(responseBody.provisioning.outboundConnectors).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.outboundConnectors).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"    responseBody.provisioning.outboundConnectors.connectors.forEach((connector) => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate implicitAssociation object\r",
											"    pm.expect(responseBody).to.have.property(\"implicitAssociation\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"lookupAttribute\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch an identity provider property by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isPrimary\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"image\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isFederationHub\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmIdentifier\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate certificate object\r",
											"    pm.expect(responseBody).to.have.property(\"certificate\");\r",
											"    pm.expect(responseBody.certificate).to.have.property(\"jwksUri\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate alias\r",
											"    pm.expect(responseBody).to.have.property(\"alias\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate claims object\r",
											"    pm.expect(responseBody).to.have.property(\"claims\");\r",
											"    pm.expect(responseBody.claims).to.have.property(\"userIdClaim\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.userIdClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"roleClaim\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claims.roleClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    responseBody.claims.mappings.forEach((mapping) => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    pm.expect(responseBody.claims).to.have.property(\"provisioningClaims\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate roles object\r",
											"    pm.expect(responseBody).to.have.property(\"roles\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"outboundProvisioningRoles\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate federatedAuthenticators object\r",
											"    pm.expect(responseBody).to.have.property(\"federatedAuthenticators\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"    responseBody.federatedAuthenticators.authenticators.forEach((authenticator) => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate provisioning object\r",
											"    pm.expect(responseBody).to.have.property(\"provisioning\");\r",
											"    pm.expect(responseBody.provisioning).to.have.property(\"jit\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.provisioning.jit).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(responseBody.provisioning).to.have.property(\"outboundConnectors\");\r",
											"    pm.expect(responseBody.provisioning.outboundConnectors).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioning.outboundConnectors).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"    responseBody.provisioning.outboundConnectors.connectors.forEach((connector) => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate implicitAssociation object\r",
											"    pm.expect(responseBody).to.have.property(\"implicitAssociation\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"lookupAttribute\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"operation\": \"REPLACE\",\n  \"path\": \"/homeRealmIdentifier\",\n  \"value\": \"google\"\n}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export identity provider in XML, YAML, or JSON file formats",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate basic properties\r",
											"    pm.expect(responseBody).to.have.property(\"identityProviderName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"identityProviderDescription\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"alias\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"primary\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"federationHub\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningRole\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"enable\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate federatedAuthenticatorConfigs array\r",
											"    pm.expect(responseBody).to.have.property(\"federatedAuthenticatorConfigs\").that.is.an(\"array\");\r",
											"    responseBody.federatedAuthenticatorConfigs.forEach(config => {\r",
											"        pm.expect(config).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(config).to.have.property(\"enabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(config).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"    });\r",
											"\r",
											"    // Validate claimConfig object\r",
											"    pm.expect(responseBody).to.have.property(\"claimConfig\");\r",
											"    pm.expect(responseBody.claimConfig).to.have.property(\"roleClaimURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.claimConfig).to.have.property(\"userClaimURI\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate idpProperties array\r",
											"    pm.expect(responseBody).to.have.property(\"idpProperties\").that.is.an(\"array\");\r",
											"    responseBody.idpProperties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate imageUrl\r",
											"    pm.expect(responseBody).to.have.property(\"imageUrl\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/export?excludeSecrets=true",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"export"
									],
									"query": [
										{
											"key": "excludeSecrets",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Metadata",
					"item": [
						{
							"name": "Metadata about supported federated authenticators of identity providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate federated authenticators array structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    responseBody.forEach(authenticator => {\r",
											"        // Validate required properties for each object\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"\r",
											"        // Validate tags if present\r",
											"        if (authenticator.hasOwnProperty(\"tags\")) {\r",
											"            pm.expect(authenticator.tags).to.be.an(\"array\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/meta/federated-authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"meta",
										"federated-authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Metadata about a supported federated authenticator",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"federated_authenticator_id\", \"R2l0aHViQXV0aGVudGljYXRvcg\")\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal\r",
											"});\r",
											"\r",
											"pm.test(\"Validate authenticator object structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"tags\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate each property object in 'properties'\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"        pm.expect(property).to.have.property(\"regex\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"isMandatory\").that.is.a(\"boolean\");\r",
											"        pm.expect(property).to.have.property(\"isConfidential\").that.is.a(\"boolean\");\r",
											"        pm.expect(property).to.have.property(\"options\").that.is.an(\"array\");\r",
											"        pm.expect(property).to.have.property(\"defaultValue\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"subProperties\").that.is.an(\"array\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/meta/federated-authenticators/{{federated_authenticator_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"meta",
										"federated-authenticators",
										"{{federated_authenticator_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Metadata about supported outbound provisioning connectors by identity providers in the identity server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate outbound provisioning connectors structure\", () => {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each connector object\r",
											"    responseBody.forEach(connector => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"connector_id\", \"Z29vZ2xlYXBwcw\")\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/meta/outbound-provisioning-connectors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"meta",
										"outbound-provisioning-connectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Metadata about supported outbound provisioning connectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate googleapps connector structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate properties of the connector\r",
											"    pm.expect(responseBody).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"blockingEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"rulesEnabled\").that.is.a(\"boolean\");\r",
											"    \r",
											"    // Validate 'properties' array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"        pm.expect(property).to.have.property(\"regex\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"isMandatory\").that.is.a(\"boolean\");\r",
											"        pm.expect(property).to.have.property(\"isConfidential\").that.is.a(\"boolean\");\r",
											"        pm.expect(property).to.have.property(\"options\").that.is.an(\"array\");\r",
											"        pm.expect(property).to.have.property(\"defaultValue\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"subProperties\").that.is.an(\"array\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/meta/outbound-provisioning-connectors/{{connector_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"meta",
										"outbound-provisioning-connectors",
										"{{connector_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Federated Authenticators",
					"item": [
						{
							"name": "Federated authenticators of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate authenticator structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the defaultAuthenticatorId field\r",
											"    pm.expect(responseBody).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate 'authenticators' array\r",
											"    pm.expect(responseBody).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.authenticators.forEach(authenticator => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"let federated_authenticator_id = responseBody.defaultAuthenticatorId;\r",
											"\r",
											"pm.collectionVariables.set(\"federated_authenticator_id\", responseBody.defaultAuthenticatorId);\r",
											"\r",
											"console.log(federated_authenticator_id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/federated-authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"federated-authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Federated authenticators of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate authenticator structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the defaultAuthenticatorId field\r",
											"    pm.expect(responseBody).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate 'authenticators' array\r",
											"    pm.expect(responseBody).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.authenticators.forEach(authenticator => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"defaultAuthenticatorId\": \"VHdpdHRlckF1dGhlbnRpY2F0b3I\",\n\"authenticators\": [\n  {\n    \"authenticatorId\": \"VHdpdHRlckF1dGhlbnRpY2F0b3I\",\n    \"isEnabled\": true,\n    \"isDefault\": false,\n    \"properties\": [\n      {\n        \"key\": \"somePropertyKey\",\n        \"value\": \"somePropertyValue\"\n      }\n    ]\n  }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/federated-authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"federated-authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve the federated authenticator config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate SAML2Authenticator structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'properties' array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/federated-authenticators/{{federated_authenticator_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"federated-authenticators",
										"{{federated_authenticator_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a federated authenticator of an IdP using authenticator id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate GithubAuthenticator structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isDefault\").that.is.a(\"boolean\");\r",
											"    \r",
											"    // Validate the 'properties' array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"isEnabled\": true,\n\"isDefault\": false,\n\"properties\": [\n  {\n    \"key\": \"somePropertyKey\",\n    \"value\": \"somePropertyValue\"\n  }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/federated-authenticators/{{federated_authenticator_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"federated-authenticators",
										"{{federated_authenticator_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Provisioning",
					"item": [
						{
							"name": "Provisioning entities of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JIT and outboundConnectors structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the 'jit' object\r",
											"    pm.expect(responseBody).to.have.property(\"jit\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate the 'outboundConnectors' object\r",
											"    pm.expect(responseBody).to.have.property(\"outboundConnectors\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.outboundConnectors).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.outboundConnectors).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate the connectors array\r",
											"    responseBody.outboundConnectors.connectors.forEach(connector => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/provisioning",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"provisioning"
									]
								}
							},
							"response": []
						},
						{
							"name": "Outbound provisioning connectors of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate outboundConnectors structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the 'outboundConnectors' object\r",
											"    pm.expect(responseBody).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate the connectors array\r",
											"    responseBody.connectors.forEach(connector => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/provisioning/outbound-connectors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"provisioning",
										"outbound-connectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update outbound provisioning connectors of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate outboundConnectors structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the 'defaultConnectorId' field\r",
											"    pm.expect(responseBody).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate the 'connectors' array\r",
											"    pm.expect(responseBody).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"\r",
											"    // Ensure the connectors array is not empty and validate each connector\r",
											"    pm.expect(responseBody.connectors).to.have.lengthOf.above(0);\r",
											"    responseBody.connectors.forEach(connector => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"pm.collectionVariables.set(\"connector_id\", responseBody.defaultConnectorId);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"defaultConnectorId\": \"U0NJTTI\",\n\"connectors\": [\n  {\n    \"connectorId\": \"U0NJTTI\",\n    \"isEnabled\": true,\n    \"isDefault\": false,\n    \"blockingEnabled\": false,\n    \"rulesEnabled\": false,\n    \"properties\": [\n      {\n        \"key\": \"somePropertyKey\",\n        \"value\": \"somePropertyValue\"\n      }\n    ]\n  }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/provisioning/outbound-connectors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"provisioning",
										"outbound-connectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve the outbound provisioning connector of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate SCIM connector response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the 'connectorId' field\r",
											"    pm.expect(responseBody).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate the 'name' field\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate the 'isEnabled' field\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'isDefault' field\r",
											"    pm.expect(responseBody).to.have.property(\"isDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'blockingEnabled' field\r",
											"    pm.expect(responseBody).to.have.property(\"blockingEnabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'rulesEnabled' field\r",
											"    pm.expect(responseBody).to.have.property(\"rulesEnabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'properties' array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    // Ensure that 'properties' is not empty and validate each property\r",
											"    pm.expect(responseBody.properties).to.have.lengthOf.above(0);\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/provisioning/outbound-connectors/{{connector_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"provisioning",
										"outbound-connectors",
										"{{connector_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an outbound provisioning connector of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate SCIM connector response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Ensure the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate the 'connectorId' field\r",
											"    pm.expect(responseBody).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate the 'name' field\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate the 'isEnabled' field\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'isDefault' field\r",
											"    pm.expect(responseBody).to.have.property(\"isDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'blockingEnabled' field\r",
											"    pm.expect(responseBody).to.have.property(\"blockingEnabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'rulesEnabled' field\r",
											"    pm.expect(responseBody).to.have.property(\"rulesEnabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate the 'properties' array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    // Ensure that 'properties' is not empty and validate each property\r",
											"    pm.expect(responseBody.properties).to.have.lengthOf.above(0);\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"isEnabled\": true,\n\"isDefault\": false,\n\"blockingEnabled\": false,\n\"rulesEnabled\": false,\n\"properties\": [\n  {\n    \"key\": \"somePropertyKey\",\n    \"value\": \"somePropertyValue\"\n  }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/provisioning/outbound-connectors/{{connector_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"provisioning",
										"outbound-connectors",
										"{{connector_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Just-In-Time provisioning config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JIT configuration response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\");\r",
											"    pm.expect(responseBody).to.have.property(\"scheme\");\r",
											"    pm.expect(responseBody).to.have.property(\"userstore\");\r",
											"    pm.expect(responseBody).to.have.property(\"associateLocalUser\");\r",
											"    pm.expect(responseBody).to.have.property(\"attributeSyncMethod\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/provisioning/jit",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"provisioning",
										"jit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the just-in-time provisioning config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JIT configuration response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\");\r",
											"    pm.expect(responseBody).to.have.property(\"scheme\");\r",
											"    pm.expect(responseBody).to.have.property(\"userstore\");\r",
											"    pm.expect(responseBody).to.have.property(\"associateLocalUser\");\r",
											"    pm.expect(responseBody).to.have.property(\"attributeSyncMethod\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"isEnabled\": true,\n\"scheme\": \"PROVISION_SILENTLY\",\n\"userstore\": \"PRIMARY\",\n\"associateLocalUser\": true,\n\"attributeSyncMethod\": \"OVERRIDE_ALL\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/provisioning/jit",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"provisioning",
										"jit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Claims",
					"item": [
						{
							"name": "Claim config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate claim mapping configuration response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the main properties\r",
											"    pm.expect(responseBody).to.have.property(\"userIdClaim\");\r",
											"    pm.expect(responseBody).to.have.property(\"roleClaim\");\r",
											"    pm.expect(responseBody).to.have.property(\"mappings\");\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningClaims\");\r",
											"\r",
											"    // Validate structure of userIdClaim and roleClaim\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"id\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"uri\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"displayName\");\r",
											"\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"id\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"uri\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"displayName\");\r",
											"\r",
											"    // Validate structure of mappings array and its objects\r",
											"    pm.expect(responseBody.mappings).to.be.an('array');\r",
											"    responseBody.mappings.forEach(mapping => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\");\r",
											"\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"id\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"displayName\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"claims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the claims of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate claim configuration response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the main properties\r",
											"    pm.expect(responseBody).to.have.property(\"userIdClaim\");\r",
											"    pm.expect(responseBody).to.have.property(\"roleClaim\");\r",
											"    pm.expect(responseBody).to.have.property(\"mappings\");\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningClaims\");\r",
											"\r",
											"    // Validate structure of userIdClaim and roleClaim\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"id\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"uri\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"displayName\");\r",
											"\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"id\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"uri\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"displayName\");\r",
											"\r",
											"    // Validate structure of mappings array (empty or not)\r",
											"    pm.expect(responseBody.mappings).to.be.an('array');\r",
											"\r",
											"    // Validate structure of provisioningClaims array\r",
											"    pm.expect(responseBody.provisioningClaims).to.be.an('array');\r",
											"    responseBody.provisioningClaims.forEach(provisioningClaim => {\r",
											"        pm.expect(provisioningClaim).to.have.property(\"claim\");\r",
											"        pm.expect(provisioningClaim.claim).to.have.property(\"id\");\r",
											"        pm.expect(provisioningClaim.claim).to.have.property(\"uri\");\r",
											"        pm.expect(provisioningClaim.claim).to.have.property(\"displayName\");\r",
											"        pm.expect(provisioningClaim).to.have.property(\"defaultValue\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userIdClaim\": {\n    \"uri\": \"http://wso2.org/claims/username\"\n  },\n  \"roleClaim\": {\n    \"uri\": \"http://wso2.org/claims/username\"\n  },\n  \"mappings\": [  ],\n  \"provisioningClaims\": [\n    {\n      \"claim\": {\n        \"uri\": \"http://wso2.org/claims/username\"\n      },\n      \"defaultValue\": \"sathya\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"claims"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Roles",
					"item": [
						{
							"name": "Role config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for mappings and outboundProvisioningRoles\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate that mappings is an array\r",
											"    pm.expect(responseBody).to.have.property(\"mappings\");\r",
											"    pm.expect(responseBody.mappings).to.be.an('array');\r",
											"\r",
											"    // Validate that outboundProvisioningRoles is an array\r",
											"    pm.expect(responseBody).to.have.property(\"outboundProvisioningRoles\");\r",
											"    pm.expect(responseBody.outboundProvisioningRoles).to.be.an('array');\r",
											"\r",
											"    // Validate outboundProvisioningRoles elements to be strings (role names)\r",
											"    responseBody.outboundProvisioningRoles.forEach(role => {\r",
											"        pm.expect(role).to.be.a('string');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/roles",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the role config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for mappings and outboundProvisioningRoles\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate that mappings is an array\r",
											"    pm.expect(responseBody).to.have.property(\"mappings\");\r",
											"    pm.expect(responseBody.mappings).to.be.an('array');\r",
											"\r",
											"    // Validate that outboundProvisioningRoles is an array\r",
											"    pm.expect(responseBody).to.have.property(\"outboundProvisioningRoles\");\r",
											"    pm.expect(responseBody.outboundProvisioningRoles).to.be.an('array');\r",
											"\r",
											"    // Validate outboundProvisioningRoles elements to be strings (role names)\r",
											"    responseBody.outboundProvisioningRoles.forEach(role => {\r",
											"        pm.expect(role).to.be.a('string');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"mappings\": [\n  {\n    \"idpRole\": \"google-manager\",\n    \"localRole\": \"manager\"\n  }\n],\n\"outboundProvisioningRoles\": [\n  \"manager\",\n  \"hr-admin\"\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/roles",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Connected Apps",
					"item": [
						{
							"name": "Connected applications of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for totalResults, startIndex, count, and links\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate totalResults as a number\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
											"    pm.expect(responseBody.totalResults).to.be.a('number');\r",
											"\r",
											"    // Validate startIndex as a number\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
											"    pm.expect(responseBody.startIndex).to.be.a('number');\r",
											"\r",
											"    // Validate count as a number\r",
											"    pm.expect(responseBody).to.have.property(\"count\");\r",
											"    pm.expect(responseBody.count).to.be.a('number');\r",
											"\r",
											"    // Validate links as an array\r",
											"    pm.expect(responseBody).to.have.property(\"links\");\r",
											"    pm.expect(responseBody.links).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}/connected-apps",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}",
										"connected-apps"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Template management",
					"item": [
						{
							"name": "Create a new IdP template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"google\",\n\"description\": \"Google federated connector\",\n\"image\": \"google-logo-url\",\n\"category\": \"DEFAULT\",\n\"displayOrder\": 10,\n\"idp\": {\n  \"name\": \"google\",\n  \"description\": \"IdP for Google Federation\",\n  \"image\": \"google-logo-url\",\n  \"isPrimary\": false,\n  \"isFederationHub\": false,\n  \"homeRealmIdentifier\": \"localhost\",\n  \"certificate\": {\n    \"certificates\": [\n      \"string\"\n    ],\n    \"jwksUri\": \"https://localhost:9444/oauth2/jwks\"\n  },\n  \"alias\": \"https://localhost:9444/oauth2/token\",\n  \"claims\": {\n    \"userIdClaim\": {\n      \"uri\": \"http://wso2.org/claims/username\"\n    },\n    \"roleClaim\": {\n      \"uri\": \"http://wso2.org/claims/username\"\n    },\n    \"mappings\": [\n      {\n        \"idpClaim\": \"country\",\n        \"localClaim\": {\n          \"uri\": \"http://wso2.org/claims/username\"\n        }\n      }\n    ],\n    \"provisioningClaims\": [\n      {\n        \"claim\": {\n          \"uri\": \"http://wso2.org/claims/username\"\n        },\n        \"defaultValue\": \"sathya\"\n      }\n    ]\n  },\n  \"roles\": {\n    \"mappings\": [\n      {\n        \"idpRole\": \"google-manager\",\n        \"localRole\": \"manager\"\n      }\n    ],\n    \"outboundProvisioningRoles\": [\n      \"manager\",\n      \"hr-admin\"\n    ]\n  },\n  \"federatedAuthenticators\": {\n    \"defaultAuthenticatorId\": \"U0FNTDJBdXRoZW50aWNhdG9y\",\n    \"authenticators\": [\n      {\n        \"authenticatorId\": \"U0FNTDJBdXRoZW50aWNhdG9y\",\n        \"isEnabled\": true,\n        \"isDefault\": false,\n        \"properties\": [\n          {\n            \"key\": \"somePropertyKey\",\n            \"value\": \"somePropertyValue\"\n          }\n        ]\n      }\n    ]\n  },\n  \"provisioning\": {\n    \"jit\": {\n      \"isEnabled\": true,\n      \"scheme\": \"PROVISION_SILENTLY\",\n      \"userstore\": \"PRIMARY\",\n      \"associateLocalUser\": true,\n      \"attributeSyncMethod\": \"OVERRIDE_ALL\"\n    },\n    \"outboundConnectors\": {\n      \"defaultConnectorId\": \"U0NJTQ\",\n      \"connectors\": [\n        {\n          \"connectorId\": \"U0NJTQ\",\n          \"isEnabled\": true,\n          \"isDefault\": false,\n          \"blockingEnabled\": false,\n          \"rulesEnabled\": false,\n          \"properties\": [\n            {\n              \"key\": \"somePropertyKey\",\n              \"value\": \"somePropertyValue\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/templates",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "List identity provider templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Assign the parsed response to responseBody\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Initialize a variable to store the ID\r",
											"let googleId = null;\r",
											"\r",
											"// Loop through the templates array to find the template with the name \"google\"\r",
											"responseBody.templates.forEach(template => {\r",
											"    if (template.name === \"google\") {\r",
											"        googleId = template.id;\r",
											"    }\r",
											"});\r",
											"\r",
											"// Log the ID to the console for verification\r",
											"console.log(\"ID for 'google':\", googleId);\r",
											"\r",
											"pm.collectionVariables.set(\"template_id\", googleId);\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for templates\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate totalResults, startIndex, count, and links\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
											"    pm.expect(responseBody.totalResults).to.be.a('number');\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
											"    pm.expect(responseBody.startIndex).to.be.a('number');\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"count\");\r",
											"    pm.expect(responseBody.count).to.be.a('number');\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"links\");\r",
											"    pm.expect(responseBody.links).to.be.an('array');\r",
											"\r",
											"    // Validate templates array\r",
											"    pm.expect(responseBody).to.have.property(\"templates\");\r",
											"    pm.expect(responseBody.templates).to.be.an('array');\r",
											"\r",
											"    // Validate each template has specific properties\r",
											"    responseBody.templates.forEach(template => {\r",
											"        pm.expect(template).to.have.property(\"id\").that.is.a('string');\r",
											"        pm.expect(template).to.have.property(\"name\").that.is.a('string');\r",
											"        pm.expect(template).to.have.property(\"description\").that.is.a('string');\r",
											"        pm.expect(template).to.have.property(\"image\").that.is.a('string');\r",
											"        pm.expect(template).to.have.property(\"category\").that.is.a('string');\r",
											"        pm.expect(template).to.have.property(\"displayOrder\").that.is.a('number');\r",
											"        pm.expect(template).to.have.property(\"services\").that.is.an('array');\r",
											"        pm.expect(template).to.have.property(\"self\").that.is.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/templates",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve identity provider template by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate response structure for Google federated connector\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate main properties of the response\r",
											"    pm.expect(responseBody).to.have.property(\"id\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\");\r",
											"    pm.expect(responseBody).to.have.property(\"image\");\r",
											"    pm.expect(responseBody).to.have.property(\"category\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayOrder\");\r",
											"    pm.expect(responseBody).to.have.property(\"idp\");\r",
											"\r",
											"    // Validate structure of idp object\r",
											"    pm.expect(responseBody.idp).to.have.property(\"name\");\r",
											"    pm.expect(responseBody.idp).to.have.property(\"description\");\r",
											"    pm.expect(responseBody.idp).to.have.property(\"image\");\r",
											"    pm.expect(responseBody.idp).to.have.property(\"isPrimary\");\r",
											"    pm.expect(responseBody.idp).to.have.property(\"isFederationHub\");\r",
											"    pm.expect(responseBody.idp).to.have.property(\"homeRealmIdentifier\");\r",
											"    pm.expect(responseBody.idp).to.have.property(\"certificate\");\r",
											"    pm.expect(responseBody.idp.certificate).to.have.property(\"certificates\");\r",
											"    pm.expect(responseBody.idp.certificate).to.have.property(\"jwksUri\");\r",
											"    pm.expect(responseBody.idp).to.have.property(\"alias\");\r",
											"    pm.expect(responseBody.idp).to.have.property(\"claims\");\r",
											"\r",
											"    // Validate structure of claims object\r",
											"    pm.expect(responseBody.idp.claims).to.have.property(\"userIdClaim\");\r",
											"    pm.expect(responseBody.idp.claims).to.have.property(\"roleClaim\");\r",
											"    pm.expect(responseBody.idp.claims).to.have.property(\"mappings\");\r",
											"    pm.expect(responseBody.idp.claims).to.have.property(\"provisioningClaims\");\r",
											"\r",
											"    // Validate structure of userIdClaim and roleClaim\r",
											"    pm.expect(responseBody.idp.claims.userIdClaim).to.have.property(\"uri\");\r",
											"    pm.expect(responseBody.idp.claims.roleClaim).to.have.property(\"uri\");\r",
											"\r",
											"    // Validate structure of mappings array\r",
											"    pm.expect(responseBody.idp.claims.mappings).to.be.an('array');\r",
											"    responseBody.idp.claims.mappings.forEach(mapping => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\");\r",
											"    });\r",
											"\r",
											"    // Validate structure of provisioningClaims array\r",
											"    pm.expect(responseBody.idp.claims.provisioningClaims).to.be.an('array');\r",
											"    responseBody.idp.claims.provisioningClaims.forEach(provisioningClaim => {\r",
											"        pm.expect(provisioningClaim).to.have.property(\"claim\");\r",
											"        pm.expect(provisioningClaim.claim).to.have.property(\"uri\");\r",
											"        pm.expect(provisioningClaim).to.have.property(\"defaultValue\");\r",
											"    });\r",
											"\r",
											"    // Validate structure of roles object\r",
											"    pm.expect(responseBody.idp).to.have.property(\"roles\");\r",
											"    pm.expect(responseBody.idp.roles).to.have.property(\"mappings\");\r",
											"    pm.expect(responseBody.idp.roles).to.have.property(\"outboundProvisioningRoles\");\r",
											"\r",
											"    // Validate structure of federatedAuthenticators object\r",
											"    pm.expect(responseBody.idp).to.have.property(\"federatedAuthenticators\");\r",
											"    pm.expect(responseBody.idp.federatedAuthenticators).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.idp.federatedAuthenticators).to.have.property(\"authenticators\");\r",
											"    pm.expect(responseBody.idp.federatedAuthenticators.authenticators).to.be.an('array');\r",
											"    responseBody.idp.federatedAuthenticators.authenticators.forEach(authenticator => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\");\r",
											"        pm.expect(authenticator).to.have.property(\"isDefault\");\r",
											"        pm.expect(authenticator).to.have.property(\"properties\");\r",
											"    });\r",
											"\r",
											"    // Validate structure of provisioning object\r",
											"    pm.expect(responseBody.idp).to.have.property(\"provisioning\");\r",
											"    pm.expect(responseBody.idp.provisioning).to.have.property(\"jit\");\r",
											"    pm.expect(responseBody.idp.provisioning.jit).to.have.property(\"isEnabled\");\r",
											"    pm.expect(responseBody.idp.provisioning.jit).to.have.property(\"scheme\");\r",
											"    pm.expect(responseBody.idp.provisioning.jit).to.have.property(\"userstore\");\r",
											"    pm.expect(responseBody.idp.provisioning.jit).to.have.property(\"associateLocalUser\");\r",
											"    pm.expect(responseBody.idp.provisioning.jit).to.have.property(\"attributeSyncMethod\");\r",
											"    pm.expect(responseBody.idp.provisioning).to.have.property(\"outboundConnectors\");\r",
											"\r",
											"    // Validate structure of outboundConnectors array\r",
											"    pm.expect(responseBody.idp.provisioning.outboundConnectors).to.have.property(\"defaultConnectorId\");\r",
											"    pm.expect(responseBody.idp.provisioning.outboundConnectors.connectors).to.be.an('array')\r",
											"    responseBody.idp.provisioning.outboundConnectors.connectors.forEach(connector => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\");\r",
											"        pm.expect(connector).to.have.property(\"isDefault\");\r",
											"        pm.expect(connector).to.have.property(\"blockingEnabled\");\r",
											"        pm.expect(connector).to.have.property(\"rulesEnabled\");\r",
											"        pm.expect(connector).to.have.property(\"properties\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/templates/{{template_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"templates",
										"{{template_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the IdP template of a given template ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\": \"google\",\n\"description\": \"Google federated connector\",\n\"image\": \"google-logo-url\",\n\"category\": \"DEFAULT\",\n\"displayOrder\": 10,\n\"idp\": {\n  \"name\": \"google\",\n  \"description\": \"IdP for Google Federation\",\n  \"image\": \"google-logo-url\",\n  \"isPrimary\": false,\n  \"isFederationHub\": false,\n  \"homeRealmIdentifier\": \"localhost\",\n  \"certificate\": {\n    \"certificates\": [\n      \"string\"\n    ],\n    \"jwksUri\": \"https://localhost:9444/oauth2/jwks\"\n  },\n  \"alias\": \"https://localhost:9444/oauth2/token\",\n  \"claims\": {\n    \"userIdClaim\": {\n      \"uri\": \"http://wso2.org/claims/username\"\n    },\n    \"roleClaim\": {\n      \"uri\": \"http://wso2.org/claims/username\"\n    },\n    \"mappings\": [\n      {\n        \"idpClaim\": \"country\",\n        \"localClaim\": {\n          \"uri\": \"http://wso2.org/claims/username\"\n        }\n      }\n    ],\n    \"provisioningClaims\": [\n      {\n        \"claim\": {\n          \"uri\": \"http://wso2.org/claims/username\"\n        },\n        \"defaultValue\": \"sathya\"\n      }\n    ]\n  },\n  \"roles\": {\n    \"mappings\": [\n      {\n        \"idpRole\": \"google-manager\",\n        \"localRole\": \"manager\"\n      }\n    ],\n    \"outboundProvisioningRoles\": [\n      \"manager\",\n      \"hr-admin\"\n    ]\n  },\n  \"federatedAuthenticators\": {\n    \"defaultAuthenticatorId\": \"U0FNTDJBdXRoZW50aWNhdG9y\",\n    \"authenticators\": [\n      {\n        \"authenticatorId\": \"U0FNTDJBdXRoZW50aWNhdG9y\",\n        \"isEnabled\": true,\n        \"isDefault\": false,\n        \"properties\": [\n          {\n            \"key\": \"somePropertyKey\",\n            \"value\": \"somePropertyValue\"\n          }\n        ]\n      }\n    ]\n  },\n  \"provisioning\": {\n    \"jit\": {\n      \"isEnabled\": true,\n      \"scheme\": \"PROVISION_SILENTLY\",\n      \"userstore\": \"PRIMARY\",\n      \"associateLocalUser\": true,\n      \"attributeSyncMethod\": \"OVERRIDE_ALL\"\n    },\n    \"outboundConnectors\": {\n      \"defaultConnectorId\": \"U0NJTQ\",\n      \"connectors\": [\n        {\n          \"connectorId\": \"U0NJTQ\",\n          \"isEnabled\": true,\n          \"isDefault\": false,\n          \"blockingEnabled\": false,\n          \"rulesEnabled\": false,\n          \"properties\": [\n            {\n              \"key\": \"somePropertyKey\",\n              \"value\": \"somePropertyValue\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/templates/{{template_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"templates",
										"{{template_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an IdP template using the template ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/templates/{{template_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"templates",
										"{{template_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an identity provider by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idp_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-providers/{{identity_provider_id}}?force=false",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{identity_provider_id}}"
									],
									"query": [
										{
											"key": "force",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Idle accounts identification API",
			"item": [
				{
					"name": "Get inactive users",
					"item": [
						{
							"name": "get Inactive Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body structure\", function() {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate that the response is an array\r",
											"    pm.expect(responseBody).to.be.an('array')\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_idle_account_list\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/idle-account-identification/v1/inactive-users?inactiveAfter=2023-01-31&excludeBefore=2023-01-01",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"idle-account-identification",
										"v1",
										"inactive-users"
									],
									"query": [
										{
											"key": "inactiveAfter",
											"value": "2023-01-31"
										},
										{
											"key": "excludeBefore",
											"value": "2023-01-01"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Organization discovery API",
			"item": [
				{
					"name": "Organization Discovery",
					"item": [
						{
							"name": "Enable email domain discovery for organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"properties\": [\r\n        {\r\n            \"key\": \"emailDomain.enable\",\r\n            \"value\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organization-configs/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organization-configs",
										"discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Map discovery attributes to the organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_discovery_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for attributes\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate main attributes structure\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\");\r",
											"    pm.expect(responseBody.attributes).to.be.an('array');\r",
											"\r",
											"    // Validate structure of each attribute in the array\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"type\");\r",
											"        pm.expect(attribute).to.have.property(\"values\");\r",
											"        pm.expect(attribute.values).to.be.an('array');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"organizationId\": \"{{sub_organization_id}}\",\n  \"attributes\": [\n    {\n      \"type\": \"emailDomain\",\n      \"values\": [\n        \"abc.com\"\n      ]\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get discovery attributes of organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for organizations and attributes\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate main properties: totalResults, startIndex, count, and links\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
											"    pm.expect(responseBody).to.have.property(\"count\");\r",
											"    pm.expect(responseBody).to.have.property(\"links\");\r",
											"    pm.expect(responseBody.links).to.be.an('array');\r",
											"\r",
											"    // Validate organizations array\r",
											"    pm.expect(responseBody).to.have.property(\"organizations\");\r",
											"    pm.expect(responseBody.organizations).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    // Validate structure of each organization object\r",
											"    responseBody.organizations.forEach(organization => {\r",
											"        pm.expect(organization).to.have.property(\"organizationId\");\r",
											"        pm.expect(organization).to.have.property(\"organizationName\");\r",
											"        pm.expect(organization).to.have.property(\"attributes\");\r",
											"\r",
											"        // Validate structure of attributes array\r",
											"        pm.expect(organization.attributes).to.be.an('array');\r",
											"\r",
											"        // Validate structure of each attribute object\r",
											"        organization.attributes.forEach(attribute => {\r",
											"            pm.expect(attribute).to.have.property(\"type\");\r",
											"            pm.expect(attribute).to.have.property(\"values\");\r",
											"            pm.expect(attribute.values).to.be.an('array');\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_discovery_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get discovery attributes of the organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for attributes\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the 'attributes' array\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\");\r",
											"    pm.expect(responseBody.attributes).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    // Validate the structure of each attribute object\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"type\");\r",
											"        pm.expect(attribute).to.have.property(\"values\");\r",
											"\r",
											"        // Validate the 'values' array for each attribute\r",
											"        pm.expect(attribute.values).to.be.an('array');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_discovery_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/{{sub_organization_id}}/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"{{sub_organization_id}}",
										"discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update discovery attributes of an organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for attributes\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the 'attributes' array\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\");\r",
											"    pm.expect(responseBody.attributes).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    // Validate the structure of each attribute object\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"type\");\r",
											"        pm.expect(attribute).to.have.property(\"values\");\r",
											"\r",
											"        // Validate the 'values' array for each attribute\r",
											"        pm.expect(attribute.values).to.be.an('array');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_discovery_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"attributes\": [\n        {\n            \"type\": \"emailDomain\",\n            \"values\": [\n                \"abc.com\"\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/{{sub_organization_id}}/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"{{sub_organization_id}}",
										"discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check whether given discovery attribute exists among the organization hierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for 'available'\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the 'available' property\r",
											"    pm.expect(responseBody).to.have.property(\"available\");\r",
											"    pm.expect(responseBody.available).to.be.a('boolean');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_discovery_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"emailDomain\",\n  \"value\": \"abc.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/check-discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"check-discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete discovery attributes of an organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_discovery_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/{{sub_organization_id}}/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations",
										"{{sub_organization_id}}",
										"discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable email domain discovery",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organization-configs/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organization-configs",
										"discovery"
									]
								}
							},
							"response": []
						}
					],
					"description": "email domain discovery for organizations should be enabled in the IS."
				},
				{
					"name": "Delete an organization by using the organization's ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"grant_type\", value: \"client_credentials\" },\r",
									"            { key: \"scope\", value: \"internal_organization_delete\" } // Uses a dynamic scope\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations/{{sub_organization_id}}",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"api",
								"server",
								"v1",
								"organizations",
								"{{sub_organization_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organization discovery configuration management API",
			"item": [
				{
					"name": "Discovery",
					"item": [
						{
							"name": "Add organization discovery configuration.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for 'properties'\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the 'properties' array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\");\r",
											"    pm.expect(responseBody.properties).to.be.an('array');\r",
											"\r",
											"    // Validate the structure of each item in the 'properties' array\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\");\r",
											"        pm.expect(property).to.have.property(\"value\");\r",
											"        pm.expect(property.key).to.be.a('string');\r",
											"        pm.expect(property.value).to.be.a('string');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_config_add\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"emailDomain.enable\",\n            \"value\": true\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organization-configs/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organization-configs",
										"discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get organization discovery configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for 'properties'\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the 'properties' array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\");\r",
											"    pm.expect(responseBody.properties).to.be.an('array');\r",
											"\r",
											"    // Validate the structure of each item in the 'properties' array\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\");\r",
											"        pm.expect(property).to.have.property(\"value\");\r",
											"        pm.expect(property.key).to.be.a('string');\r",
											"        pm.expect(property.value).to.be.a('string');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_config_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organization-configs/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organization-configs",
										"discovery"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete organization discovery configuration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_organization_config_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organization-configs/discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organization-configs",
										"discovery"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Password expiring users identification API",
			"item": [
				{
					"name": "Get password expiring users",
					"item": [
						{
							"name": "Enable password expiring feature",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectors\": [\r\n        {\r\n            \"id\": \"cGFzc3dvcmRFeHBpcnk\",\r\n            \"properties\": [\r\n                {\r\n                    \"name\": \"passwordExpiry.enablePasswordExpiry\",\r\n                    \"value\": \"true\"\r\n                },\r\n                {\r\n                    \"name\": \"passwordExpiry.passwordExpiryInDays\",\r\n                    \"value\": \"30\"\r\n                },\r\n                {\r\n                    \"name\": \"passwordExpiry.skipIfNoApplicableRules\",\r\n                    \"value\": \"false\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"id\": \"cGFzc3dvcmRIaXN0b3J5\",\r\n            \"properties\": [\r\n                {\r\n                    \"name\": \"passwordHistory.count\",\r\n                    \"value\": \"5\"\r\n                },\r\n                {\r\n                    \"name\": \"passwordHistory.enable\",\r\n                    \"value\": \"false\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"operation\": \"UPDATE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-governance/UGFzc3dvcmQgUG9saWNpZXM/connectors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-governance",
										"UGFzc3dvcmQgUG9saWNpZXM",
										"connectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get password expiring users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body\", function() {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_password_expired_user_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/password-expired-users?expiredAfter=2024-03-01&excludeAfter=2024-03-30",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"password-expired-users"
									],
									"query": [
										{
											"key": "expiredAfter",
											"value": "2024-03-01"
										},
										{
											"key": "excludeAfter",
											"value": "2024-03-30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable password expiring",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_api_resource_create\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"connectors\": [\r\n        {\r\n            \"id\": \"cGFzc3dvcmRFeHBpcnk\",\r\n            \"properties\": [\r\n                {\r\n                    \"name\": \"passwordExpiry.enablePasswordExpiry\",\r\n                    \"value\": \"false\"\r\n                },\r\n                {\r\n                    \"name\": \"passwordExpiry.passwordExpiryInDays\",\r\n                    \"value\": \"30\"\r\n                },\r\n                {\r\n                    \"name\": \"passwordExpiry.skipIfNoApplicableRules\",\r\n                    \"value\": \"false\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"id\": \"cGFzc3dvcmRIaXN0b3J5\",\r\n            \"properties\": [\r\n                {\r\n                    \"name\": \"passwordHistory.count\",\r\n                    \"value\": \"5\"\r\n                },\r\n                {\r\n                    \"name\": \"passwordHistory.enable\",\r\n                    \"value\": \"false\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"operation\": \"UPDATE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-governance/UGFzc3dvcmQgUG9saWNpZXM/connectors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"identity-governance",
										"UGFzc3dvcmQgUG9saWNpZXM",
										"connectors"
									]
								}
							},
							"response": []
						}
					],
					"description": "Password expire feature should be enabled."
				}
			]
		},
		{
			"name": "Role management",
			"item": [
				{
					"name": "SCIM 2.0 Roles API (v2)",
					"item": [
						{
							"name": "Roles Endpoint",
							"item": [
								{
									"name": "Filter Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate SCIM ListResponse structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
													"    pm.expect(responseBody).to.have.property(\"itemsPerPage\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\");\r",
													"    pm.expect(responseBody).to.have.property(\"Resources\");\r",
													"\r",
													"    // Validate top-level property types\r",
													"    pm.expect(responseBody.schemas).to.be.an(\"array\");\r",
													"    pm.expect(responseBody.Resources).to.be.an(\"array\");\r",
													"\r",
													"    // Validate each resource\r",
													"    responseBody.Resources.forEach((resource) => {\r",
													"        pm.expect(resource).to.have.property(\"audience\");\r",
													"        pm.expect(resource).to.have.property(\"displayName\");\r",
													"        pm.expect(resource).to.have.property(\"meta\");\r",
													"        pm.expect(resource).to.have.property(\"permissions\");\r",
													"        pm.expect(resource).to.have.property(\"id\");\r",
													"\r",
													"        // Validate audience\r",
													"        pm.expect(resource.audience).to.have.property(\"display\");\r",
													"        pm.expect(resource.audience).to.have.property(\"type\");\r",
													"        pm.expect(resource.audience).to.have.property(\"value\");\r",
													"\r",
													"        // Validate meta\r",
													"        pm.expect(resource.meta).to.have.property(\"location\");\r",
													"\r",
													"        // Validate permissions\r",
													"        pm.expect(resource.permissions).to.be.an(\"array\");\r",
													"\r",
													"        // Optional groups\r",
													"        if (resource.groups) {\r",
													"            pm.expect(resource.groups).to.be.an(\"array\");\r",
													"            resource.groups.forEach((group) => {\r",
													"                pm.expect(group).to.have.property(\"display\");\r",
													"                pm.expect(group).to.have.property(\"value\");\r",
													"                pm.expect(group).to.have.property(\"$ref\");\r",
													"            });\r",
													"        }\r",
													"\r",
													"        // Optional users\r",
													"        if (resource.users) {\r",
													"            pm.expect(resource.users).to.be.an(\"array\");\r",
													"            resource.users.forEach((user) => {\r",
													"                pm.expect(user).to.have.property(\"display\");\r",
													"                pm.expect(user).to.have.property(\"value\");\r",
													"                pm.expect(user).to.have.property(\"$ref\");\r",
													"            });\r",
													"        }\r",
													"\r",
													"        // Optional associatedApplications\r",
													"        if (resource.associatedApplications) {\r",
													"            pm.expect(resource.associatedApplications).to.be.an(\"array\");\r",
													"            resource.associatedApplications.forEach((app) => {\r",
													"                pm.expect(app).to.have.property(\"value\");\r",
													"                pm.expect(app).to.have.property(\"$ref\");\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_role_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/v2/Roles",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"v2",
												"Roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseBody = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"role_id\", responseBody.id);\r",
													"\r",
													"// Validate status code\r",
													"pm.test(\"Response status is 201\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(201)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate SCIM Role Resource structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"audience\");\r",
													"    pm.expect(responseBody).to.have.property(\"meta\");\r",
													"    pm.expect(responseBody).to.have.property(\"displayName\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"\r",
													"    // Validate \"audience\" object\r",
													"    pm.expect(responseBody.audience).to.have.property(\"display\");\r",
													"    pm.expect(responseBody.audience).to.have.property(\"type\");\r",
													"    pm.expect(responseBody.audience).to.have.property(\"value\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_role_mgt_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:schemas:extension:2.0:Role\"\n  ],\n  \"displayName\": \"organizer_role\",\n  \"audience\": {\n    \"value\": \"{{applicationID}}\",\n    \"type\": \"application\"\n  },\n  \"users\": [\n    {\n        \"value\": \"{{user_id}}\"\n    }\n  ],\n  \"groups\": [\n    {\n        \"value\": \"{{group_id}}\"\n    }\n  ],\n  \"permissions\": [\n  \n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/v2/Roles",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"v2",
												"Roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate SCIM ListResponse structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
													"    pm.expect(responseBody).to.have.property(\"itemsPerPage\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\");\r",
													"\r",
													"    // Validate top-level property types\r",
													"    pm.expect(responseBody.schemas).to.be.an(\"array\");\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_role_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"\n],\n\"startIndex\": 1,\n\"filter\": \"displayName eq organizer_role\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/v2/Roles/.search",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"v2",
												"Roles",
												".search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Role by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate SCIM Role Resource structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"audience\");\r",
													"    pm.expect(responseBody).to.have.property(\"displayName\");\r",
													"    pm.expect(responseBody).to.have.property(\"meta\");\r",
													"    pm.expect(responseBody).to.have.property(\"permissions\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"    pm.expect(responseBody).to.have.property(\"associatedApplications\");\r",
													"\r",
													"    // Validate \"audience\" object\r",
													"    pm.expect(responseBody.audience).to.have.property(\"display\");\r",
													"    pm.expect(responseBody.audience).to.have.property(\"type\");\r",
													"    pm.expect(responseBody.audience).to.have.property(\"value\");\r",
													"\r",
													"    // Validate \"meta\" object\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\");\r",
													"\r",
													"    // Validate \"permissions\"\r",
													"    pm.expect(responseBody.permissions).to.be.an(\"array\");\r",
													"\r",
													"    // Validate \"schemas\"\r",
													"    pm.expect(responseBody.schemas).to.be.an(\"array\");\r",
													"\r",
													"    // Validate \"associatedApplications\" array\r",
													"    pm.expect(responseBody.associatedApplications).to.be.an(\"array\");\r",
													"    responseBody.associatedApplications.forEach(app => {\r",
													"        pm.expect(app).to.have.property(\"value\");\r",
													"        pm.expect(app).to.have.property(\"$ref\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_role_mgt_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/v2/Roles/{{role_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"v2",
												"Roles",
												"{{role_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role - PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate SCIM Role Resource structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"audience\");\r",
													"    pm.expect(responseBody).to.have.property(\"displayName\");\r",
													"    pm.expect(responseBody).to.have.property(\"meta\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"\r",
													"    // Validate \"audience\" object\r",
													"    pm.expect(responseBody.audience).to.have.property(\"display\");\r",
													"    pm.expect(responseBody.audience).to.have.property(\"type\");\r",
													"    pm.expect(responseBody.audience).to.have.property(\"value\");\r",
													"\r",
													"    // Validate \"meta\" object\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_role_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"displayName\": \"loginRole\",\n  \"users\": [\n\n  ],\n  \"groups\": [\n\n  ],\n  \"permissions\": [\n\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/v2/Roles/{{role_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"v2",
												"Roles",
												"{{role_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role - PATCH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate SCIM Role Resource structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"audience\");\r",
													"    pm.expect(responseBody).to.have.property(\"displayName\");\r",
													"    pm.expect(responseBody).to.have.property(\"meta\");\r",
													"    pm.expect(responseBody).to.have.property(\"permissions\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"    pm.expect(responseBody).to.have.property(\"associatedApplications\");\r",
													"\r",
													"    // Validate \"audience\" object\r",
													"    pm.expect(responseBody.audience).to.have.property(\"display\");\r",
													"    pm.expect(responseBody.audience).to.have.property(\"type\");\r",
													"    pm.expect(responseBody.audience).to.have.property(\"value\");\r",
													"\r",
													"    // Validate \"meta\" object\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\");\r",
													"\r",
													"    // Validate \"permissions\"\r",
													"    pm.expect(responseBody.permissions).to.be.an(\"array\");\r",
													"\r",
													"    // Validate \"associatedApplications\"\r",
													"    pm.expect(responseBody.associatedApplications).to.be.an(\"array\");\r",
													"    responseBody.associatedApplications.forEach(app => {\r",
													"        pm.expect(app).to.have.property(\"value\");\r",
													"        pm.expect(app).to.have.property(\"$ref\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_role_mgt_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"schemas\": [\n    \"urn:ietf:params:scim:schemas:extension:2.0:Role\"\n  ],\n  \"Operations\": [ ]\n}\n  \n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/v2/Roles/{{role_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"scim2",
												"v2",
												"Roles",
												"{{role_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Server management",
			"item": [
				{
					"name": "Identity governance",
					"item": [
						{
							"name": "Identity governance API",
							"item": [
								{
									"name": "Management",
									"item": [
										{
											"name": "Retrieve governance connector categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate identity governance categories and connectors structure\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate that the response is an array\r",
															"    pm.expect(responseBody).to.be.an(\"array\");\r",
															"\r",
															"    responseBody.forEach((category) => {\r",
															"        // Validate top-level properties of each category\r",
															"        pm.expect(category).to.have.property(\"id\");\r",
															"        pm.expect(category).to.have.property(\"name\");\r",
															"        pm.expect(category).to.have.property(\"self\");\r",
															"        pm.expect(category).to.have.property(\"connectors\");\r",
															"\r",
															"        pm.expect(category.connectors).to.be.an(\"array\");\r",
															"\r",
															"        // Validate each connector within the category\r",
															"        category.connectors.forEach((connector) => {\r",
															"            pm.expect(connector).to.have.property(\"id\");\r",
															"            pm.expect(connector).to.have.property(\"self\");\r",
															"        });\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_governance_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-governance/",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v1",
														"identity-governance",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve governance connectors of a category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate User Onboarding connector structure\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties\r",
															"    pm.expect(responseBody).to.have.property(\"name\");\r",
															"    pm.expect(responseBody).to.have.property(\"connectors\");\r",
															"\r",
															"    pm.expect(responseBody.connectors).to.be.an(\"array\");\r",
															"\r",
															"    // Validate each connector\r",
															"    responseBody.connectors.forEach((connector) => {\r",
															"        pm.expect(connector).to.have.property(\"id\");\r",
															"        pm.expect(connector).to.have.property(\"name\");\r",
															"        pm.expect(connector).to.have.property(\"category\");\r",
															"        pm.expect(connector).to.have.property(\"friendlyName\");\r",
															"        pm.expect(connector).to.have.property(\"order\");\r",
															"        pm.expect(connector).to.have.property(\"subCategory\");\r",
															"        pm.expect(connector).to.have.property(\"properties\");\r",
															"\r",
															"        pm.expect(connector.properties).to.be.an(\"array\");\r",
															"\r",
															"        // Validate each property inside the connector\r",
															"        connector.properties.forEach((property) => {\r",
															"            pm.expect(property).to.have.property(\"name\");\r",
															"            pm.expect(property).to.have.property(\"value\");\r",
															"            pm.expect(property).to.have.property(\"displayName\");\r",
															"            pm.expect(property).to.have.property(\"description\");\r",
															"            pm.expect(property).to.have.property(\"meta\");\r",
															"\r",
															"            // Validate meta properties\r",
															"            pm.expect(property.meta).to.have.property(\"groupID\");\r",
															"        });\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"catergory_id\", \"VXNlciBPbmJvYXJkaW5n\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_governance_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-governance/{{catergory_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v1",
														"identity-governance",
														"{{catergory_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve governance connectors of a category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate User Onboarding connectors and properties\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties\r",
															"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
															"    \r",
															"    // Iterate through connectors\r",
															"    responseBody.forEach((connector) => {\r",
															"        pm.expect(connector).to.have.property(\"id\");\r",
															"        pm.expect(connector).to.have.property(\"name\");\r",
															"        pm.expect(connector).to.have.property(\"category\");\r",
															"        pm.expect(connector).to.have.property(\"friendlyName\");\r",
															"        pm.expect(connector).to.have.property(\"order\");\r",
															"        pm.expect(connector).to.have.property(\"subCategory\");\r",
															"        pm.expect(connector).to.have.property(\"properties\");\r",
															"        \r",
															"        pm.expect(connector.properties).to.be.an(\"array\");\r",
															"        \r",
															"        // Validate properties within each connector\r",
															"        connector.properties.forEach((property) => {\r",
															"            pm.expect(property).to.have.property(\"name\");\r",
															"            pm.expect(property).to.have.property(\"value\");\r",
															"            pm.expect(property).to.have.property(\"displayName\");\r",
															"            pm.expect(property).to.have.property(\"description\");\r",
															"            pm.expect(property).to.have.property(\"meta\");\r",
															"            \r",
															"            // Validate meta properties\r",
															"            pm.expect(property.meta).to.have.property(\"groupID\");\r",
															"        });\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_governance_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-governance/{{catergory_id}}/connectors",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v1",
														"identity-governance",
														"{{catergory_id}}",
														"connectors"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve governance connector",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"connector_id\", \"c2VsZi1zaWduLXVw\");\r",
															"\r",
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_governance_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate Self Registration properties\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties for the response body\r",
															"    pm.expect(responseBody).to.have.property(\"id\");\r",
															"    pm.expect(responseBody).to.have.property(\"name\");\r",
															"    pm.expect(responseBody).to.have.property(\"category\");\r",
															"    pm.expect(responseBody).to.have.property(\"friendlyName\");\r",
															"    pm.expect(responseBody).to.have.property(\"order\");\r",
															"    pm.expect(responseBody).to.have.property(\"subCategory\");\r",
															"    pm.expect(responseBody).to.have.property(\"properties\");\r",
															"    \r",
															"    pm.expect(responseBody.properties).to.be.an(\"array\");\r",
															"\r",
															"    // Validate properties within the \"self-sign-up\" connector\r",
															"    responseBody.properties.forEach((property) => {\r",
															"        pm.expect(property).to.have.property(\"name\");\r",
															"        pm.expect(property).to.have.property(\"value\");\r",
															"        pm.expect(property).to.have.property(\"displayName\");\r",
															"        pm.expect(property).to.have.property(\"description\");\r",
															"        pm.expect(property).to.have.property(\"meta\");\r",
															"\r",
															"        // Validate meta properties\r",
															"        pm.expect(property.meta).to.have.property(\"type\");\r",
															"        pm.expect(property.meta).to.have.property(\"groupID\");\r",
															"        \r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-governance/{{catergory_id}}/connectors/{{connector_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v1",
														"identity-governance",
														"{{catergory_id}}",
														"connectors",
														"{{connector_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch governance connector",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_governance_update\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"operation\": \"UPDATE\",\n\"properties\": [\n  {\n    \"name\": \"suspension.notification.enable\",\n    \"value\": \"false\"\n  }\n]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/identity-governance/{{catergory_id}}/connectors/{{connector_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v1",
														"identity-governance",
														"{{catergory_id}}",
														"connectors",
														"{{connector_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Keystore management API",
					"item": [
						{
							"name": "Certificates",
							"item": [
								{
									"name": "Retrieve the list of certificate aliases",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate certificate array structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate the response is an array\r",
													"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Iterate through each object in the array and validate properties\r",
													"    responseBody.forEach((certificateEntry) => {\r",
													"        pm.expect(certificateEntry).to.have.property(\"alias\");\r",
													"        pm.expect(certificateEntry).to.have.property(\"certificate\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_keystore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/keystores/certs",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"keystores",
												"certs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload the certificate with the given alias",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.execution.skipRequest();"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"alias\": \"newcert\",\n\"certificate\": \"MIIDADCCAeigAwIBAgIEnRKL8zANBgkqhkiG9w0BAQQFADBCMREwDwYDVQQDDAh3c28yLmNvbTENMAsGA1UECwwETm9uZTEPMA0GA1UECgwGTm9uZSBMMQ0wCwYDVQQGEwROb25lMB4XDTE5MDkyMjA5MzgyM1oXDTI5MTAxOTA5MzgyM1owQjERMA8GA1UEAwwId3NvMi5jb20xDTALBgNVBAsMBE5vbmUxDzANBgNVBAoMBk5vbmUgTDENMAsGA1UEBhMETm9uZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMY6diX4CyRNARLYQq5tLnjSMbCh4waM7EDniKeZuQAKVdBpzgvan+G8QrgfJqZ7IfYCLFKSQIpblMiULnaf0Zy1VqQG+QNh+CHpMJ0jRPAKWUXQrgzFu24+araRei9v9VBHVwaNVp1uHKx9cL4XAXdIRv+ZDCTrkvJJUPxrNgF14UIUPsNIZF5perptTUUaudyDiGug80baTXxuEf7gJh6LcT5UIJF/moWKhLYhKEFa7nq7sJLcGIUKRlIxF487rTe1zZzN9RsdpH5d11DnltThOdO1mF9BX1U6F3yuJoOlsIcHIeab0XED0jw8PFi5+LT7EOe6xzaB9sL2DB38o8sCAwEAATANBgkqhkiG9w0BAQQFAAOCAQEArqGJfCOIjY5sFhO6Fd5x3dM6OrA7QcjxzNxsNwO7e2zFr4SHJqekfErZxFTLGWMpyMakvTFAk3e/ShvDQ71nBxYl6Rbdco0f2SUI2ig3lQR5ZTxPmxSSNNbX4K2ptAgzikmSjc6lrGRUnMkMKetClDRsOf9banuDImB2aIn2STmFR2U5duui2oEep3C5mlxregBXI8xEWF6VpXzeEz2AEOaKWOPLDTQsBWxSFi9uVVkD9GwN7yJCXWF81enCpQ4U1PHVhAdS40HTXbis/R0+ykDdkDLmbu3Oa+F2uyWnarAR9rKVfjNovXvJPX4D+5/wipDyXUOO58tyF0342JuIdA==\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/keystores/certs",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"keystores",
												"certs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve the public certificate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/pkix-cert"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/keystores/certs/public",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"keystores",
												"certs",
												"public"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve the certificate of the provided alias",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"alias\", \"cn_microsec_eszigno_root_ca_2009,o_microsec_ltd,l_budapest,c_hu\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_keystore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/pkix-cert"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/keystores/certs/{{alias}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"keystores",
												"certs",
												"{{alias}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve the list of certificate aliases from the client truststore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate certificate array structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate the response is an array\r",
													"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
													"\r",
													"    // Iterate through each object in the array and validate properties\r",
													"    responseBody.forEach((certificateEntry) => {\r",
													"        pm.expect(certificateEntry).to.have.property(\"alias\");\r",
													"        pm.expect(certificateEntry).to.have.property(\"certificate\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_keystore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/keystores/client-certs",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"keystores",
												"client-certs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve the certificate of the provided alias",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_keystore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/pkix-cert"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/keystores/client-certs/{{alias}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"keystores",
												"client-certs",
												"{{alias}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the certificate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.execution.skipRequest();"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/keystores/certs/{alias}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"keystores",
												"certs",
												"{alias}"
											]
										}
									},
									"response": []
								}
							],
							"description": "## 2\\. Upload the certificate with the given alias\n\nThis REST API can be used to upload the certifate to the tenant keystore. This API is not supported for super tenant.\n\nEndFragment"
						}
					]
				},
				{
					"name": "UserStore Management Rest API (v1)",
					"item": [
						{
							"name": "User Store",
							"item": [
								{
									"name": "Add a secondary user store",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function() {\r",
													"  var responseBody = pm.response.json();\r",
													"\r",
													"\r",
													"pm.collectionVariables.set(\"userstore_id\", responseBody.id);\r",
													"\r",
													"\r",
													"// Validate status code\r",
													"pm.test(\"Response status is 201\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(201)\r",
													"});\r",
													"\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Validate user store object structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeName\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeId\");\r",
													"    pm.expect(responseBody).to.have.property(\"description\");\r",
													"\r",
													"\r",
													"    // Validate properties array\r",
													"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.properties.forEach((property) => {\r",
													"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
													"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
													"    });\r",
													"\r",
													"\r",
													"    // Validate claimAttributeMappings array\r",
													"    pm.expect(responseBody).to.have.property(\"claimAttributeMappings\").that.is.an(\"array\");\r",
													"    responseBody.claimAttributeMappings.forEach((mapping) => {\r",
													"        pm.expect(mapping).to.have.property(\"claimURI\");\r",
													"        pm.expect(mapping).to.have.property(\"mappedAttribute\");\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"}, 20000);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_create\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"This will be the userstore I using in this collection\",\n    \"name\": \"MyUserStore\",\n    \"properties\": [\n        {\n            \"name\": \"IsBulkImportSupported\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"PasswordDigest\",\n            \"value\": \"SHA-256\"\n        },\n        {\n            \"name\": \"Hash.Algorithm.Properties\",\n            \"value\": \"{}\"\n        },\n        {\n            \"name\": \"MultiAttributeSeparator\",\n            \"value\": \",\"\n        },\n        {\n            \"name\": \"StoreSaltedPassword\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"maxActive\",\n            \"value\": \"40\"\n        },\n        {\n            \"name\": \"minIdle\",\n            \"value\": \"5\"\n        },\n        {\n            \"name\": \"maxIdle\",\n            \"value\": \"6\"\n        },\n        {\n            \"name\": \"maxWait\",\n            \"value\": \"60000\"\n        },\n        {\n            \"name\": \"testWhileIdle\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"timeBetweenEvictionRunsMillis\",\n            \"value\": \"5000\"\n        },\n        {\n            \"name\": \"minEvictableIdleTimeMillis\",\n            \"value\": \"60000\"\n        },\n        {\n            \"name\": \"MaxUserNameListLength\",\n            \"value\": \"100\"\n        },\n        {\n            \"name\": \"MaxRoleNameListLength\",\n            \"value\": \"100\"\n        },\n        {\n            \"name\": \"GroupIDEnabled\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"UserRolesCacheEnabled\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenants\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"validationQuery\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"validationInterval\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"defaultAutoCommit\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"defaultReadOnly\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"defaultTransactionIsolation\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"defaultCatalog\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"initialSize\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"testOnReturn\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"testOnBorrow\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"validatorClassName\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"numTestsPerEvictionRun\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"accessToUnderlyingConnectionAllowed\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"removeAbandoned\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"removeAbandonedTimeout\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"logAbandoned\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"connectionProperties\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"jdbcInterceptors\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"jmxEnabled\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"fairQueue\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"abandonWhenPercentageFull\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"maxAge\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"useEquals\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"suspectTimeout\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"validationQueryTimeout\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"alternateUsernameAllowed\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"commitOnReturn\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"rollbackOnReturn\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"CountRetrieverClass\",\n            \"value\": \"org.wso2.carbon.identity.user.store.count.jdbc.JDBCUserStoreCountRetriever\"\n        },\n        {\n            \"name\": \"StoreUserAttributeValueAsUnicode\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"SelectUserSQL\",\n            \"value\": \"SELECT * FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserNameSQL\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserIDSQL\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserWithIDSQL\",\n            \"value\": \"SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME, UM_USER.UM_USER_PASSWORD, UM_USER.UM_SALT_VALUE, UM_USER.UM_REQUIRE_CHANGE, UM_USER.UM_CHANGED_TIME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE =? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserSQLCaseInsensitive\",\n            \"value\": \"SELECT * FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserNameSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserWithIDSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME, UM_USER.UM_USER_PASSWORD, UM_USER.UM_SALT_VALUE, UM_USER.UM_REQUIRE_CHANGE, UM_USER.UM_CHANGED_TIME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND LOWER(UM_USER_ATTRIBUTE.UM_ATTR_VALUE) =LOWER(?) AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserIDFromUserNameSQL\",\n            \"value\": \"SELECT UM_USER_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserNameFromUserIDSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserIDFromUserNameSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetRoleListSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_TENANT_ID, UM_SHARED_ROLE FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID=? AND UM_SHARED_ROLE ='0' ORDER BY UM_ROLE_NAME\"\n        },\n        {\n            \"name\": \"GetSharedRoleListSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_TENANT_ID, UM_SHARED_ROLE FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_SHARED_ROLE ='1' ORDER BY UM_ROLE_NAME\"\n        },\n        {\n            \"name\": \"GetSharedRoleListSQLH2\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_TENANT_ID, UM_SHARED_ROLE FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_SHARED_ROLE =TRUE ORDER BY UM_ROLE_NAME\"\n        },\n        {\n            \"name\": \"UserFilterSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterWithIDSQL\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterWithIDWithEscapeSQL\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterSQLWithEscape\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterWithIDSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterWithIDSQLCaseInsensitiveWithEscape\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterSQLCaseInsensitiveWithEscape\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserRoleSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UserRoleWithIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_ID=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UserRoleExistSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?\"\n        },\n        {\n            \"name\": \"UserRoleExistWithIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_ID=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?\"\n        },\n        {\n            \"name\": \"UserRoleSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserRoleExistSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?\"\n        },\n        {\n            \"name\": \"UserSharedRoleSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME = ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? \"\n        },\n        {\n            \"name\": \"UserSharedRoleWithIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_ID = ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? \"\n        },\n        {\n            \"name\": \"UserSharedRoleSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE LOWER(UM_USER.UM_USER_NAME) = LOWER(?) AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? \"\n        },\n        {\n            \"name\": \"IsRoleExistingSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListOfRoleSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListOfRoleFilterSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListOfRoleFilterWithIDSQL\",\n            \"value\": \"SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListOfSharedRoleSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID\"\n        },\n        {\n            \"name\": \"GetUserListOfSharedRoleFilterSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID\"\n        },\n        {\n            \"name\": \"GetUserListOfSharedRoleFilterWithIDSQL\",\n            \"value\": \"SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID\"\n        },\n        {\n            \"name\": \"IsUserExistingSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserExistingWithIDSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserNameExistingSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserExistingSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserExistingSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertiesForProfileSQL\",\n            \"value\": \"SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertiesForProfileWithIDSQL\",\n            \"value\": \"SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_ID=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertiesForProfileSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertyForProfileSQL\",\n            \"value\": \"SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_NAME=? AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertyForProfileWithIDSQL\",\n            \"value\": \"SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_ID=? AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertyForProfileSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserLisForPropertySQL\",\n            \"value\": \"SELECT DISTINCT UM_USER_NAME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE LIKE ? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForPropertySQLWithEscape\",\n            \"value\": \"SELECT DISTINCT UM_USER_NAME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE LIKE ? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForClaimValueSQL\",\n            \"value\": \"SELECT DISTINCT UM_USER_NAME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE =? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserLisForPropertyWithIDSQL\",\n            \"value\": \"SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE LIKE ? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForClaimValueWithIDSQL\",\n            \"value\": \"SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE =? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForPropertyWithIDSQLCaseInsensitive\",\n            \"value\": \"SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND LOWER(UM_USER_ATTRIBUTE.UM_ATTR_VALUE) LIKE LOWER(?) AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForClaimValueWithIDSQLCaseInsensitive\",\n            \"value\": \"SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND LOWER(UM_USER_ATTRIBUTE.UM_ATTR_VALUE)=LOWER(?) AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetProfileNamesSQL\",\n            \"value\": \"SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserProfileNamesSQL\",\n            \"value\": \"SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserProfileNamesWithIDSQL\",\n            \"value\": \"SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserProfileNamesSQLCaseInsensitive\",\n            \"value\": \"SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserIDFromUserNameSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserIDFromUserNameWithIDSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserIDFromUserNameSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserNameFromTenantIDSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetTenantIDFromUserNameSQL\",\n            \"value\": \"SELECT UM_TENANT_ID FROM UM_USER WHERE UM_USER_NAME=?\"\n        },\n        {\n            \"name\": \"GetTenantIDFromUserNameSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_TENANT_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?)\"\n        },\n        {\n            \"name\": \"AddUserSQL\",\n            \"value\": \"INSERT INTO UM_USER (UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME, UM_TENANT_ID) VALUES (?, ?, ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"AddUserWithIDSQL\",\n            \"value\": \"INSERT INTO UM_USER (UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME, UM_TENANT_ID) VALUES (?, ?, ?, ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQL\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleWithIDSQL\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQLCaseInsensitive\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddRoleSQL\",\n            \"value\": \"INSERT INTO UM_ROLE (UM_ROLE_NAME, UM_TENANT_ID) VALUES (?, ?)\"\n        },\n        {\n            \"name\": \"AddSharedRoleSQL\",\n            \"value\": \"UPDATE UM_ROLE SET UM_SHARED_ROLE = ? WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQL\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddRoleToUserWithIDSQL\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddSharedRoleToUserSQL\",\n            \"value\": \"INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?, ?)\"\n        },\n        {\n            \"name\": \"AddSharedRoleToUserWithIDSQL\",\n            \"value\": \"INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?, ?)\"\n        },\n        {\n            \"name\": \"AddSharedRoleToUserSQLCaseInsensitive\",\n            \"value\": \"INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), ?, ?)\"\n        },\n        {\n            \"name\": \"RemoveUserFromSharedRoleSQL\",\n            \"value\": \"DELETE FROM UM_SHARED_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_USER_TENANT_ID=? AND UM_ROLE_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"RemoveUserFromSharedRoleWithIDSQL\",\n            \"value\": \"DELETE FROM UM_SHARED_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_USER_TENANT_ID=? AND UM_ROLE_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"RemoveUserFromRoleSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveUserFromRoleSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveUserFromRoleWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveUserFromRoleSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveRoleFromUserSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveRoleFromUserWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveRoleFromUserSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteRoleSQL\",\n            \"value\": \"DELETE FROM UM_ROLE WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"OnDeleteRoleRemoveUserRoleMappingSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserSQL\",\n            \"value\": \"DELETE FROM UM_USER WHERE UM_USER_NAME = ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER WHERE LOWER(UM_USER_NAME) = LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserRoleMappingSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserRoleMappingWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"CountUsersWithClaimSQL\",\n            \"value\": \"SELECT COUNT(UM_USER_ID) AS RESULT FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME = ? AND UM_TENANT_ID = ? AND UM_ATTR_VALUE LIKE ? AND UM_PROFILE_ID = ?\"\n        },\n        {\n            \"name\": \"CountInternalRolesSQL\",\n            \"value\": \"SELECT COUNT(UM_ID) AS RESULT FROM UM_HYBRID_ROLE WHERE UM_ROLE_NAME NOT LIKE 'Application%' AND UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"CountApplicationRolesSQL\",\n            \"value\": \"SELECT COUNT(UM_ID) AS RESULT FROM UM_HYBRID_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"CountRolesSQL\",\n            \"value\": \"SELECT COUNT(UM_ROLE_NAME) AS RESULT FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"CountUsersSQL\",\n            \"value\": \"SELECT COUNT(UM_USER_NAME) AS RESULT FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserAttributeSQL\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"CountUsersWithFilterSQL\",\n            \"value\": \"SELECT COUNT(UM_USER_NAME) AS RESULT FROM UM_USER WHERE UM_USER_NAME = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserAttributeWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER WHERE UM_USER_ID = ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserAttributeSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateUserPasswordSQL\",\n            \"value\": \"UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE UM_USER_NAME= ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateUserPasswordWithIDSQL\",\n            \"value\": \"UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE UM_USER_ID= ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateUserPasswordSQLCaseInsensitive\",\n            \"value\": \"UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE LOWER(UM_USER_NAME)= LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateRoleNameSQL\",\n            \"value\": \"UPDATE UM_ROLE set UM_ROLE_NAME=? WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetGroupIDFromGroupNameSQL\",\n            \"value\": \"SELECT UM_ROLE_UUID FROM UM_ROLE WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"GetGroupNameFromGroupIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_ROLE WHERE UM_ROLE_UUID = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"GetGroupFromGroupNameSQL\",\n            \"value\": \"SELECT UM_ROLE_UUID, UM_CREATED_TIME, UM_LAST_MODIFIED FROM UM_ROLE WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"GetGroupFromGroupIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_CREATED_TIME, UM_LAST_MODIFIED FROM UM_ROLE WHERE UM_ROLE_UUID = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"AddGroupSQL\",\n            \"value\": \"INSERT INTO UM_ROLE (UM_ROLE_UUID, UM_ROLE_NAME, UM_TENANT_ID, UM_CREATED_TIME, UM_LAST_MODIFIED) VALUES (?, ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"UpdateGroupNameSQL\",\n            \"value\": \"UPDATE UM_ROLE set UM_ROLE_NAME = ?, UM_LAST_MODIFIED = ? WHERE UM_ROLE_UUID = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"AddUserPropertySQL\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"AddUserPropertyWithIDSQL\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"UpdateUserPropertySQL\",\n            \"value\": \"UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateUserPropertyWithIDSQL\",\n            \"value\": \"UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserPropertiesWithIDSQL\",\n            \"value\": \"SELECT * FROM UM_USER_ATTRIBUTE WITH (UPDLOCK) WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) ORDER BY UM_ID;\"\n        },\n        {\n            \"name\": \"UpdateUserPropertySQLCaseInsensitive\",\n            \"value\": \"UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserPropertySQL\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserPropertyWWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserPropertySQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenantsSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?\"\n        },\n        {\n            \"name\": \"UserIDUniqueAcrossTenantsSQLWithID\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=?\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenantsSQLWithID\",\n            \"value\": \"SELECT UM_ID FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME=? AND UM_ATTR_VALUE=?\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenantsSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?)\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenantsSQLCaseInsensitiveWithID\",\n            \"value\": \"SELECT UM_ID FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME=? AND LOWER(UM_ATTR_VALUE)=LOWER(?)\"\n        },\n        {\n            \"name\": \"IsDomainExistingSQL\",\n            \"value\": \"SELECT UM_DOMAIN_ID FROM UM_DOMAIN WHERE UM_DOMAIN_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddDomainSQL\",\n            \"value\": \"INSERT INTO UM_DOMAIN (UM_DOMAIN_NAME, UM_TENANT_ID) VALUES (?, ?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQL-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(?)\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQL-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), (?)\"\n        },\n        {\n            \"name\": \"AddUserPropertySQL-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), (?), (?), (?), (?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQLCaseInsensitive-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(?)\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQLCaseInsensitive-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), (?)\"\n        },\n        {\n            \"name\": \"AddUserPropertySQLCaseInsensitive-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), (?), (?), (?), (?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQL-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT UU.UM_ID, UR.UM_ID, ? FROM UM_USER UU, UM_ROLE UR WHERE UU.UM_USER_NAME=? AND UU.UM_TENANT_ID=? AND UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQL-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT UR.UM_ID, UU.UM_ID, ? FROM UM_ROLE UR, UM_USER UU WHERE UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=? AND UU.UM_USER_NAME=? AND UU.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddUserPropertySQL-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT UM_ID, ?, ?, ?, ? FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQLCaseInsensitive-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT UU.UM_ID, UR.UM_ID, ? FROM UM_USER UU, UM_ROLE UR WHERE LOWER(UU.UM_USER_NAME)=LOWER(?) AND UU.UM_TENANT_ID=? AND UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQLCaseInsensitive-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT UR.UM_ID, UU.UM_ID, ? FROM UM_ROLE UR, UM_USER UU WHERE UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=? AND LOWER(UU.UM_USER_NAME)=LOWER(?) AND UU.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddUserPropertySQLCaseInsensitive-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT UM_ID, ?, ?, ?, ? FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"ClaimOperationsSupported\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"url\",\n            \"value\": \"https://connector.io\"\n        },\n        {\n            \"name\": \"userName\",\n            \"value\": \"Connector1\"\n        },\n        {\n            \"name\": \"password\",\n            \"value\": \"12345\"\n        },\n        {\n            \"name\": \"driverName\",\n            \"value\": \"Driver1\"\n        },\n        {\n            \"name\": \"Disabled\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"ReadOnly\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"DisplayNameAttribute\",\n            \"value\": \"UserStore\"\n        },\n        {\n            \"name\": \"ReadGroups\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"WriteGroups\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"UsernameJavaRegEx\",\n            \"value\": \"Java\"\n        },\n        {\n            \"name\": \"UsernameJavaScriptRegEx\",\n            \"value\": \"JavaScript\"\n        },\n        {\n            \"name\": \"UsernameJavaRegExViolationErrorMsg\",\n            \"value\": \"Username pattern policy violated.\"\n        },\n        {\n            \"name\": \"PasswordJavaRegEx\",\n            \"value\": \"12345678\"\n        },\n        {\n            \"name\": \"PasswordJavaScriptRegEx\",\n            \"value\": \"87654321\"\n        },\n        {\n            \"name\": \"PasswordJavaRegExViolationErrorMsg\",\n            \"value\": \"Password pattern policy violated\"\n        },\n        {\n            \"name\": \"RolenameJavaRegEx\",\n            \"value\": \"Java\"\n        },\n        {\n            \"name\": \"RolenameJavaScriptRegEx\",\n            \"value\": \"JavaScript\"\n        },\n        {\n            \"name\": \"CaseInsensitiveUsername\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"UseCaseSensitiveUsernameForCacheKeys\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"UniqueID\",\n            \"value\": \"\"\n        }\n    ],\n    \"typeId\": \"VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg\",\n    \"claimAttributeMappings\": [\n        {\n            \"claimURI\": \"http://wso2.org/claims/username\",\n            \"mappedAttribute\": \"username\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve the configurations of primary user store",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status code\r",
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"typeName\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeId\");\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    pm.expect(responseBody).to.have.property(\"className\");\r",
													"    pm.expect(responseBody).to.have.property(\"isLocal\");\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
													"    responseBody.properties.forEach(property => {\r",
													"        pm.expect(property).to.have.property(\"name\");\r",
													"        pm.expect(property).to.have.property(\"value\");\r",
													"    });\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"claimAttributeMappings\").that.is.an(\"array\");\r",
													"    responseBody.claimAttributeMappings.forEach(mapping => {\r",
													"        pm.expect(mapping).to.have.property(\"claimURI\");\r",
													"        pm.expect(mapping).to.have.property(\"mappedAttribute\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/primary",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"primary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve the configurations of secondary user store based on its domain id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function() {\r",
													"// Validate status code\r",
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"typeName\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeId\");\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    pm.expect(responseBody).to.have.property(\"className\");\r",
													"    pm.expect(responseBody).to.have.property(\"isLocal\");\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
													"    responseBody.properties.forEach(property => {\r",
													"        pm.expect(property).to.have.property(\"name\");\r",
													"        pm.expect(property).to.have.property(\"value\");\r",
													"    });\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"claimAttributeMappings\").that.is.an(\"array\");\r",
													"    responseBody.claimAttributeMappings.forEach(mapping => {\r",
													"        pm.expect(mapping).to.have.property(\"claimURI\");\r",
													"        pm.expect(mapping).to.have.property(\"mappedAttribute\");\r",
													"    });\r",
													"});\r",
													"\r",
													"}, 8000);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/{{userstore_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"{{userstore_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a user store by its domain id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function() {\r",
													"// Validate status code\r",
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Validate user store object structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeName\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeId\");\r",
													"    pm.expect(responseBody).to.have.property(\"description\");\r",
													"\r",
													"    // Validate properties array\r",
													"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.properties.forEach((property) => {\r",
													"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
													"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
													"    });\r",
													"\r",
													"    // Validate claimAttributeMappings array\r",
													"    pm.expect(responseBody).to.have.property(\"claimAttributeMappings\").that.is.an(\"array\");\r",
													"    responseBody.claimAttributeMappings.forEach((mapping) => {\r",
													"        pm.expect(mapping).to.have.property(\"claimURI\");\r",
													"        pm.expect(mapping).to.have.property(\"mappedAttribute\");\r",
													"    });\r",
													"});\r",
													"\r",
													"}, 8000);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"typeId\": \"VW5pcXVlSURKREJDVXNlclN0b3JlTWFuYWdlcg\",\n\"description\": \"Some description about the user store.\",\n\"name\": \"MyUserStore\",\n\"properties\": [\n   {\n            \"name\": \"IsBulkImportSupported\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"PasswordDigest\",\n            \"value\": \"SHA-256\"\n        },\n        {\n            \"name\": \"Hash.Algorithm.Properties\",\n            \"value\": \"{}\"\n        },\n        {\n            \"name\": \"MultiAttributeSeparator\",\n            \"value\": \",\"\n        },\n        {\n            \"name\": \"StoreSaltedPassword\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"maxActive\",\n            \"value\": \"40\"\n        },\n        {\n            \"name\": \"minIdle\",\n            \"value\": \"5\"\n        },\n        {\n            \"name\": \"maxIdle\",\n            \"value\": \"6\"\n        },\n        {\n            \"name\": \"maxWait\",\n            \"value\": \"60000\"\n        },\n        {\n            \"name\": \"testWhileIdle\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"timeBetweenEvictionRunsMillis\",\n            \"value\": \"5000\"\n        },\n        {\n            \"name\": \"minEvictableIdleTimeMillis\",\n            \"value\": \"60000\"\n        },\n        {\n            \"name\": \"MaxUserNameListLength\",\n            \"value\": \"100\"\n        },\n        {\n            \"name\": \"MaxRoleNameListLength\",\n            \"value\": \"100\"\n        },\n        {\n            \"name\": \"GroupIDEnabled\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"UserRolesCacheEnabled\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenants\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"validationQuery\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"validationInterval\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"defaultAutoCommit\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"defaultReadOnly\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"defaultTransactionIsolation\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"defaultCatalog\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"initialSize\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"testOnReturn\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"testOnBorrow\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"validatorClassName\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"numTestsPerEvictionRun\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"accessToUnderlyingConnectionAllowed\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"removeAbandoned\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"removeAbandonedTimeout\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"logAbandoned\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"connectionProperties\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"jdbcInterceptors\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"jmxEnabled\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"fairQueue\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"abandonWhenPercentageFull\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"maxAge\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"useEquals\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"suspectTimeout\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"validationQueryTimeout\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"alternateUsernameAllowed\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"commitOnReturn\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"rollbackOnReturn\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"CountRetrieverClass\",\n            \"value\": \"org.wso2.carbon.identity.user.store.count.jdbc.JDBCUserStoreCountRetriever\"\n        },\n        {\n            \"name\": \"StoreUserAttributeValueAsUnicode\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"SelectUserSQL\",\n            \"value\": \"SELECT * FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserNameSQL\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserIDSQL\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserWithIDSQL\",\n            \"value\": \"SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME, UM_USER.UM_USER_PASSWORD, UM_USER.UM_SALT_VALUE, UM_USER.UM_REQUIRE_CHANGE, UM_USER.UM_CHANGED_TIME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE =? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserSQLCaseInsensitive\",\n            \"value\": \"SELECT * FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserNameSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserWithIDSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME, UM_USER.UM_USER_PASSWORD, UM_USER.UM_SALT_VALUE, UM_USER.UM_REQUIRE_CHANGE, UM_USER.UM_CHANGED_TIME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND LOWER(UM_USER_ATTRIBUTE.UM_ATTR_VALUE) =LOWER(?) AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserIDFromUserNameSQL\",\n            \"value\": \"SELECT UM_USER_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserNameFromUserIDSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserIDFromUserNameSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetRoleListSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_TENANT_ID, UM_SHARED_ROLE FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID=? AND UM_SHARED_ROLE ='0' ORDER BY UM_ROLE_NAME\"\n        },\n        {\n            \"name\": \"GetSharedRoleListSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_TENANT_ID, UM_SHARED_ROLE FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_SHARED_ROLE ='1' ORDER BY UM_ROLE_NAME\"\n        },\n        {\n            \"name\": \"GetSharedRoleListSQLH2\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_TENANT_ID, UM_SHARED_ROLE FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_SHARED_ROLE =TRUE ORDER BY UM_ROLE_NAME\"\n        },\n        {\n            \"name\": \"UserFilterSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterWithIDSQL\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterWithIDWithEscapeSQL\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterSQLWithEscape\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterWithIDSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterWithIDSQLCaseInsensitiveWithEscape\",\n            \"value\": \"SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserFilterSQLCaseInsensitiveWithEscape\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME\"\n        },\n        {\n            \"name\": \"UserRoleSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UserRoleWithIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_ID=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UserRoleExistSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?\"\n        },\n        {\n            \"name\": \"UserRoleExistWithIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_ID=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?\"\n        },\n        {\n            \"name\": \"UserRoleSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserRoleExistSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?\"\n        },\n        {\n            \"name\": \"UserSharedRoleSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME = ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? \"\n        },\n        {\n            \"name\": \"UserSharedRoleWithIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_ID = ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? \"\n        },\n        {\n            \"name\": \"UserSharedRoleSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE LOWER(UM_USER.UM_USER_NAME) = LOWER(?) AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? \"\n        },\n        {\n            \"name\": \"IsRoleExistingSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListOfRoleSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListOfRoleFilterSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListOfRoleFilterWithIDSQL\",\n            \"value\": \"SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListOfSharedRoleSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID\"\n        },\n        {\n            \"name\": \"GetUserListOfSharedRoleFilterSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID\"\n        },\n        {\n            \"name\": \"GetUserListOfSharedRoleFilterWithIDSQL\",\n            \"value\": \"SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID\"\n        },\n        {\n            \"name\": \"IsUserExistingSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserExistingWithIDSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserNameExistingSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserExistingSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"IsUserExistingSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertiesForProfileSQL\",\n            \"value\": \"SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertiesForProfileWithIDSQL\",\n            \"value\": \"SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_ID=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertiesForProfileSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertyForProfileSQL\",\n            \"value\": \"SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_NAME=? AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertyForProfileWithIDSQL\",\n            \"value\": \"SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_ID=? AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserPropertyForProfileSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserLisForPropertySQL\",\n            \"value\": \"SELECT DISTINCT UM_USER_NAME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE LIKE ? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForPropertySQLWithEscape\",\n            \"value\": \"SELECT DISTINCT UM_USER_NAME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE LIKE ? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForClaimValueSQL\",\n            \"value\": \"SELECT DISTINCT UM_USER_NAME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE =? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserLisForPropertyWithIDSQL\",\n            \"value\": \"SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE LIKE ? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForClaimValueWithIDSQL\",\n            \"value\": \"SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE =? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForPropertyWithIDSQLCaseInsensitive\",\n            \"value\": \"SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND LOWER(UM_USER_ATTRIBUTE.UM_ATTR_VALUE) LIKE LOWER(?) AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserListForClaimValueWithIDSQLCaseInsensitive\",\n            \"value\": \"SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND LOWER(UM_USER_ATTRIBUTE.UM_ATTR_VALUE)=LOWER(?) AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetProfileNamesSQL\",\n            \"value\": \"SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserProfileNamesSQL\",\n            \"value\": \"SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserProfileNamesWithIDSQL\",\n            \"value\": \"SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserProfileNamesSQLCaseInsensitive\",\n            \"value\": \"SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserIDFromUserNameSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserIDFromUserNameWithIDSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserIDFromUserNameSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetUserNameFromTenantIDSQL\",\n            \"value\": \"SELECT UM_USER_NAME FROM UM_USER WHERE UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetTenantIDFromUserNameSQL\",\n            \"value\": \"SELECT UM_TENANT_ID FROM UM_USER WHERE UM_USER_NAME=?\"\n        },\n        {\n            \"name\": \"GetTenantIDFromUserNameSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_TENANT_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?)\"\n        },\n        {\n            \"name\": \"AddUserSQL\",\n            \"value\": \"INSERT INTO UM_USER (UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME, UM_TENANT_ID) VALUES (?, ?, ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"AddUserWithIDSQL\",\n            \"value\": \"INSERT INTO UM_USER (UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME, UM_TENANT_ID) VALUES (?, ?, ?, ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQL\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleWithIDSQL\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQLCaseInsensitive\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddRoleSQL\",\n            \"value\": \"INSERT INTO UM_ROLE (UM_ROLE_NAME, UM_TENANT_ID) VALUES (?, ?)\"\n        },\n        {\n            \"name\": \"AddSharedRoleSQL\",\n            \"value\": \"UPDATE UM_ROLE SET UM_SHARED_ROLE = ? WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQL\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddRoleToUserWithIDSQL\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?)\"\n        },\n        {\n            \"name\": \"AddSharedRoleToUserSQL\",\n            \"value\": \"INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?, ?)\"\n        },\n        {\n            \"name\": \"AddSharedRoleToUserWithIDSQL\",\n            \"value\": \"INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?, ?)\"\n        },\n        {\n            \"name\": \"AddSharedRoleToUserSQLCaseInsensitive\",\n            \"value\": \"INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), ?, ?)\"\n        },\n        {\n            \"name\": \"RemoveUserFromSharedRoleSQL\",\n            \"value\": \"DELETE FROM UM_SHARED_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_USER_TENANT_ID=? AND UM_ROLE_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"RemoveUserFromSharedRoleWithIDSQL\",\n            \"value\": \"DELETE FROM UM_SHARED_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_USER_TENANT_ID=? AND UM_ROLE_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"RemoveUserFromRoleSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveUserFromRoleSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveUserFromRoleWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveUserFromRoleSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveRoleFromUserSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveRoleFromUserWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"RemoveRoleFromUserSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteRoleSQL\",\n            \"value\": \"DELETE FROM UM_ROLE WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"OnDeleteRoleRemoveUserRoleMappingSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserSQL\",\n            \"value\": \"DELETE FROM UM_USER WHERE UM_USER_NAME = ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER WHERE LOWER(UM_USER_NAME) = LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserRoleMappingSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserRoleMappingWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"CountUsersWithClaimSQL\",\n            \"value\": \"SELECT COUNT(UM_USER_ID) AS RESULT FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME = ? AND UM_TENANT_ID = ? AND UM_ATTR_VALUE LIKE ? AND UM_PROFILE_ID = ?\"\n        },\n        {\n            \"name\": \"CountInternalRolesSQL\",\n            \"value\": \"SELECT COUNT(UM_ID) AS RESULT FROM UM_HYBRID_ROLE WHERE UM_ROLE_NAME NOT LIKE 'Application%' AND UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"CountApplicationRolesSQL\",\n            \"value\": \"SELECT COUNT(UM_ID) AS RESULT FROM UM_HYBRID_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"CountRolesSQL\",\n            \"value\": \"SELECT COUNT(UM_ROLE_NAME) AS RESULT FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"CountUsersSQL\",\n            \"value\": \"SELECT COUNT(UM_USER_NAME) AS RESULT FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserAttributeSQL\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"CountUsersWithFilterSQL\",\n            \"value\": \"SELECT COUNT(UM_USER_NAME) AS RESULT FROM UM_USER WHERE UM_USER_NAME = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserAttributeWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER WHERE UM_USER_ID = ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"OnDeleteUserRemoveUserAttributeSQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateUserPasswordSQL\",\n            \"value\": \"UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE UM_USER_NAME= ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateUserPasswordWithIDSQL\",\n            \"value\": \"UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE UM_USER_ID= ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateUserPasswordSQLCaseInsensitive\",\n            \"value\": \"UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE LOWER(UM_USER_NAME)= LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateRoleNameSQL\",\n            \"value\": \"UPDATE UM_ROLE set UM_ROLE_NAME=? WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"GetGroupIDFromGroupNameSQL\",\n            \"value\": \"SELECT UM_ROLE_UUID FROM UM_ROLE WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"GetGroupNameFromGroupIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME FROM UM_ROLE WHERE UM_ROLE_UUID = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"GetGroupFromGroupNameSQL\",\n            \"value\": \"SELECT UM_ROLE_UUID, UM_CREATED_TIME, UM_LAST_MODIFIED FROM UM_ROLE WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"GetGroupFromGroupIDSQL\",\n            \"value\": \"SELECT UM_ROLE_NAME, UM_CREATED_TIME, UM_LAST_MODIFIED FROM UM_ROLE WHERE UM_ROLE_UUID = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"AddGroupSQL\",\n            \"value\": \"INSERT INTO UM_ROLE (UM_ROLE_UUID, UM_ROLE_NAME, UM_TENANT_ID, UM_CREATED_TIME, UM_LAST_MODIFIED) VALUES (?, ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"UpdateGroupNameSQL\",\n            \"value\": \"UPDATE UM_ROLE set UM_ROLE_NAME = ?, UM_LAST_MODIFIED = ? WHERE UM_ROLE_UUID = ? AND UM_TENANT_ID = ?\"\n        },\n        {\n            \"name\": \"AddUserPropertySQL\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"AddUserPropertyWithIDSQL\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?, ?, ?, ?)\"\n        },\n        {\n            \"name\": \"UpdateUserPropertySQL\",\n            \"value\": \"UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UpdateUserPropertyWithIDSQL\",\n            \"value\": \"UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"SelectUserPropertiesWithIDSQL\",\n            \"value\": \"SELECT * FROM UM_USER_ATTRIBUTE WITH (UPDLOCK) WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) ORDER BY UM_ID;\"\n        },\n        {\n            \"name\": \"UpdateUserPropertySQLCaseInsensitive\",\n            \"value\": \"UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserPropertySQL\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserPropertyWWithIDSQL\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"DeleteUserPropertySQLCaseInsensitive\",\n            \"value\": \"DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenantsSQL\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?\"\n        },\n        {\n            \"name\": \"UserIDUniqueAcrossTenantsSQLWithID\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=?\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenantsSQLWithID\",\n            \"value\": \"SELECT UM_ID FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME=? AND UM_ATTR_VALUE=?\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenantsSQLCaseInsensitive\",\n            \"value\": \"SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?)\"\n        },\n        {\n            \"name\": \"UserNameUniqueAcrossTenantsSQLCaseInsensitiveWithID\",\n            \"value\": \"SELECT UM_ID FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME=? AND LOWER(UM_ATTR_VALUE)=LOWER(?)\"\n        },\n        {\n            \"name\": \"IsDomainExistingSQL\",\n            \"value\": \"SELECT UM_DOMAIN_ID FROM UM_DOMAIN WHERE UM_DOMAIN_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddDomainSQL\",\n            \"value\": \"INSERT INTO UM_DOMAIN (UM_DOMAIN_NAME, UM_TENANT_ID) VALUES (?, ?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQL-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(?)\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQL-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), (?)\"\n        },\n        {\n            \"name\": \"AddUserPropertySQL-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), (?), (?), (?), (?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQLCaseInsensitive-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(?)\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQLCaseInsensitive-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), (?)\"\n        },\n        {\n            \"name\": \"AddUserPropertySQLCaseInsensitive-mssql\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), (?), (?), (?), (?)\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQL-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT UU.UM_ID, UR.UM_ID, ? FROM UM_USER UU, UM_ROLE UR WHERE UU.UM_USER_NAME=? AND UU.UM_TENANT_ID=? AND UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQL-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT UR.UM_ID, UU.UM_ID, ? FROM UM_ROLE UR, UM_USER UU WHERE UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=? AND UU.UM_USER_NAME=? AND UU.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddUserPropertySQL-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT UM_ID, ?, ?, ?, ? FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddUserToRoleSQLCaseInsensitive-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT UU.UM_ID, UR.UM_ID, ? FROM UM_USER UU, UM_ROLE UR WHERE LOWER(UU.UM_USER_NAME)=LOWER(?) AND UU.UM_TENANT_ID=? AND UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddRoleToUserSQLCaseInsensitive-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT UR.UM_ID, UU.UM_ID, ? FROM UM_ROLE UR, UM_USER UU WHERE UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=? AND LOWER(UU.UM_USER_NAME)=LOWER(?) AND UU.UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"AddUserPropertySQLCaseInsensitive-openedge\",\n            \"value\": \"INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT UM_ID, ?, ?, ?, ? FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?\"\n        },\n        {\n            \"name\": \"ClaimOperationsSupported\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"url\",\n            \"value\": \"https://connector.io\"\n        },\n        {\n            \"name\": \"userName\",\n            \"value\": \"Connector1\"\n        },\n        {\n            \"name\": \"password\",\n            \"value\": \"12345\"\n        },\n        {\n            \"name\": \"driverName\",\n            \"value\": \"Driver1\"\n        },\n        {\n            \"name\": \"Disabled\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"ReadOnly\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"DisplayNameAttribute\",\n            \"value\": \"UserStore\"\n        },\n        {\n            \"name\": \"ReadGroups\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"WriteGroups\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"UsernameJavaRegEx\",\n            \"value\": \"Java\"\n        },\n        {\n            \"name\": \"UsernameJavaScriptRegEx\",\n            \"value\": \"JavaScript\"\n        },\n        {\n            \"name\": \"UsernameJavaRegExViolationErrorMsg\",\n            \"value\": \"Username pattern policy violated.\"\n        },\n        {\n            \"name\": \"PasswordJavaRegEx\",\n            \"value\": \"12345678\"\n        },\n        {\n            \"name\": \"PasswordJavaScriptRegEx\",\n            \"value\": \"87654321\"\n        },\n        {\n            \"name\": \"PasswordJavaRegExViolationErrorMsg\",\n            \"value\": \"Password pattern policy violated\"\n        },\n        {\n            \"name\": \"RolenameJavaRegEx\",\n            \"value\": \"Java\"\n        },\n        {\n            \"name\": \"RolenameJavaScriptRegEx\",\n            \"value\": \"JavaScript\"\n        },\n        {\n            \"name\": \"CaseInsensitiveUsername\",\n            \"value\": \"false\"\n        },\n        {\n            \"name\": \"UseCaseSensitiveUsernameForCacheKeys\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"UniqueID\",\n            \"value\": \"\"\n        }\n],\n    \"claimAttributeMappings\": [\n        {\n            \"claimURI\": \"http://wso2.org/claims/username\",\n            \"mappedAttribute\": \"username\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/{{userstore_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"{{userstore_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch the secondary user store by it's domain id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function() {\r",
													"// Validate status code\r",
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Validate user store object structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeName\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeId\");\r",
													"    pm.expect(responseBody).to.have.property(\"description\");\r",
													"\r",
													"    // Validate properties array\r",
													"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.properties.forEach((property) => {\r",
													"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
													"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"}, 8000);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n{\n  \"operation\": \"REPLACE\",\n  \"path\": \"/properties/Disabled\",\n  \"value\": \"true\"\n}\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/{{userstore_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"{{userstore_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Export a secondary user store by its domain id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status code\r",
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Validate user store object structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"id\");\r",
													"    pm.expect(responseBody).to.have.property(\"name\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeName\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeId\");\r",
													"    pm.expect(responseBody).to.have.property(\"description\");\r",
													"\r",
													"    // Validate properties array\r",
													"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\").that.is.not.empty;\r",
													"    responseBody.properties.forEach((property) => {\r",
													"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
													"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
													"    });\r",
													"\r",
													"    // Validate claimAttributeMappings array\r",
													"    pm.expect(responseBody).to.have.property(\"claimAttributeMappings\").that.is.an(\"array\");\r",
													"    responseBody.claimAttributeMappings.forEach((mapping) => {\r",
													"        pm.expect(mapping).to.have.property(\"claimURI\");\r",
													"        pm.expect(mapping).to.have.property(\"mappedAttribute\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/{{userstore_id}}/export",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"{{userstore_id}}",
												"export"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update the secondary user store attribute mappings by it's domain id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_update\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"claimURI\": \"http://wso2.org/claims/username\",\n    \"mappedAttribute\": \"username\"\n  }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/{{userstore_id}}/attribute-mappings",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"{{userstore_id}}",
												"attribute-mappings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test the connection to the datasource used by a JDBC user store manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the response body\", () => {\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"    pm.expect(responseBody).to.have.property(\"connection\").that.is.a(\"boolean\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"driverName\": \"com.mysql.jdbc.Driver\",\n\"connectionURL\": \"jdbc:mysql://192.168.48.154:3306/test\",\n\"username\": \"root\",\n\"connectionPassword\": \"root\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/test-connection",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"test-connection"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete a secondary user store",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"setTimeout(function() {\r",
													"\r",
													"pm.test(\"Response status is 204\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(204)\r",
													"});\r",
													"\r",
													"}, 8000);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_delete\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/{{userstore_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"{{userstore_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Meta",
							"item": [
								{
									"name": "Retrieve the available user store classes/types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Ensure response is an array\r",
													"    pm.expect(responseBody).to.be.an(\"array\");\r",
													"\r",
													"    // Validate each object in the array\r",
													"    responseBody.forEach(item => {\r",
													"        pm.expect(item).to.have.property(\"typeId\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"typeName\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"className\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"isLocal\").that.is.a(\"boolean\");\r",
													"        pm.expect(item).to.have.property(\"self\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/meta/types",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"meta",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve the properties of secondary user store of a given user store type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"userstore_type_id\", \"VW5pcXVlSURSZWFkV3JpdGVMREFQVXNlclN0b3JlTWFuYWdlcg\");\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"typeName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeId\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"className\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"isLocal\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"object\");\r",
													"\r",
													"    let properties = responseBody.properties;\r",
													"\r",
													"    // Validate 'Mandatory' properties array\r",
													"    pm.expect(properties).to.have.property(\"Mandatory\").that.is.an(\"array\");\r",
													"    properties.Mandatory.forEach(item => {\r",
													"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"defaultValue\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"attributes\").that.is.an(\"array\");\r",
													"        \r",
													"        item.attributes.forEach(attribute => {\r",
													"            pm.expect(attribute).to.have.property(\"name\").that.is.a(\"string\");\r",
													"            pm.expect(attribute).to.have.property(\"value\").that.is.a(\"string\");\r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/meta/types/{{userstore_type_id}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"meta",
												"types",
												"{{userstore_type_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieve the meta attributes of a user store of a given user store type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"typeName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"typeId\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"isLocal\").that.is.a(\"boolean\");\r",
													"    pm.expect(responseBody).to.have.property(\"attributeMappings\").that.is.an(\"array\");\r",
													"\r",
													"    // Validate 'attributeMappings' array\r",
													"    responseBody.attributeMappings.forEach(mapping => {\r",
													"        pm.expect(mapping).to.have.property(\"claimId\").that.is.a(\"string\");\r",
													"        pm.expect(mapping).to.have.property(\"claimURI\").that.is.a(\"string\");\r",
													"        pm.expect(mapping).to.have.property(\"mappedAttribute\").that.is.a(\"string\");\r",
													"        pm.expect(mapping).to.have.property(\"displayName\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_userstore_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/userstores/meta/types/{{userstore_type_id}}/attributes",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"userstores",
												"meta",
												"types",
												"{{userstore_type_id}}",
												"attributes"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CORS API",
					"item": [
						{
							"name": "CORS origins",
							"item": [
								{
									"name": "Retrieve the CORS origins",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse the API response as JSON\r",
													"const response = pm.response.json();\r",
													"\r",
													"// Check if the response is an array\r",
													"if (Array.isArray(response) && response.length > 0) {\r",
													"    // Select a random index from the array\r",
													"    const randomIndex = Math.floor(Math.random() * response.length);\r",
													"    const randomId = response[randomIndex].id; // Get the random 'id'\r",
													"\r",
													"    // Set the random 'id' as a collection variable\r",
													"    pm.collectionVariables.set(\"cors_origins_id\", randomId);\r",
													"\r",
													"    // Log the selected random ID for debugging\r",
													"    console.log(\"Random ID selected and set as collection variable:\", randomId);\r",
													"} else {\r",
													"    // Log an error if the response is not valid\r",
													"    console.error(\"Response is not a valid array or is empty:\", response);\r",
													"}\r",
													"\r",
													"// Validate the status code\r",
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate response is an array\r",
													"    pm.expect(responseBody).to.be.an(\"array\");\r",
													"\r",
													"    // Validate each item in the array\r",
													"    responseBody.forEach(item => {\r",
													"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"url\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_cors_origins_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/cors/origins",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"cors",
												"origins"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Application associations",
							"item": [
								{
									"name": "Retrieve the Applications associated with a CORS origin by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function() {\r",
													"    pm.expect(pm.response.code).to.equal(200)\r",
													"});\r",
													"\r",
													"pm.test(\"Validate response structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate response is an array\r",
													"    pm.expect(responseBody).to.be.an(\"array\");\r",
													"\r",
													"    // Validate each item in the array\r",
													"    responseBody.forEach(item => {\r",
													"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
													"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"grant_type\", value: \"client_credentials\" },\r",
													"            { key: \"scope\", value: \"internal_cors_origins_view\" } // Uses a dynamic scope\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{auth_token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/cors/origins/{{cors_origins_id}}/applications",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"api",
												"server",
												"v1",
												"cors",
												"origins",
												"{{cors_origins_id}}",
												"applications"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Consent management",
					"item": [
						{
							"name": "Consent management API",
							"item": [
								{
									"name": "Purpose Category",
									"item": [
										{
											"name": "Add purpose category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseBody = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"purpose_category_id\", responseBody.purposeCategoryId);\r",
															"\r",
															"// Validate status code\r",
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure for purpose category\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties\r",
															"    pm.expect(responseBody).to.have.property(\"purposeCategoryId\");\r",
															"    pm.expect(responseBody).to.have.property(\"purposeCategory\");\r",
															"    pm.expect(responseBody).to.have.property(\"description\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_consent_mgt_add\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"purposeCategory\": \"purposeCategory2.0\",\n\"description\": \"This is my purpose category for the consent management\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/purpose-categories",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"purpose-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve all purpose categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure for list of purpose categories\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate that the response is an array\r",
															"    pm.expect(responseBody).to.be.an(\"array\");\r",
															"\r",
															"    // Iterate through the array and validate each item\r",
															"    responseBody.forEach((item) => {\r",
															"        pm.expect(item).to.have.property(\"purposeCategoryId\").that.is.a(\"number\");\r",
															"        pm.expect(item).to.have.property(\"purposeCategory\").that.is.a(\"string\");\r",
															"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/purpose-categories",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"purpose-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve a purpose category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure for purpose category\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties\r",
															"    pm.expect(responseBody).to.have.property(\"purposeCategoryId\");\r",
															"    pm.expect(responseBody).to.have.property(\"purposeCategory\");\r",
															"    pm.expect(responseBody).to.have.property(\"description\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/purpose-categories/{{purpose_category_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"purpose-categories",
														"{{purpose_category_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PII Category",
									"item": [
										{
											"name": "Add PII category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseBody = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"pii_category_Id\", responseBody.piiCategoryId);\r",
															"\r",
															"pm.test(\"Response status is 201\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(201)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure for PII category\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate the PII category structure\r",
															"    pm.expect(responseBody).to.have.property(\"piiCategoryId\");\r",
															"    pm.expect(responseBody).to.have.property(\"piiCategory\");\r",
															"    pm.expect(responseBody).to.have.property(\"description\");\r",
															"    pm.expect(responseBody).to.have.property(\"displayName\");\r",
															"    pm.expect(responseBody).to.have.property(\"sensitive\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_consent_mgt_add\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"piiCategory\": \"PIICategory2.0\",\n\"description\": \"This is my PII category\",\n\"displayName\": \"PII_2.0\",\n\"sensitive\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/pii-categories",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"pii-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve all PII categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure for PII categories\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Check if response is an array\r",
															"    pm.expect(responseBody).to.be.an(\"array\");\r",
															"\r",
															"    // Validate the structure of each PII category\r",
															"    responseBody.forEach(piiCategory => {\r",
															"        pm.expect(piiCategory).to.have.property(\"piiCategoryId\");\r",
															"        pm.expect(piiCategory).to.have.property(\"piiCategory\");\r",
															"        pm.expect(piiCategory).to.have.property(\"description\");\r",
															"        pm.expect(piiCategory).to.have.property(\"displayName\");\r",
															"        pm.expect(piiCategory).to.have.property(\"sensitive\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/pii-categories",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"pii-categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve a PII category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure for PII category\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate the PII category structure\r",
															"    pm.expect(responseBody).to.have.property(\"piiCategoryId\");\r",
															"    pm.expect(responseBody).to.have.property(\"piiCategory\");\r",
															"    pm.expect(responseBody).to.have.property(\"description\");\r",
															"    pm.expect(responseBody).to.have.property(\"displayName\");\r",
															"    pm.expect(responseBody).to.have.property(\"sensitive\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/pii-categories/{{pii_category_Id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"pii-categories",
														"{{pii_category_Id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Purpose",
									"item": [
										{
											"name": "Add purpose",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseBody = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"purpose_id\", responseBody.purposeId);\r",
															"\r",
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure\", () => {\r",
															"    let responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties\r",
															"    pm.expect(responseBody).to.have.property(\"purposeId\").that.is.a(\"number\");\r",
															"    pm.expect(responseBody).to.have.property(\"purpose\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"group\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"groupType\").that.is.a(\"string\");\r",
															"\r",
															"    // Validate piiCategories array\r",
															"    pm.expect(responseBody.piiCategories).to.be.an(\"array\");\r",
															"    responseBody.piiCategories.forEach((category) => {\r",
															"        pm.expect(category).to.have.property(\"piiCategoryId\").that.is.a(\"number\");\r",
															"        pm.expect(category).to.have.property(\"piiCategory\").that.is.a(\"string\");\r",
															"        pm.expect(category).to.have.property(\"description\").that.is.a(\"string\");\r",
															"        pm.expect(category).to.have.property(\"displayName\").that.is.a(\"string\");\r",
															"        pm.expect(category).to.have.property(\"sensitive\").that.is.a(\"boolean\");\r",
															"        pm.expect(category).to.have.property(\"mandatory\").that.is.a(\"boolean\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_consent_mgt_add\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"purpose\": \"MyPurpose\",\n\"description\": \"This is the purpose I'm going to add to consent management\",\n\"group\": \"group1\",\n\"groupType\": \"purpose group\",\n\"piiCategories\": [\n  {\n    \"piiCategoryId\": {{pii_category_Id}},\n    \"mandatory\": true\n  }\n]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/purposes",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"purposes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve all purposes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties\r",
															"    pm.expect(responseBody).to.be.an(\"array\");\r",
															"    responseBody.forEach((item) => {\r",
															"        pm.expect(item).to.have.property(\"purposeId\").that.is.a(\"number\");\r",
															"        pm.expect(item).to.have.property(\"purpose\").that.is.a(\"string\");\r",
															"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");\r",
															"        pm.expect(item).to.have.property(\"group\").that.is.a(\"string\");\r",
															"        pm.expect(item).to.have.property(\"groupType\").that.is.a(\"string\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/purposes",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"purposes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve a purpose",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties\r",
															"    pm.expect(responseBody).to.have.property(\"purposeId\").that.is.a(\"number\");\r",
															"    pm.expect(responseBody).to.have.property(\"purpose\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"group\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"groupType\").that.is.a(\"string\");\r",
															"\r",
															"    // Validate piiCategories array\r",
															"    pm.expect(responseBody.piiCategories).to.be.an(\"array\");\r",
															"    responseBody.piiCategories.forEach((category) => {\r",
															"        pm.expect(category).to.have.property(\"piiCategoryId\").that.is.a(\"number\");\r",
															"        pm.expect(category).to.have.property(\"piiCategory\").that.is.a(\"string\");\r",
															"        pm.expect(category).to.have.property(\"description\").that.is.a(\"string\");\r",
															"        pm.expect(category).to.have.property(\"displayName\").that.is.a(\"string\");\r",
															"        pm.expect(category).to.have.property(\"sensitive\").that.is.a(\"boolean\");\r",
															"        pm.expect(category).to.have.property(\"mandatory\").that.is.a(\"boolean\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/purposes/{{purpose_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"purposes",
														"{{purpose_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consent",
									"item": [
										{
											"name": "Add consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseBody = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"consent_receipt_id\", responseBody.consentReceiptId);\r",
															"\r",
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate response contains all required properties\r",
															"    pm.expect(responseBody).to.have.property(\"consentReceiptId\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"collectionMethod\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"language\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"piiPrincipalId\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"tenantDomain\").that.is.a(\"string\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													},
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"services\": [\r\n        {\r\n            \"service\": \"foo-service\",\r\n            \"tenantDomain\": \"carbon.super\",\r\n            \"purposes\": [\r\n                {\r\n                    \"purposeId\": {{purpose_id}},\r\n                    \"purposeCategoryId\": [\r\n                        {{purpose_category_id}}\r\n                    ],\r\n                    \"consentType\": \"EXPLICIT\",\r\n                    \"piiCategory\": [\r\n                        {\r\n                            \"piiCategoryId\": {{pii_category_Id}},\r\n                            \"validity\": \"days:30\"\r\n                        }\r\n                    ],\r\n                    \"primaryPurpose\": true,\r\n                    \"termination\": \"days:30\",\r\n                    \"thirdPartyDisclosure\": false,\r\n                    \"thirdPartyName\": \"\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"collectionMethod\": \"Sign-Up\",\r\n    \"jurisdiction\": \"CA\",\r\n    \"language\": \"EN\",\r\n    \"policyURL\": \"https://foo.com/privacy\",\r\n    \"properties\": [\r\n        {\r\n            \"key\": \"k1\",\r\n            \"value\": \"v1\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "List consents",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate that the response is an array\r",
															"    pm.expect(responseBody).to.be.an(\"array\");\r",
															"\r",
															"    // Iterate through each object in the array to check its structure\r",
															"    responseBody.forEach((item) => {\r",
															"        pm.expect(item).to.have.property(\"consentReceiptID\");\r",
															"        pm.expect(item).to.have.property(\"language\");\r",
															"        pm.expect(item).to.have.property(\"piiPrincipalId\");\r",
															"        pm.expect(item).to.have.property(\"tenantDomain\");\r",
															"        pm.expect(item).to.have.property(\"state\");\r",
															"        pm.expect(item).to.have.property(\"spDisplayName\");\r",
															"        pm.expect(item).to.have.property(\"spDescription\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve a consent receipt",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"pm.test(\"Validate response structure\", () => {\r",
															"    var responseBody = pm.response.json();\r",
															"\r",
															"    // Validate top-level properties\r",
															"    pm.expect(responseBody).to.have.property(\"version\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"jurisdiction\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"consentTimestamp\").that.is.a(\"number\");\r",
															"    pm.expect(responseBody).to.have.property(\"collectionMethod\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"consentReceiptID\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"publicKey\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"language\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"piiPrincipalId\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"tenantDomain\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"state\").that.is.a(\"string\");\r",
															"\r",
															"    // Validate piiControllers array\r",
															"    pm.expect(responseBody.piiControllers).to.be.an(\"array\");\r",
															"    responseBody.piiControllers.forEach((controller) => {\r",
															"        pm.expect(controller).to.have.property(\"piiController\").that.is.a(\"string\");\r",
															"        pm.expect(controller).to.have.property(\"contact\").that.is.a(\"string\");\r",
															"        pm.expect(controller).to.have.property(\"address\").that.is.an(\"object\");\r",
															"        pm.expect(controller.address).to.have.property(\"addressCountry\").that.is.a(\"string\");\r",
															"        pm.expect(controller.address).to.have.property(\"addressLocality\").that.is.a(\"string\");\r",
															"        pm.expect(controller.address).to.have.property(\"addressRegion\").that.is.a(\"string\");\r",
															"        pm.expect(controller.address).to.have.property(\"postOfficeBoxNumber\").that.is.a(\"string\");\r",
															"        pm.expect(controller.address).to.have.property(\"postalCode\").that.is.a(\"string\");\r",
															"        pm.expect(controller.address).to.have.property(\"streetAddress\").that.is.a(\"string\");\r",
															"        pm.expect(controller).to.have.property(\"email\").that.is.a(\"string\");\r",
															"        pm.expect(controller).to.have.property(\"phone\").that.is.a(\"string\");\r",
															"        pm.expect(controller).to.have.property(\"onBehalf\").that.is.a(\"boolean\");\r",
															"        pm.expect(controller).to.have.property(\"piiControllerUrl\").that.is.a(\"string\");\r",
															"    });\r",
															"\r",
															"    // Validate services array\r",
															"    pm.expect(responseBody.services).to.be.an(\"array\");\r",
															"    responseBody.services.forEach((service) => {\r",
															"        pm.expect(service).to.have.property(\"service\");\r",
															"        pm.expect(service).to.have.property(\"serviceDisplayName\");\r",
															"        pm.expect(service).to.have.property(\"serviceDescription\");\r",
															"        pm.expect(service).to.have.property(\"tenantDomain\");\r",
															"        pm.expect(service).to.have.property(\"purposes\");\r",
															"        \r",
															"        service.purposes.forEach((purpose) => {\r",
															"            pm.expect(purpose).to.have.property(\"purpose\").that.is.a(\"string\");\r",
															"            pm.expect(purpose).to.have.property(\"purposeId\").that.is.a(\"number\");\r",
															"            pm.expect(purpose).to.have.property(\"purposeCategory\").to.be.an(\"array\");\r",
															"            pm.expect(purpose).to.have.property(\"consentType\").that.is.a(\"string\");\r",
															"            pm.expect(purpose).to.have.property(\"piiCategory\").to.be.an(\"array\");\r",
															"            \r",
															"            purpose.piiCategory.forEach((category) => {\r",
															"                pm.expect(category).to.have.property(\"piiCategoryName\");\r",
															"                pm.expect(category).to.have.property(\"piiCategoryId\");\r",
															"                pm.expect(category).to.have.property(\"validity\");\r",
															"                pm.expect(category).to.have.property(\"piiCategoryDisplayName\");\r",
															"            });\r",
															"\r",
															"            pm.expect(purpose).to.have.property(\"primaryPurpose\");\r",
															"            pm.expect(purpose).to.have.property(\"termination\");\r",
															"            pm.expect(purpose).to.have.property(\"thirdPartyDisclosure\");\r",
															"            pm.expect(purpose).to.have.property(\"thirdPartyName\");\r",
															"        });\r",
															"    });\r",
															"\r",
															"    // Validate sensitive and spiCat properties\r",
															"    pm.expect(responseBody).to.have.property(\"sensitive\").that.is.a(\"boolean\");\r",
															"    pm.expect(responseBody).to.have.property(\"spiCat\").to.be.an(\"array\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/receipts/{{consent_receipt_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"receipts",
														"{{consent_receipt_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Revoke consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/receipts/{{consent_receipt_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"receipts",
														"{{consent_receipt_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete purpose category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_consent_mgt_delete\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/purpose-categories/{{purpose_category_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"purpose-categories",
														"{{purpose_category_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a purpose",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_consent_mgt_delete\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/purposes/{{purpose_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"purposes",
														"{{purpose_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete PII category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_consent_mgt_delete\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/identity/consent-mgt/v1.0/consents/pii-categories/{{pii_category_Id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"identity",
														"consent-mgt",
														"v1.0",
														"consents",
														"pii-categories",
														"{{pii_category_Id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.execution.skipRequest();"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Email templates",
					"item": [
						{
							"name": "Email templates v2 API",
							"item": [
								{
									"name": "Email Template Types",
									"item": [
										{
											"name": "Retrieves all the email template types",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"     pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"// Parse the response body\r",
															"var responseBody = pm.response.json();\r",
															"\r",
															"// Validate root-level structure\r",
															"pm.test(\"Validate root-level structure\", function () {\r",
															"    pm.expect(responseBody).to.be.an(\"array\");\r",
															"});\r",
															"\r",
															"// Validate objects in the root array\r",
															"pm.test(\"Validate objects in the root array\", function () {\r",
															"    responseBody.forEach(obj => {\r",
															"        // Validate required properties\r",
															"        pm.expect(obj).to.have.property(\"displayName\").that.is.a(\"string\");\r",
															"        pm.expect(obj).to.have.property(\"self\").that.is.a(\"string\");\r",
															"        pm.expect(obj).to.have.property(\"id\").that.is.a(\"string\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "Adds a new email template type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_create\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 201\", function () {\r",
															"     pm.expect(pm.response.code).to.equal(201);\r",
															"});\r",
															"\r",
															"// Parse the response body\r",
															"var responseBody = pm.response.json();\r",
															"\r",
															"// Validate root-level structure\r",
															"pm.test(\"Validate root-level structure\", function () {\r",
															"    pm.expect(responseBody).to.be.an(\"object\");\r",
															"});\r",
															"\r",
															"// Validate required properties and their types\r",
															"pm.test(\"Validate required properties\", function () {\r",
															"    pm.expect(responseBody).to.have.property(\"id\");\r",
															"    pm.expect(responseBody).to.have.property(\"displayName\");\r",
															"    pm.expect(responseBody).to.have.property(\"self\");\r",
															"});\r",
															"\r",
															"// Get template id as a variable\r",
															"pm.collectionVariables.set(\"template_type_id\", responseBody.id);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"displayName\": \"Account Confirmation_101\",\n\"templates\": [\n  {\n    \"contentType\": \"text/html\",\n    \"subject\": \"WSO2 - Account Confirmation\",\n    \"body\": \"HTML Body\",\n    \"footer\": \"WSO2 Identity Server Team\",\n    \"id\": \"en_US\"\n  }\n]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/email/template-types",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v1",
														"email",
														"template-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieves the email template type corresponding to the template type id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"     pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"// Parse the response body\r",
															"var responseBody = pm.response.json();\r",
															"\r",
															"// Validate root-level structure\r",
															"pm.test(\"Validate root-level structure\", function () {\r",
															"    pm.expect(responseBody).to.be.an(\"object\");\r",
															"});\r",
															"\r",
															"// Validate required root properties and their types\r",
															"pm.test(\"Validate required root properties\", function () {\r",
															"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"templates\").that.is.an(\"array\");\r",
															"});\r",
															"\r",
															"// Validate structure of each template object\r",
															"pm.test(\"Validate templates structure\", function () {\r",
															"    responseBody.templates.forEach(template => {\r",
															"        pm.expect(template).to.have.property(\"contentType\").that.is.a(\"string\");\r",
															"        pm.expect(template).to.have.property(\"subject\").that.is.a(\"string\");\r",
															"        pm.expect(template).to.have.property(\"body\").that.is.a(\"string\");\r",
															"        pm.expect(template).to.have.property(\"footer\").that.is.a(\"string\");\r",
															"        pm.expect(template).to.have.property(\"id\").that.is.a(\"string\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/email/template-types/{{template_type_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v1",
														"email",
														"template-types",
														"{{template_type_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Email Templates",
									"item": [
										{
											"name": "Retrieves the list of email templates in the template type id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"     pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"// Parse the response body\r",
															"var responseBody = pm.response.json();\r",
															"\r",
															"// Validate root-level structure\r",
															"pm.test(\"Validate root-level structure\", function () {\r",
															"    pm.expect(responseBody).to.be.an(\"array\");\r",
															"});\r",
															"\r",
															"// Validate objects in the root array\r",
															"pm.test(\"Validate objects in the root array\", function () {\r",
															"    responseBody.forEach(obj => {\r",
															"        // Validate required properties\r",
															"        pm.expect(obj).to.have.property(\"displayName\").that.is.a(\"string\");\r",
															"        pm.expect(obj).to.have.property(\"self\").that.is.a(\"string\");\r",
															"        pm.expect(obj).to.have.property(\"id\").that.is.a(\"string\");\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types"
													]
												}
											},
											"response": []
										},
										{
											"name": "Adds a new email template to an existing email template type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_create\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 201\", function () {\r",
															"     pm.expect(pm.response.code).to.equal(201);\r",
															"});\r",
															"\r",
															"// Parse the response body\r",
															"var responseBody = pm.response.json();\r",
															"\r",
															"// Validate root-level structure\r",
															"pm.test(\"Validate root-level structure\", function () {\r",
															"    pm.expect(responseBody).to.be.an(\"object\");\r",
															"});\r",
															"\r",
															"// Validate required root properties and their types\r",
															"pm.test(\"Validate required root properties\", function () {\r",
															"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"self\").that.is.a(\"string\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"contentType\": \"text/html; charset=UTF-8\",\n\"subject\": \"WSO2 - Account Confirmation\",\n\"body\": \"HTML Body\",\n\"footer\": \"WSO2 Identity Server Team\",\n\"locale\": \"en_UK\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}/org-templates",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}",
														"org-templates"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieves a single email template",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Respnse status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"// Parse the response body\r",
															"var responseBody = pm.response.json();\r",
															"\r",
															"// Validate root-level structure\r",
															"pm.test(\"Validate root-level structure\", function () {\r",
															"    pm.expect(responseBody).to.be.an(\"object\");\r",
															"});\r",
															"\r",
															"// Validate required root properties and their types\r",
															"pm.test(\"Validate required root properties\", function () {\r",
															"    pm.expect(responseBody).to.have.property(\"contentType\");\r",
															"    pm.expect(responseBody).to.have.property(\"subject\");\r",
															"    pm.expect(responseBody).to.have.property(\"body\");\r",
															"    pm.expect(responseBody).to.have.property(\"footer\");\r",
															"    pm.expect(responseBody).to.have.property(\"locale\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}/org-templates/en_UK",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}",
														"org-templates",
														"en_UK"
													]
												}
											},
											"response": []
										},
										{
											"name": "Replaces an existing email template",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_update\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Respnse status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"contentType\": \"text/html; charset=UTF-8\",\n\"subject\": \"WSO2 - Account Confirmation\",\n\"body\": \"HTML Body\",\n\"footer\": \"WSO2 Identity Server - QA Team\",\n\"locale\": \"en_UK\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}/org-templates/en_US",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}",
														"org-templates",
														"en_US"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Application Email Templates",
									"item": [
										{
											"name": "Retrieves the list of application email templates in the template type id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Respnse status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Adds a new application email template to an existing email template type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_create\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 201\", function () {\r",
															"     pm.expect(pm.response.code).to.equal(201);\r",
															"});\r",
															"\r",
															"// Parse the response body\r",
															"var responseBody = pm.response.json();\r",
															"\r",
															"// Validate root-level structure\r",
															"pm.test(\"Validate root-level structure\", function () {\r",
															"    pm.expect(responseBody).to.be.an(\"object\");\r",
															"});\r",
															"\r",
															"// Validate required root properties and their types\r",
															"pm.test(\"Validate required root properties\", function () {\r",
															"    pm.expect(responseBody).to.have.property(\"locale\").that.is.a(\"string\");\r",
															"    pm.expect(responseBody).to.have.property(\"self\").that.is.a(\"string\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"contentType\": \"text/html; charset=UTF-8\",\n\"subject\": \"WSO2 - Account Confirmation\",\n\"body\": \"HTML Body\",\n\"footer\": \"WSO2 Identity Server Team\",\n\"locale\": \"en_US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}/app-templates/351262e3-1331-498a-bf2b-344b451ebb3a",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}",
														"app-templates",
														"351262e3-1331-498a-bf2b-344b451ebb3a"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieves a single email template of application",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_view\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Respnse status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});\r",
															"\r",
															"// Parse the response body\r",
															"var responseBody = pm.response.json();\r",
															"\r",
															"// Validate root-level structure\r",
															"pm.test(\"Validate root-level structure\", function () {\r",
															"    pm.expect(responseBody).to.be.an(\"object\");\r",
															"});\r",
															"\r",
															"// Validate required root properties and their types\r",
															"pm.test(\"Validate required root properties\", function () {\r",
															"    pm.expect(responseBody).to.have.property(\"contentType\");\r",
															"    pm.expect(responseBody).to.have.property(\"subject\");\r",
															"    pm.expect(responseBody).to.have.property(\"body\");\r",
															"    pm.expect(responseBody).to.have.property(\"footer\");\r",
															"    pm.expect(responseBody).to.have.property(\"locale\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}/app-templates/351262e3-1331-498a-bf2b-344b451ebb3a/en_US",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}",
														"app-templates",
														"351262e3-1331-498a-bf2b-344b451ebb3a",
														"en_US"
													]
												}
											},
											"response": []
										},
										{
											"name": "Replaces an existing application email template",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_update\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Respnse status is 200\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(200)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{auth_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\"contentType\": \"text/html; charset=UTF-8\",\n\"subject\": \"WSO2 - Account Confirmation\",\n\"body\": \"HTML Body\",\n\"footer\": \"WSO2 Identity Server - QATeam\",\n\"locale\": \"en_US\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}/app-templates/351262e3-1331-498a-bf2b-344b451ebb3a/en_US",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}",
														"app-templates",
														"351262e3-1331-498a-bf2b-344b451ebb3a",
														"en_US"
													]
												}
											},
											"response": []
										},
										{
											"name": "Removes an email template",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_delete\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Respnse status is 204\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(204)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}/app-templates/351262e3-1331-498a-bf2b-344b451ebb3a/en_US",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}",
														"app-templates",
														"351262e3-1331-498a-bf2b-344b451ebb3a",
														"en_US"
													]
												}
											},
											"response": []
										},
										{
											"name": "Removes an email template",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_delete\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Respnse status is 204\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(204)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}/org-templates/en_UK",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}",
														"org-templates",
														"en_UK"
													]
												}
											},
											"response": []
										},
										{
											"name": "Removes an email template type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.sendRequest({\r",
															"    url: pm.collectionVariables.get(\"token_url\"),\r",
															"    method: \"POST\",\r",
															"    header: {\r",
															"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
															"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
															"    },\r",
															"    body: {\r",
															"        mode: \"urlencoded\",\r",
															"        urlencoded: [\r",
															"            { key: \"grant_type\", value: \"client_credentials\" },\r",
															"            { key: \"scope\", value: \"internal_email_mgt_delete\" } // Uses a dynamic scope\r",
															"        ]\r",
															"    }\r",
															"}, function (err, res) {\r",
															"    if (err) {\r",
															"        console.log(\"Token request failed:\", err);\r",
															"    } else {\r",
															"        let jsonResponse = res.json();\r",
															"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Respnse status is 204\", function() {\r",
															"    pm.expect(pm.response.code).to.equal(204)\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v2/email/template-types/{{template_type_id}}",
													"protocol": "https",
													"host": [
														"{{serverUrl}}"
													],
													"path": [
														"t",
														"{{tenantDomain}}",
														"api",
														"server",
														"v2",
														"email",
														"template-types",
														"{{template_type_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Server configuration API",
			"item": [
				{
					"name": "Server Configs",
					"item": [
						{
							"name": "Retrieve server configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate homeRealmIdentifiers\r",
											"pm.test(\"Validate homeRealmIdentifiers\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmIdentifiers\").that.is.an(\"array\").that.is.not.empty;\r",
											"    pm.expect(responseBody.homeRealmIdentifiers[0]).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate realmConfig\r",
											"pm.test(\"Validate realmConfig\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"realmConfig\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.realmConfig).to.have.property(\"adminUser\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.realmConfig).to.have.property(\"adminRole\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.realmConfig).to.have.property(\"everyoneRole\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate idleSessionTimeoutPeriod\r",
											"pm.test(\"Validate idleSessionTimeoutPeriod\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"idleSessionTimeoutPeriod\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate rememberMePeriod\r",
											"pm.test(\"Validate rememberMePeriod\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"rememberMePeriod\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate provisioning\r",
											"pm.test(\"Validate provisioning\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"provisioning\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.provisioning).to.have.property(\"inbound\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.provisioning.inbound).to.have.property(\"scim\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.provisioning.inbound.scim).to.have.property(\"enableProxyMode\").that.is.a(\"boolean\");\r",
											"});\r",
											"\r",
											"// Validate authenticators\r",
											"pm.test(\"Validate authenticators array\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"authenticators\").that.is.an(\"array\").that.is.not.empty;\r",
											"    responseBody.authenticators.forEach(authenticator => {\r",
											"        pm.expect(authenticator).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate CORS settings\r",
											"pm.test(\"Validate CORS settings\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"cors\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.cors).to.have.property(\"allowGenericHttpRequests\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.cors).to.have.property(\"allowAnyOrigin\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.cors).to.have.property(\"allowSubdomains\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.cors).to.have.property(\"supportedMethods\").that.is.an(\"array\").that.is.not.empty;\r",
											"    pm.expect(responseBody.cors).to.have.property(\"supportAnyHeader\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.cors).to.have.property(\"supportsCredentials\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.cors).to.have.property(\"maxAge\").that.is.a(\"number\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_authenticator_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch server configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"operation\": \"REPLACE\",\n  \"path\": \"/idleSessionTimeoutPeriod\",\n  \"value\": \"30\"\n}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Server Inbound SCIM",
					"item": [
						{
							"name": "Retrieve server inbound SCIM configs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body\", () =>{\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"enableProxyMode\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/provisioning/inbound/scim",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"provisioning",
										"inbound",
										"scim"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update server inbound SCIM configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"provisioningUserstore\": \"PRIMARY\",\n\"enableProxyMode\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/provisioning/inbound/scim",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"provisioning",
										"inbound",
										"scim"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Local Authenticators",
					"item": [
						{
							"name": "List local authenticators in the server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate authenticators array\r",
											"pm.test(\"Validate authenticators array\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    responseBody.forEach(authenticator => {\r",
											"        // Validate each object in the array\r",
											"        pm.expect(authenticator).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"\r",
											"        // Validate tags if present\r",
											"        if (authenticator.hasOwnProperty(\"tags\")) {\r",
											"            pm.expect(authenticator.tags).to.be.an(\"array\").that.is.not.empty;\r",
											"            authenticator.tags.forEach(tag => {\r",
											"                pm.expect(tag).to.be.a(\"string\");\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate that the response body contains the authenticators array\r",
											"pm.test(\"Validate authenticators array exists\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Pick a random authenticator from the array\r",
											"let randomAuthenticator = responseBody[Math.floor(Math.random() * responseBody.length)];\r",
											"\r",
											"// Validate that the random authenticator has an id\r",
											"pm.test(\"Validate random authenticator has an id\", function () {\r",
											"    pm.expect(randomAuthenticator).to.have.property(\"id\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Set the id as a collection variable\r",
											"pm.collectionVariables.set(\"authenticator_id\", randomAuthenticator.id);\r",
											"\r",
											"// Log the variable for debugging\r",
											"console.log(\"Random authenticator id set as collection variable:\", randomAuthenticator.id);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get authenticator by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate the structure of the response\r",
											"pm.test(\"Validate response properties and types\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate tags if present\r",
											"    if (responseBody.hasOwnProperty(\"tags\")) {\r",
											"        pm.expect(responseBody.tags).to.be.an(\"array\").that.is.not.empty;\r",
											"        responseBody.tags.forEach(tag => {\r",
											"            pm.expect(tag).to.be.a(\"string\");\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/authenticators/{{authenticator_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"authenticators",
										"{{authenticator_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CORS",
					"item": [
						{
							"name": "Retrieve the tenant CORS configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate the structure of the response\r",
											"pm.test(\"Validate response properties and types\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"allowGenericHttpRequests\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"allowAnyOrigin\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"allowSubdomains\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"supportedMethods\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"supportAnyHeader\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"supportedHeaders\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"exposedHeaders\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"supportsCredentials\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"maxAge\").that.is.a(\"number\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_login\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/cors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"cors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch the tenant CORS configuration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"operation\": \"ADD\",\n  \"path\": \"/supportedMethods\",\n  \"value\": \"CHANGE\"\n}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/cors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"cors"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private Key JWY validation Authenticators",
					"item": [
						{
							"name": "Retrieve the tenant private key jwt authentication configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate the structure of the response\r",
											"pm.test(\"Validate response properties and types\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"enableTokenReuse\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_login\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/jwt-key-validator",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"jwt-key-validator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch the tenant private key jwt authentication configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"operation\": \"ADD\",\n  \"path\": \"/enableTokenReuse\",\n  \"value\": true\n}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/jwt-key-validator",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"jwt-key-validator"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Home Realm Identifiers",
					"item": [
						{
							"name": "Retrieve the Home Realm Identifiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate that the response is an array\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Validate the contents of the array\r",
											"pm.test(\"Array contains valid elements\", function () {\r",
											"    responseBody.forEach(function (item) {\r",
											"        pm.expect(item).to.be.a(\"string\"); // Ensure each item in the array is a string\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/home-realm-identifiers",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"home-realm-identifiers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Schemas",
					"item": [
						{
							"name": "Retrieve Schemas supported By Server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate the response is an array\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Validate each object in the array\r",
											"responseBody.forEach((item, index) => {\r",
											"    pm.test(`Validate object at index ${index}`, function () {\r",
											"        pm.expect(item).to.be.an(\"object\");\r",
											"        \r",
											"        // Validate required properties\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// Pick a random object from the array\r",
											"let randomItem = responseBody[Math.floor(Math.random() * responseBody.length)];\r",
											"\r",
											"// Ensure the random object has an \"id\" property\r",
											"pm.test(\"Random object has 'id'\", function () {\r",
											"    pm.expect(randomItem).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
											"});\r",
											"\r",
											"// Set the \"id\" as a collection variable\r",
											"pm.collectionVariables.set(\"schema_id\", randomItem.id);\r",
											"\r",
											"// Log the selected id for debugging\r",
											"console.log(\"Selected schema_id:\", randomItem.id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_login\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/schemas",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"schemas"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Schema by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate essential properties\r",
											"pm.test(\"Validate response structure\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Validate attributes array\r",
											"pm.test(\"Validate 'attributes' array structure\", function () {\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.be.a(\"string\").and.is.not.empty;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_login\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/schemas/{{schema_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"schemas",
										"{{schema_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Server Remote Logging Configuration",
					"item": [
						{
							"name": "Update Remote Logging Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 202\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(202)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"remoteUrl\": \"https://test.remote.server.com/api/log\",\n  \"connectTimeoutMillis\": \"5000\",\n  \"verifyHostname\": true,\n  \"logType\": \"AUDIT\",\n  \"username\": \"admin\",\n  \"password\": \"admin\",\n  \"keystoreLocation\": \"https://keystorelocation\",\n  \"keystorePassword\": \"keYstore198\",\n  \"truststoreLocation\": \"https://truststorelocation\",\n  \"truststorePassword\": \"trUst342\"\n}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/remote-logging",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"remote-logging"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Remote Logging Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate response structure\r",
											"pm.test(\"Validate response structure is an array\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Validate properties in each object of the array\r",
											"pm.test(\"Validate properties of objects in the array\", function () {\r",
											"    responseBody.forEach(item => {\r",
											"        pm.expect(item).to.be.an(\"object\");\r",
											"        pm.expect(item).to.have.property(\"remoteUrl\");\r",
											"        pm.expect(item).to.have.property(\"connectTimeoutMillis\");\r",
											"        pm.expect(item).to.have.property(\"verifyHostname\");\r",
											"        pm.expect(item).to.have.property(\"logType\");\r",
											"        pm.expect(item).to.have.property(\"username\");\r",
											"        pm.expect(item).to.have.property(\"password\");\r",
											"        pm.expect(item).to.have.property(\"keystoreLocation\");\r",
											"        pm.expect(item).to.have.property(\"keystorePassword\");\r",
											"        pm.expect(item).to.have.property(\"truststoreLocation\");\r",
											"        pm.expect(item).to.have.property(\"truststorePassword\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_login\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/remote-logging",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"remote-logging"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Remote Logging Configuration by log type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate response structure\r",
											"pm.test(\"Validate response structure\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"remoteUrl\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"connectTimeoutMillis\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"verifyHostname\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"username\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"keystoreLocation\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"keystorePassword\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"truststoreLocation\").that.is.a(\"string\").and.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property(\"truststorePassword\").that.is.a(\"string\").and.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"log_type\", \"audit\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_login\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/remote-logging/{{log_type}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"remote-logging",
										"{{log_type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Remote Logging Configuration by log type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 202\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(202)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"remoteUrl\": \"https://test.remote.server.com/api/log\",\n\"connectTimeoutMillis\": \"5000\",\n\"verifyHostname\": true,\n\"username\": \"admin\",\n\"password\": \"admin\",\n\"keystoreLocation\": \"https://keystorelocation\",\n\"keystorePassword\": \"KeyStore890\",\n\"truststoreLocation\": \"https://truststorelocation\",\n\"truststorePassword\": \"TrustStore947\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/remote-logging/{{log_type}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"remote-logging",
										"{{log_type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore Server Remote Logging Configuration to defaults",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/remote-logging/{{log_type}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"remote-logging",
										"{{log_type}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore Server Remote Logging Configuration to defaults",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(204)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_delete\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/remote-logging",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"remote-logging"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Inbound Authentication Configurations",
					"item": [
						{
							"name": "Retrieve SAML2 inbound authentication configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate response structure\r",
											"pm.test(\"Validate response structure\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"destinationURLs\").that.is.an(\"array\").and.is.not.empty;\r",
											"    responseBody.destinationURLs.forEach(url => {\r",
											"        pm.expect(url).to.be.a(\"string\").and.is.not.empty;\r",
											"    });\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"metadataValidityPeriod\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"enableMetadataSigning\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"metadataEndpoint\").that.is.a(\"string\").and.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_view\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/authentication/inbound/saml2",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"authentication",
										"inbound",
										"saml2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update SAML2 inbound authentication configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"destinationURLs\": [\n  \"https://{{serverUrl}}/t/{{tenantDomain}}/samlsso\"\n],\n\"metadataValidityPeriod\": 60,\n\"enableMetadataSigning\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/authentication/inbound/saml2",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"authentication",
										"inbound",
										"saml2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve WS Federation (Passive STS) inbound authentication configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate response structure\r",
											"pm.test(\"Validate response structure\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    pm.expect(responseBody).to.have.property(\"enableRequestSigning\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"passiveSTSUrl\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_login\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/authentication/inbound/passivests",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"authentication",
										"inbound",
										"passivests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update WS Federation (Passive STS) inbound authentication configurations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_config_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"enableRequestSigning\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/configs/authentication/inbound/passivests",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"configs",
										"authentication",
										"inbound",
										"passivests"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.execution.skipRequest();"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Validation rules API",
			"item": [
				{
					"name": "Validation Rules",
					"item": [
						{
							"name": "Get Validation Rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate that responseBody is an array\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Validate the structure of each object in the array\r",
											"responseBody.forEach(function (item) {\r",
											"    pm.test(`Object has field and rules properties for field: ${item.field}`, function () {\r",
											"        pm.expect(item).to.have.property(\"field\");\r",
											"        pm.expect(item).to.have.property(\"rules\").that.is.an(\"array\").that.is.not.empty;\r",
											"    });\r",
											"\r",
											"    // Validate that rules is an array and contains the expected properties\r",
											"    item.rules.forEach(function (rule) {\r",
											"        pm.test(`Rule has validator and properties for field: ${item.field}`, function () {\r",
											"            pm.expect(rule).to.have.property(\"validator\");\r",
											"            pm.expect(rule).to.have.property(\"properties\").that.is.an(\"array\").that.is.not.empty;\r",
											"        });\r",
											"\r",
											"        // Validate that properties is an array and contains key and value\r",
											"        rule.properties.forEach(function (property) {\r",
											"            pm.test(`Property has key and value for rule: ${rule.validator}`, function () {\r",
											"                pm.expect(property).to.have.property(\"key\");\r",
											"                pm.expect(property).to.have.property(\"value\");\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/validation-rules",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"validation-rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Validation Rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate that responseBody is an array\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Validate the structure of each object in the array\r",
											"responseBody.forEach(function (item) {\r",
											"    pm.test(`Object has field and rules properties for field: ${item.field}`, function () {\r",
											"        pm.expect(item).to.have.property(\"field\");\r",
											"        pm.expect(item).to.have.property(\"rules\").that.is.an(\"array\").that.is.not.empty;\r",
											"    });\r",
											"\r",
											"    // Validate that rules is an array and contains the expected properties\r",
											"    item.rules.forEach(function (rule) {\r",
											"        pm.test(`Rule has validator and properties for field: ${item.field}`, function () {\r",
											"            pm.expect(rule).to.have.property(\"validator\");\r",
											"            pm.expect(rule).to.have.property(\"properties\").that.is.an(\"array\").that.is.not.empty;\r",
											"        });\r",
											"\r",
											"        // Validate that properties is an array and contains key and value\r",
											"        rule.properties.forEach(function (property) {\r",
											"            pm.test(`Property has key and value for rule: ${rule.validator}`, function () {\r",
											"                pm.expect(property).to.have.property(\"key\");\r",
											"                pm.expect(property).to.have.property(\"value\");\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_validation_rule_mgt_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"field\": \"password\",\n    \"rules\": [\n      {\n        \"validator\": \"LengthValidator\",\n        \"properties\": [\n          {\n            \"key\": \"min.length\",\n            \"value\": 5\n          },\n          {\n            \"key\": \"max.length\",\n            \"value\": 15\n          }\n        ]\n      }\n    ]\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/validation-rules",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"validation-rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Validation Rules for a field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"input_field\", \"password\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains 'field' and 'rules' properties\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"field\");\r",
											"    pm.expect(responseBody).to.have.property(\"rules\");\r",
											"});\r",
											"\r",
											"pm.test(\"The 'rules' property should be an array containing 'validator' and 'properties'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(Array.isArray(responseBody.rules)).to.be.true;\r",
											"    responseBody.rules.forEach(rule => {\r",
											"        pm.expect(rule).to.have.property(\"validator\");\r",
											"        pm.expect(rule).to.have.property(\"properties\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each 'properties' array should contain 'key' and 'value' properties\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    responseBody.rules.forEach(rule => {\r",
											"        rule.properties.forEach(property => {\r",
											"            pm.expect(property).to.have.property(\"key\");\r",
											"            pm.expect(property).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/validation-rules/{{input_field}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"validation-rules",
										"{{input_field}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Validation Rules for a field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response body is an object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains 'field' and 'rules' properties\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"field\");\r",
											"    pm.expect(responseBody).to.have.property(\"rules\");\r",
											"});\r",
											"\r",
											"pm.test(\"The 'rules' property should be an array containing 'validator' and 'properties'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(Array.isArray(responseBody.rules)).to.be.true;\r",
											"    responseBody.rules.forEach(rule => {\r",
											"        pm.expect(rule).to.have.property(\"validator\");\r",
											"        pm.expect(rule).to.have.property(\"properties\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each 'properties' array should contain 'key' and 'value' properties\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    responseBody.rules.forEach(rule => {\r",
											"        rule.properties.forEach(property => {\r",
											"            pm.expect(property).to.have.property(\"key\");\r",
											"            pm.expect(property).to.have.property(\"value\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"internal_validation_rule_mgt_update\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rules\": [\n    {\n      \"validator\": \"LengthValidator\",\n      \"properties\": [\n        {\n          \"key\": \"min.length\",\n          \"value\": \"5\"\n        },\n        {\n          \"key\": \"max.length\",\n          \"value\": \"15\"\n        }\n      ]\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/validation-rules/{{input_field}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"validation-rules",
										"{{input_field}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all validators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item in the array should have 'type', 'name', and 'properties'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    responseBody.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"type\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"        pm.expect(item).to.have.property(\"properties\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each 'properties' array should contain 'name', 'description', 'displayName', 'type', and 'displayOrder'\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    responseBody.forEach(item => {\r",
											"        pm.expect(Array.isArray(item.properties)).to.be.true;\r",
											"        item.properties.forEach(property => {\r",
											"            pm.expect(property).to.have.property(\"name\");\r",
											"            pm.expect(property).to.have.property(\"description\");\r",
											"            pm.expect(property).to.have.property(\"displayName\");\r",
											"            pm.expect(property).to.have.property(\"type\");\r",
											"            pm.expect(property).to.have.property(\"displayOrder\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"grant_type\", value: \"client_credentials\" },\r",
											"            { key: \"scope\", value: \"\" } // Uses a dynamic scope\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/validation-rules/validators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"validation-rules",
										"validators"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete Folder",
			"item": [
				{
					"name": "Delete application by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"grant_type\", value: \"client_credentials\" },\r",
									"            { key: \"scope\", value: \"internal_application_mgt_delete\" } // Uses a dynamic scope\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{applicationID}}",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"api",
								"server",
								"v1",
								"applications",
								"{{applicationID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete application by ID-SAML",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"grant_type\", value: \"client_credentials\" },\r",
									"            { key: \"scope\", value: \"internal_application_mgt_delete\" } // Uses a dynamic scope\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "https://localhost:9443/api/server/v1/applications/{{application_saml_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "9443",
							"path": [
								"api",
								"server",
								"v1",
								"applications",
								"{{application_saml_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete application by ID Passive STS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"grant_type\", value: \"client_credentials\" },\r",
									"            { key: \"scope\", value: \"internal_application_mgt_delete\" } // Uses a dynamic scope\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{application_sts_id}}",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"api",
								"server",
								"v1",
								"applications",
								"{{application_sts_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API scope specified by the name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"grant_type\", value: \"client_credentials\" },\r",
									"            { key: \"scope\", value: \"internal_api_resource_delete\" } // Uses a dynamic scope\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources/{{apiResourceId}}/scopes/{{scopeName}}",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"api",
								"server",
								"v1",
								"api-resources",
								"{{apiResourceId}}",
								"scopes",
								"{{scopeName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete API resource specified by the id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"grant_type\", value: \"client_credentials\" },\r",
									"            { key: \"scope\", value: \"internal_api_resource_delete\" } // Uses a dynamic scope\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/api-resources/{{apiResourceId}}",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"api",
								"server",
								"v1",
								"api-resources",
								"{{apiResourceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"grant_type\", value: \"client_credentials\" },\r",
									"            { key: \"scope\", value: \"internal_bulk_resource_create\" } // Uses a dynamic scope\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"auth_token\", jsonResponse.access_token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"schemas\": [\r\n        \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\r\n    ],\r\n    \"Operations\": [\r\n        {\r\n            \"method\": \"DELETE\",\r\n            \"path\": \"/Users/{{user_id}}\"\r\n        },\r\n        {\r\n            \"method\": \"DELETE\",\r\n            \"path\": \"/Users/{{user1_id}}\"\r\n        },\r\n        {\r\n            \"method\": \"DELETE\",\r\n            \"path\": \"/Users/{{user_id_01}}\"\r\n        },\r\n        {\r\n            \"method\": \"DELETE\",\r\n            \"path\": \"/Groups/{{group_id}}\"\r\n        },\r\n        {\r\n            \"method\": \"DELETE\",\r\n            \"path\": \"/Groups/{{group_id_01}}\"\r\n        },\r\n        {\r\n            \"method\": \"DELETE\",\r\n            \"path\": \"/Groups/{{group1_id}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Bulk",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"scim2",
								"Bulk"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiResourceId",
			"value": ""
		},
		{
			"key": "scopeName",
			"value": ""
		},
		{
			"key": "application_name",
			"value": ""
		},
		{
			"key": "applicationID",
			"value": ""
		},
		{
			"key": "application_API",
			"value": ""
		},
		{
			"key": "apiID",
			"value": ""
		},
		{
			"key": "application_saml_id",
			"value": ""
		},
		{
			"key": "applicationId_OIDC",
			"value": ""
		},
		{
			"key": "clientId",
			"value": ""
		},
		{
			"key": "clientSecret",
			"value": ""
		},
		{
			"key": "clientId_oidc",
			"value": ""
		},
		{
			"key": "clientSecret_oidc",
			"value": ""
		},
		{
			"key": "applicationId_STS",
			"value": ""
		},
		{
			"key": "application_sts_id",
			"value": ""
		},
		{
			"key": "oidcTemplateId",
			"value": ""
		},
		{
			"key": "userID",
			"value": ""
		},
		{
			"key": "log_type",
			"value": ""
		},
		{
			"key": "schema_id",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "groupId",
			"value": ""
		},
		{
			"key": "group_id",
			"value": ""
		},
		{
			"key": "user-id",
			"value": ""
		},
		{
			"key": "recoveryCode",
			"value": ""
		},
		{
			"key": "recoveryCode_U",
			"value": ""
		},
		{
			"key": "recoveryCode_P2",
			"value": ""
		},
		{
			"key": "resendCode_P2",
			"value": ""
		},
		{
			"key": "flowConfirmationCode_P2",
			"value": ""
		},
		{
			"key": "recoveryCode_P",
			"value": ""
		},
		{
			"key": "resendCode_P",
			"value": ""
		},
		{
			"key": "flowConfirmationCode_P",
			"value": ""
		},
		{
			"key": "user1_id",
			"value": ""
		},
		{
			"key": "user2_id",
			"value": ""
		},
		{
			"key": "userid_a",
			"value": ""
		},
		{
			"key": "userid_fd1",
			"value": ""
		},
		{
			"key": "user_admin_id",
			"value": ""
		},
		{
			"key": "role_id",
			"value": ""
		},
		{
			"key": "catergory_id",
			"value": ""
		},
		{
			"key": "connector_id",
			"value": ""
		},
		{
			"key": "alias",
			"value": ""
		},
		{
			"key": "organization_id",
			"value": ""
		},
		{
			"key": "script_library_name",
			"value": ""
		},
		{
			"key": "applicationId_shared",
			"value": ""
		},
		{
			"key": "orgID_01",
			"value": ""
		},
		{
			"key": "orgID_02",
			"value": ""
		},
		{
			"key": "userstore_id",
			"value": ""
		},
		{
			"key": "userstore_type_id",
			"value": ""
		},
		{
			"key": "cors_origins_id",
			"value": ""
		},
		{
			"key": "consent_receipt_id",
			"value": ""
		},
		{
			"key": "purpose_id",
			"value": ""
		},
		{
			"key": "purpose_category_id",
			"value": ""
		},
		{
			"key": "pii_category_Id",
			"value": ""
		},
		{
			"key": "email_template_id",
			"value": ""
		},
		{
			"key": "template_id",
			"value": ""
		},
		{
			"key": "template_type_id",
			"value": ""
		},
		{
			"key": "sub_organization_id",
			"value": ""
		},
		{
			"key": "authenticator_id",
			"value": ""
		},
		{
			"key": "scope_name",
			"value": ""
		},
		{
			"key": "authenticator_Id",
			"value": ""
		},
		{
			"key": "claimId",
			"value": ""
		},
		{
			"key": "dialect_Id",
			"value": ""
		},
		{
			"key": "claim_Id",
			"value": ""
		},
		{
			"key": "extensionType",
			"value": ""
		},
		{
			"key": "extensionId",
			"value": ""
		},
		{
			"key": "identity_provider_id",
			"value": ""
		},
		{
			"key": "federated_authenticator_id",
			"value": ""
		},
		{
			"key": "input_field",
			"value": ""
		},
		{
			"key": "group1_id",
			"value": ""
		},
		{
			"key": "user_id_01",
			"value": ""
		},
		{
			"key": "serverUrl",
			"value": "localhost:9443",
			"type": "string"
		},
		{
			"key": "tenantDomain",
			"value": "carbon.super",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "default"
		},
		{
			"key": "Main_Application_ID",
			"value": ""
		},
		{
			"key": "Main_Application_Client_ID",
			"value": ""
		},
		{
			"key": "Main_Application_Client_Secret",
			"value": ""
		},
		{
			"key": "authHeader",
			"value": ""
		},
		{
			"key": "token_url",
			"value": "https://localhost:9443/t/carbon.super/oauth2/token",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": ""
		}
	]
}