{
	"info": {
		"name": "Organization APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-Requests",
			"item": [
				{
					"name": "Role based application creation",
					"item": [
						{
							"name": "Create an Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){\r",
											"\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"Main_Organization_ID\", responseBody.id);\r",
											"\r",
											"// Validate status code\r",
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});\r",
											"\r",
											"console.log(\"Sub org ID:\", pm.collectionVariables.get(\"Main_Organization_ID\"));\r",
											"\r",
											"}, 1000);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Test Organization\",\r\n  \"description\": \"This organization is for testing organization APIs for out testsuite.\",\r\n  \"attributes\": [\r\n\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/organizations",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get application ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"// Parse the JSON response body\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Check if the applications array exists\r",
											"if (response.applications && Array.isArray(response.applications)) {\r",
											"    // Search for the application with name \"New Application\"\r",
											"    let application = response.applications.find(t => t.name === \"E2E-Test-Suite-Token\");\r",
											"    \r",
											"    // If the application is found, set the ID as a collection variable\r",
											"    if (application) {\r",
											"        pm.collectionVariables.set(\"Main_Application_ID\", application.id);\r",
											"        console.log(\"Found application ID:\", application.id);  // Log the ID for verification\r",
											"    } else {\r",
											"        console.log(\"application with name 'E2E-Test-Suite-Token' not found\");\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Response does not contain a valid 'applications' array\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications?limit=30&offset=0",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"applications"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get application by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"Main_Application_Client_ID\", responseBody.clientId);\r",
											"\r",
											"pm.collectionVariables.set(\"Main_Application_Client_Secret\", responseBody.clientSecret);\r",
											"\r",
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{Main_Application_ID}}/inbound-protocols/oidc",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"applications",
										"{{Main_Application_ID}}",
										"inbound-protocols",
										"oidc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Share application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){\r",
											"\r",
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"shareWithAllChildren\": false,\n  \"sharedOrganizations\": [\n    \"{{Main_Organization_ID}}\"\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{Main_Application_ID}}/share",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"applications",
										"{{Main_Application_ID}}",
										"share"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//pm.execution.skipRequest();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer f2a17805-6842-37e9-9b73-e321d13ba99d"
									},
									{
										"key": "Access-Control-Allow-Origin",
										"value": "https://localhost:9443/t/carbon.super/console"
									},
									{
										"key": "Referer",
										"value": ""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accessToken\": {\r\n        \"applicationAccessTokenExpiryInSeconds\": 3600,\r\n        \"bindingType\": \"None\",\r\n        \"revokeTokensWhenIDPSessionTerminated\": false,\r\n        \"type\": \"Default\",\r\n        \"userAccessTokenExpiryInSeconds\": 3600,\r\n        \"validateTokenBinding\": false\r\n    },\r\n    \"grantTypes\": [\r\n        \"client_credentials\",\r\n        \"organization_switch\"\r\n    ],\r\n    \"idToken\": {\r\n        \"audience\": [],\r\n        \"encryption\": {\r\n            \"algorithm\": \"RSA-OAEP\",\r\n            \"enabled\": false,\r\n            \"method\": \"A128GCM\"\r\n        },\r\n        \"expiryInSeconds\": 3600,\r\n        \"idTokenSignedResponseAlg\": \"\"\r\n    },\r\n    \"logout\": {\r\n        \"backChannelLogoutUrl\": \"\"\r\n    },\r\n    \"publicClient\": false,\r\n    \"refreshToken\": {\r\n        \"expiryInSeconds\": 86400,\r\n        \"renewRefreshToken\": false\r\n    },\r\n    \"allowedOrigins\": [],\r\n    \"callbackURLs\": [],\r\n    \"pkce\": {\r\n        \"mandatory\": false,\r\n        \"supportPlainTransformAlgorithm\": false\r\n    },\r\n    \"clientAuthentication\": {\r\n        \"tokenEndpointAuthMethod\": \"\"\r\n    },\r\n    \"pushAuthorizationRequest\": {\r\n        \"requirePushAuthorizationRequest\": false\r\n    },\r\n    \"requestObject\": {\r\n        \"encryption\": {\r\n            \"algorithm\": \"\",\r\n            \"method\": \"\"\r\n        },\r\n        \"requestObjectSigningAlg\": \"\"\r\n    },\r\n    \"subject\": {\r\n        \"subjectType\": \"public\"\r\n    },\r\n    \"clientId\": \"{{Main_Application_Client_ID}}\",\r\n    \"clientSecret\": \"{{Main_Application_Client_Secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{Main_Application_ID}}/inbound-protocols/oidc",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"applications",
										"{{Main_Application_ID}}",
										"inbound-protocols",
										"oidc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update protocols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Debug Response\", function() {\r",
											"    console.log(\"=== Response Debug ===\");\r",
											"    console.log(\"Status:\", pm.response.code);\r",
											"    console.log(\"Response Headers:\", pm.response.headers.toObject());\r",
											"    \r",
											"    try {\r",
											"        var responseBody = pm.response.json();\r",
											"        console.log(\"Response Body:\", responseBody);\r",
											"    } catch (e) {\r",
											"        console.log(\"Raw Response:\", pm.response.text());\r",
											"    }\r",
											"    \r",
											"    // Original test\r",
											"    pm.test(\"Response status is 200\", function() {\r",
											"        pm.expect(pm.response.code).to.equal(200);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//pm.execution.skipRequest();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Access-Control-Allow-Origin",
										"value": "https://localhost:9443/t/carbon.super/console"
									},
									{
										"key": "Referer",
										"value": ""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\": {\n        \"accessTokenAttributes\": [],\n        \"applicationAccessTokenExpiryInSeconds\": 3600,\n        \"bindingType\": \"None\",\n        \"revokeTokensWhenIDPSessionTerminated\": false,\n        \"type\": \"Default\",\n        \"userAccessTokenExpiryInSeconds\": 3600,\n        \"validateTokenBinding\": false\n    },\n    \"grantTypes\": [\n        \"client_credentials\",\n        \"organization_switch\"\n    ],\n    \"idToken\": {\n        \"audience\": [],\n        \"expiryInSeconds\": 3600,\n        \"idTokenSignedResponseAlg\": \"\"\n    },\n    \"logout\": {\n        \"backChannelLogoutUrl\": \"\"\n    },\n    \"publicClient\": false,\n    \"refreshToken\": {\n        \"expiryInSeconds\": 86400,\n        \"renewRefreshToken\": false\n    },\n    \"subjectToken\": {\n        \"applicationSubjectTokenExpiryInSeconds\": 180,\n        \"enable\": false\n    },\n    \"allowedOrigins\": [],\n    \"callbackURLs\": [],\n    \"pkce\": {\n        \"mandatory\": false,\n        \"supportPlainTransformAlgorithm\": false\n    },\n    \"hybridFlow\": {\n        \"enable\": false,\n        \"responseType\": null\n    },\n    \"clientAuthentication\": {\n        \"tokenEndpointAllowReusePvtKeyJwt\": null,\n        \"tokenEndpointAuthMethod\": \"\"\n    },\n    \"pushAuthorizationRequest\": {\n        \"requirePushAuthorizationRequest\": false\n    },\n    \"requestObject\": {\n        \"encryption\": {\n            \"algorithm\": \"\",\n            \"method\": \"\"\n        },\n        \"requestObjectSigningAlg\": \"\"\n    },\n    \"subject\": {\n        \"subjectType\": \"public\"\n    },\n    \"clientId\": \"{{Main_Application_Client_ID}}\",\n    \"clientSecret\": \"{{Main_Application_Client_Secret}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/api/server/v1/applications/{{Main_Application_ID}}/inbound-protocols/oidc",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"api",
										"server",
										"v1",
										"applications",
										"{{Main_Application_ID}}",
										"inbound-protocols",
										"oidc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Get user id\r",
											"pm.collectionVariables.set(\"Main_User_ID1\", responseBody.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"emails\": [\r\n        {\r\n            \"primary\": true,\r\n            \"value\": \"user1testmaindomain@hjkiopo.com\"\r\n        }\r\n    ],\r\n    \"name\": {\r\n        \"familyName\": \"User_01\",\r\n        \"givenName\": \"Main_Domain\"\r\n    },\r\n    \"password\": \"User_01234\",\r\n    \"userName\": \"PRIMARY/MainDomainUser01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/Users",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"scim2",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){\r",
											"    pm.test(\"Response status is 201\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"}, 1000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 9a7b2f6a-7237-350e-a35e-f785d5c1e14e"
									},
									{
										"key": "Access-Control-Allow-Origin",
										"value": "https://localhost:9443/t/carbon.super/console"
									},
									{
										"key": "Referer",
										"value": ""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"audience\": {\r\n        \"type\": \"APPLICATION\",\r\n        \"value\": \"{{Main_Application_ID}}\"\r\n    },\r\n    \"displayName\": \"loginRole\",\r\n    \"permissions\": [\r\n        {\r\n            \"value\": \"internal_org_bulk_resource_create\"\r\n        }\r\n    ],\r\n    \"schemas\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/scim2/v2/Roles",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"scim2",
										"v2",
										"Roles"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Sub Organization Access Token creation Copy",
					"item": [
						{
							"name": "Client credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed the assignment syntax\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseBody.access_token);\r",
											"\r",
											"console.log(pm.collectionVariables.get(\"access_token\"));\r",
											"\r",
											"pm.test(\"Response status is 200\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(200)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var username = pm.collectionVariables.get(\"Main_Application_Client_ID\");\r",
											"var password = pm.collectionVariables.get(\"Main_Application_Client_Secret\");\r",
											"\r",
											"if (username && password) {\r",
											"    let authString = username + \":\" + password;\r",
											"    let encodedAuth = Buffer.from(authString, 'utf-8').toString('base64');\r",
											"\r",
											"    pm.collectionVariables.set(\"authHeader\", \"Basic \" + encodedAuth);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{all_scopes}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{Main_Application_Client_ID}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{Main_Application_Client_Secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/oauth2/token",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Application management API",
			"item": [
				{
					"name": "Applications",
					"item": [
						{
							"name": "List applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate top-level properties\r",
											"pm.test(\"Validate top-level properties\", () => {\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"count\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"applications\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"links\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Validate \"applications\" array\r",
											"pm.test(\"Validate 'applications' array\", () => {\r",
											"    \r",
											"    responseBody.applications.forEach(application => {\r",
											"        pm.expect(application).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(application).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(application).to.have.property(\"applicationVersion\").that.is.a(\"string\");\r",
											"        pm.expect(application).to.have.property(\"access\").that.is.a(\"string\");\r",
											"        pm.expect(application).to.have.property(\"self\").that.is.a(\"string\");\r",
											"        if (application.name === \"Console\") {\r",
											"            pm.expect(application).to.have.property(\"description\").that.is.a(\"string\");\r",
											"            pm.expect(application).to.have.property(\"accessUrl\").that.is.a(\"string\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"// Check if the applications array exists\r",
											"if (responseBody.applications && Array.isArray(responseBody.applications)) {\r",
											"    // Search for the application with name \"New Application\"\r",
											"    let application = responseBody.applications.find(t => t.name === \"E2E-Test-Suite-Token\");\r",
											"    \r",
											"    // If the application is found, set the ID as a collection variable\r",
											"    if (application) {\r",
											"        pm.collectionVariables.set(\"shared_application_id\", application.id);\r",
											"        console.log(\"Found application ID:\", application.id);  // Log the ID for verification\r",
											"    } else {\r",
											"        console.log(\"application with name 'API Test Application' not found\");\r",
											"    }\r",
											"} else {\r",
											"    console.log(\"Response does not contain a valid 'applications' array\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_application_mgt_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/applications?limit=30&offset=0",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"applications"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve application by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_application_mgt_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate application object structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Top-level validation\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"applicationVersion\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"clientId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"issuer\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"realm\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"templateId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"templateVersion\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isManagementApp\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"applicationEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"access\").that.is.a(\"string\");\r",
											"\r",
											"    // Associated roles validation\r",
											"    pm.expect(responseBody).to.have.property(\"associatedRoles\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.associatedRoles).to.have.property(\"allowedAudience\").that.is.a(\"string\");\r",
											"\r",
											"    // Claim configuration validation\r",
											"    pm.expect(responseBody).to.have.property(\"claimConfiguration\").that.is.an(\"object\");\r",
											"    const claimConfig = responseBody.claimConfiguration;\r",
											"\r",
											"    pm.expect(claimConfig).to.have.property(\"dialect\").that.is.a(\"string\");\r",
											"    pm.expect(claimConfig).to.have.property(\"claimMappings\").that.is.an(\"array\");\r",
											"    claimConfig.claimMappings.forEach(mapping => {\r",
											"        pm.expect(mapping).to.have.property(\"applicationClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\").that.is.an(\"object\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    pm.expect(claimConfig).to.have.property(\"requestedClaims\").that.is.an(\"array\");\r",
											"    claimConfig.requestedClaims.forEach(claim => {\r",
											"        pm.expect(claim).to.have.property(\"claim\").that.is.an(\"object\");\r",
											"        pm.expect(claim.claim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"mandatory\").that.is.a(\"boolean\");\r",
											"    });\r",
											"\r",
											"    pm.expect(claimConfig).to.have.property(\"subject\").that.is.an(\"object\");\r",
											"    pm.expect(claimConfig.subject).to.have.property(\"includeUserDomain\").that.is.a(\"boolean\");\r",
											"    pm.expect(claimConfig.subject).to.have.property(\"includeTenantDomain\").that.is.a(\"boolean\");\r",
											"    pm.expect(claimConfig.subject).to.have.property(\"useMappedLocalSubject\").that.is.a(\"boolean\");\r",
											"    pm.expect(claimConfig.subject).to.have.property(\"mappedLocalSubjectMandatory\").that.is.a(\"boolean\");\r",
											"\r",
											"    pm.expect(claimConfig).to.have.property(\"role\").that.is.an(\"object\");\r",
											"    pm.expect(claimConfig.role).to.have.property(\"includeUserDomain\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Inbound protocols validation\r",
											"    pm.expect(responseBody).to.have.property(\"inboundProtocols\").that.is.an(\"array\");\r",
											"    responseBody.inboundProtocols.forEach(protocol => {\r",
											"        pm.expect(protocol).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(protocol).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Authentication sequence validation\r",
											"    pm.expect(responseBody).to.have.property(\"authenticationSequence\").that.is.an(\"object\");\r",
											"    const authSequence = responseBody.authenticationSequence;\r",
											"\r",
											"    pm.expect(authSequence).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(authSequence).to.have.property(\"steps\").that.is.an(\"array\");\r",
											"    authSequence.steps.forEach(step => {\r",
											"        pm.expect(step).to.have.property(\"id\").that.is.a(\"number\");\r",
											"        pm.expect(step).to.have.property(\"options\").that.is.an(\"array\");\r",
											"        step.options.forEach(option => {\r",
											"            pm.expect(option).to.have.property(\"idp\").that.is.a(\"string\");\r",
											"            pm.expect(option).to.have.property(\"authenticator\").that.is.a(\"string\");\r",
											"        });\r",
											"    });\r",
											"    pm.expect(authSequence).to.have.property(\"requestPathAuthenticators\").that.is.an(\"array\");\r",
											"    pm.expect(authSequence).to.have.property(\"subjectStepId\").that.is.a(\"number\");\r",
											"    pm.expect(authSequence).to.have.property(\"attributeStepId\").that.is.a(\"number\");\r",
											"\r",
											"    // Advanced configurations validation\r",
											"    pm.expect(responseBody).to.have.property(\"advancedConfigurations\").that.is.an(\"object\");\r",
											"    const advConfig = responseBody.advancedConfigurations;\r",
											"\r",
											"    pm.expect(advConfig).to.have.property(\"saas\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig).to.have.property(\"discoverableByEndUsers\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig).to.have.property(\"skipLoginConsent\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig).to.have.property(\"skipLogoutConsent\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig).to.have.property(\"returnAuthenticatedIdpList\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig).to.have.property(\"enableAuthorization\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig).to.have.property(\"fragment\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig).to.have.property(\"enableAPIBasedAuthentication\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig).to.have.property(\"attestationMetaData\").that.is.an(\"object\");\r",
											"    pm.expect(advConfig.attestationMetaData).to.have.property(\"enableClientAttestation\").that.is.a(\"boolean\");\r",
											"    pm.expect(advConfig.attestationMetaData).to.have.property(\"androidPackageName\").that.is.a(\"string\");\r",
											"    pm.expect(advConfig.attestationMetaData).to.have.property(\"appleAppId\").that.is.a(\"string\");\r",
											"\r",
											"    pm.expect(advConfig).to.have.property(\"additionalSpProperties\").that.is.an(\"array\");\r",
											"    advConfig.additionalSpProperties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    pm.expect(advConfig).to.have.property(\"useExternalConsentPage\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Provisioning configurations validation\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningConfigurations\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.provisioningConfigurations).to.have.property(\"outboundProvisioningIdps\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/applications/{{shared_application_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"applications",
										"{{shared_application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Idp Connector",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_create\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"idp_connector_id1\", responseBody.id)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 37241278-0846-38db-b0f9-930b8dc67d08"
									},
									{
										"key": "Referer",
										"value": ""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"image\": \"assets/images/logos/enterprise.svg\",\r\n    \"isPrimary\": false,\r\n    \"roles\": {\r\n        \"mappings\": [],\r\n        \"outboundProvisioningRoles\": []\r\n    },\r\n    \"certificate\": {\r\n        \"jwksUri\": \"\",\r\n        \"certificates\": [\r\n            \"\"\r\n        ]\r\n    },\r\n    \"claims\": {\r\n        \"userIdClaim\": {\r\n            \"uri\": \"\"\r\n        },\r\n        \"provisioningClaims\": [],\r\n        \"roleClaim\": {\r\n            \"uri\": \"\"\r\n        }\r\n    },\r\n    \"name\": \"Enterprise IDP\",\r\n    \"alias\": \"\",\r\n    \"description\": \"Authenticate users with Enterprise OIDC connections.\",\r\n    \"federatedAuthenticators\": {\r\n        \"defaultAuthenticatorId\": \"T3BlbklEQ29ubmVjdEF1dGhlbnRpY2F0b3I\",\r\n        \"authenticators\": [\r\n            {\r\n                \"isEnabled\": true,\r\n                \"authenticatorId\": \"T3BlbklEQ29ubmVjdEF1dGhlbnRpY2F0b3I\",\r\n                \"properties\": [\r\n                    {\r\n                        \"key\": \"ClientId\",\r\n                        \"value\": \"jhkljdfle\"\r\n                    },\r\n                    {\r\n                        \"key\": \"ClientSecret\",\r\n                        \"value\": \"jkfjlfk;-djdhfwjflj\"\r\n                    },\r\n                    {\r\n                        \"key\": \"OAuth2AuthzEPUrl\",\r\n                        \"value\": \"https://myapp.io\"\r\n                    },\r\n                    {\r\n                        \"key\": \"OAuth2TokenEPUrl\",\r\n                        \"value\": \"https://gsieidheo.com\"\r\n                    },\r\n                    {\r\n                        \"key\": \"callbackUrl\",\r\n                        \"value\": \"https://localhost:9443/o/c5b91305-43d9-4832-ab68-e4e2d1536f4f/commonauth\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"homeRealmIdentifier\": \"\",\r\n    \"isFederationHub\": false,\r\n    \"idpIssuerName\": \"\",\r\n    \"templateId\": \"enterprise-oidc-idp\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:9443/t/carbon.super/o/api/server/v1/identity-providers",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9443",
									"path": [
										"t",
										"carbon.super",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partially update application by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_application_mgt_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authenticationSequence\": {\n      \"attributeStepId\": 1,\n      \"steps\": [\n          {\n              \"id\": 1,\n              \"options\": [\n                  {\n                      \"authenticator\": \"OpenIDConnectAuthenticator\",\n                      \"idp\": \"Enterprise IDP\"\n                  }\n              ]\n          }\n      ],\n      \"subjectStepId\": 1,\n      \"type\": \"USER_DEFINED\",\n      \"script\": \"\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/applications/{{shared_application_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"applications",
										"{{shared_application_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revert to default(application login flow)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_application_mgt_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 37241278-0846-38db-b0f9-930b8dc67d08"
									},
									{
										"key": "Access-Control-Allow-Origin",
										"value": "https://localhost:9443/t/carbon.super/o/c5b91305-43d9-4832-ab68-e4e2d1536f4f/console"
									},
									{
										"key": "Referer",
										"value": ""
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authenticationSequence\": {\r\n        \"steps\": [\r\n            {\r\n                \"id\": 1,\r\n                \"options\": [\r\n                    {\r\n                        \"idp\": \"LOCAL\",\r\n                        \"authenticator\": \"BasicAuthenticator\"\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        \"attributeStepId\": 1,\r\n        \"requestPathAuthenticators\": [],\r\n        \"script\": \"\",\r\n        \"subjectStepId\": 1,\r\n        \"type\": \"DEFAULT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:9443/t/carbon.super/o/api/server/v1/applications/{{shared_application_id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "9443",
									"path": [
										"t",
										"carbon.super",
										"o",
										"api",
										"server",
										"v1",
										"applications",
										"{{shared_application_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authenticators",
					"item": [
						{
							"name": "Get configured authenticators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate API Application Response Structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"applicationVersion\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"clientId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"issuer\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"realm\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"templateId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"templateVersion\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isManagementApp\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"applicationEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"access\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate associatedRoles\r",
											"    pm.expect(responseBody).to.have.property(\"associatedRoles\").that.is.an(\"object\");\r",
											"    const associatedRoles = responseBody.associatedRoles;\r",
											"    pm.expect(associatedRoles).to.have.property(\"allowedAudience\").that.is.a(\"string\");\r",
											"    pm.expect(associatedRoles).to.have.property(\"roles\").that.is.an(\"array\");\r",
											"    associatedRoles.roles.forEach(role => {\r",
											"        pm.expect(role).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(role).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate claimConfiguration\r",
											"    pm.expect(responseBody).to.have.property(\"claimConfiguration\").that.is.an(\"object\");\r",
											"    const claimConfiguration = responseBody.claimConfiguration;\r",
											"    pm.expect(claimConfiguration).to.have.property(\"dialect\").that.is.a(\"string\");\r",
											"    pm.expect(claimConfiguration).to.have.property(\"claimMappings\").that.is.an(\"array\");\r",
											"    claimConfiguration.claimMappings.forEach(mapping => {\r",
											"        pm.expect(mapping).to.have.property(\"applicationClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\").that.is.an(\"object\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    });\r",
											"    pm.expect(claimConfiguration).to.have.property(\"requestedClaims\").that.is.an(\"array\");\r",
											"    claimConfiguration.requestedClaims.forEach(claim => {\r",
											"        pm.expect(claim).to.have.property(\"claim\").that.is.an(\"object\");\r",
											"        pm.expect(claim.claim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(claim).to.have.property(\"mandatory\").that.is.a(\"boolean\");\r",
											"    });\r",
											"    pm.expect(claimConfiguration).to.have.property(\"subject\").that.is.an(\"object\");\r",
											"    const subject = claimConfiguration.subject;\r",
											"    pm.expect(subject).to.have.property(\"includeUserDomain\").that.is.a(\"boolean\");\r",
											"    pm.expect(subject).to.have.property(\"includeTenantDomain\").that.is.a(\"boolean\");\r",
											"    pm.expect(subject).to.have.property(\"useMappedLocalSubject\").that.is.a(\"boolean\");\r",
											"    pm.expect(subject).to.have.property(\"mappedLocalSubjectMandatory\").that.is.a(\"boolean\");\r",
											"\r",
											"    pm.expect(claimConfiguration).to.have.property(\"role\").that.is.an(\"object\");\r",
											"    const roleConfig = claimConfiguration.role;\r",
											"    pm.expect(roleConfig).to.have.property(\"includeUserDomain\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate inboundProtocols\r",
											"    pm.expect(responseBody).to.have.property(\"inboundProtocols\").that.is.an(\"array\");\r",
											"    responseBody.inboundProtocols.forEach(protocol => {\r",
											"        pm.expect(protocol).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(protocol).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate authenticationSequence\r",
											"    pm.expect(responseBody).to.have.property(\"authenticationSequence\").that.is.an(\"object\");\r",
											"    const authenticationSequence = responseBody.authenticationSequence;\r",
											"    pm.expect(authenticationSequence).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(authenticationSequence).to.have.property(\"steps\").that.is.an(\"array\");\r",
											"    authenticationSequence.steps.forEach(step => {\r",
											"        pm.expect(step).to.have.property(\"id\").that.is.a(\"number\");\r",
											"        pm.expect(step).to.have.property(\"options\").that.is.an(\"array\");\r",
											"        step.options.forEach(option => {\r",
											"            pm.expect(option).to.have.property(\"idp\").that.is.a(\"string\");\r",
											"            pm.expect(option).to.have.property(\"authenticator\").that.is.a(\"string\");\r",
											"        });\r",
											"    });\r",
											"    pm.expect(authenticationSequence).to.have.property(\"requestPathAuthenticators\").that.is.an(\"array\");\r",
											"    pm.expect(authenticationSequence).to.have.property(\"subjectStepId\").that.is.a(\"number\");\r",
											"    pm.expect(authenticationSequence).to.have.property(\"attributeStepId\").that.is.a(\"number\");\r",
											"\r",
											"    // Validate advancedConfigurations\r",
											"    pm.expect(responseBody).to.have.property(\"advancedConfigurations\").that.is.an(\"object\");\r",
											"    const advancedConfigurations = responseBody.advancedConfigurations;\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"saas\").that.is.a(\"boolean\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"discoverableByEndUsers\").that.is.a(\"boolean\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"skipLoginConsent\").that.is.a(\"boolean\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"skipLogoutConsent\").that.is.a(\"boolean\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"returnAuthenticatedIdpList\").that.is.a(\"boolean\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"enableAuthorization\").that.is.a(\"boolean\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"fragment\").that.is.a(\"boolean\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"enableAPIBasedAuthentication\").that.is.a(\"boolean\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"attestationMetaData\").that.is.an(\"object\");\r",
											"    const attestationMetaData = advancedConfigurations.attestationMetaData;\r",
											"    pm.expect(attestationMetaData).to.have.property(\"enableClientAttestation\").that.is.a(\"boolean\");\r",
											"    pm.expect(attestationMetaData).to.have.property(\"androidPackageName\").that.is.a(\"string\");\r",
											"    pm.expect(attestationMetaData).to.have.property(\"appleAppId\").that.is.a(\"string\");\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"additionalSpProperties\").that.is.an(\"array\");\r",
											"    advancedConfigurations.additionalSpProperties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"    pm.expect(advancedConfigurations).to.have.property(\"useExternalConsentPage\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate provisioningConfigurations\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningConfigurations\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.provisioningConfigurations).to.have.property(\"outboundProvisioningIdps\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_application_mgt_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/applications/{{shared_application_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"applications",
										"{{shared_application_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
									"            { key: \"grant_type\", value: \"organization_switch\" },\r",
									"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
									"            { key: \"scope\", value: \"internal_org_idp_delete\" }\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 37241278-0846-38db-b0f9-930b8dc67d08"
							},
							{
								"key": "Referer",
								"value": ""
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{idp_connector_id1}}",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"o",
								"api",
								"server",
								"v1",
								"identity-providers",
								"{{idp_connector_id1}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User management",
			"item": [
				{
					"name": "SCIM 2.0 Users API",
					"item": [
						{
							"name": "Users Endpoint",
							"item": [
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"user_id_subOrg\", responseBody.id);\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"emails\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"name\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"userName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\").that.is.an(\"object\");\r",
													"});\r",
													"\r",
													"// Validate \"emails\" array\r",
													"pm.test(\"Validate 'emails' array\", () => {\r",
													"    responseBody.emails.forEach((email, index) => {\r",
													"        if (typeof email === \"object\") {\r",
													"            pm.expect(email).to.have.property(\"type\").that.is.a(\"string\");\r",
													"            pm.expect(email).to.have.property(\"value\").that.is.a(\"string\");\r",
													"        } else {\r",
													"            pm.expect(email).to.be.a(\"string\");\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"meta\" object\r",
													"pm.test(\"Validate 'meta' object\", () => {\r",
													"    pm.expect(responseBody.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"resourceType\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    responseBody.schemas.forEach((schema, index) => {\r",
													"        pm.expect(schema).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"name\" object\r",
													"pm.test(\"Validate 'name' object\", () => {\r",
													"    pm.expect(responseBody.name).to.have.property(\"givenName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.name).to.have.property(\"familyName\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\" object\r",
													"pm.test(\"Validate SCIM enterprise user extension\", () => {\r",
													"    let enterpriseUser = responseBody[\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"];\r",
													"    if (enterpriseUser.manager) {\r",
													"        pm.expect(enterpriseUser.manager).to.have.property(\"value\").that.is.a(\"string\");\r",
													"    }\r",
													"    if (enterpriseUser.employeeNumber) {\r",
													"        pm.expect(enterpriseUser.employeeNumber).to.be.a(\"string\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_user_mgt_create\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [],\n\"name\": {\n  \"givenName\": \"Malcome\",\n  \"familyName\": \"Berry\"\n},\n\"userName\": \"Malcome\",\n\"password\": \"MyPa33w@rd\",\n\"emails\": [\n  {\n    \"value\": \"kim@gmail.com\",\n  },\n  {\n    \"type\": \"work\",\n    \"value\": \"kim@wso2.com\"\n  }\n],\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n  \"employeeNumber\": \"1234A\",\n  \"manager\": {\n    \"value\": \"Taylor\"\n  }\n}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Users",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"itemsPerPage\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"});\r",
													"\r",
													"// Validate each resource in the \"Resources\" array\r",
													"responseBody.Resources.forEach((resource, index) => {\r",
													"    pm.test(`Validate resource at index ${index}`, () => {\r",
													"        pm.expect(resource).to.have.property(\"id\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"userName\").that.is.a(\"string\");\r",
													"\r",
													"        // Validate optional properties\r",
													"        if (resource.emails) {\r",
													"            pm.expect(resource.emails).to.be.an(\"array\");\r",
													"            resource.emails.forEach((email, emailIndex) => {\r",
													"                if (typeof email === \"object\") {\r",
													"                    pm.expect(email).to.have.property(\"type\").that.is.a(\"string\");\r",
													"                    pm.expect(email).to.have.property(\"value\").that.is.a(\"string\");\r",
													"                } else {\r",
													"                    pm.expect(email).to.be.a(\"string\");\r",
													"                }\r",
													"            });\r",
													"        }\r",
													"\r",
													"        if (resource.groups) {\r",
													"            pm.expect(resource.groups).to.be.an(\"array\");\r",
													"            resource.groups.forEach((group, groupIndex) => {\r",
													"                pm.expect(group).to.have.property(\"display\").that.is.a(\"string\");\r",
													"                pm.expect(group).to.have.property(\"value\").that.is.a(\"string\");\r",
													"                pm.expect(group).to.have.property(\"$ref\").that.is.a(\"string\");\r",
													"            });\r",
													"        }\r",
													"\r",
													"        if (resource.roles) {\r",
													"            pm.expect(resource.roles).to.be.an(\"array\");\r",
													"            resource.roles.forEach((role, roleIndex) => {\r",
													"                pm.expect(role).to.have.property(\"display\").that.is.a(\"string\");\r",
													"                pm.expect(role).to.have.property(\"value\").that.is.a(\"string\");\r",
													"                pm.expect(role).to.have.property(\"audienceValue\").that.is.a(\"string\");\r",
													"                pm.expect(role).to.have.property(\"audienceType\").that.is.a(\"string\");\r",
													"                pm.expect(role).to.have.property(\"audienceDisplay\").that.is.a(\"string\");\r",
													"                pm.expect(role).to.have.property(\"$ref\").that.is.a(\"string\");\r",
													"            });\r",
													"        }\r",
													"\r",
													"        if (resource.meta) {\r",
													"            pm.expect(resource.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"            pm.expect(resource.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"            pm.expect(resource.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"            pm.expect(resource.meta).to.have.property(\"resourceType\").that.is.a(\"string\");\r",
													"        }\r",
													"\r",
													"        if (resource.name) {\r",
													"            pm.expect(resource.name).to.have.property(\"givenName\").that.is.a(\"string\");\r",
													"            pm.expect(resource.name).to.have.property(\"familyName\").that.is.a(\"string\");\r",
													"        }\r",
													"\r",
													"        if (resource[\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"]) {\r",
													"            const enterpriseUser = resource[\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"];\r",
													"            if (enterpriseUser.manager) {\r",
													"                pm.expect(enterpriseUser.manager).to.have.property(\"value\").that.is.a(\"string\");\r",
													"            }\r",
													"            if (enterpriseUser.employeeNumber) {\r",
													"                pm.expect(enterpriseUser.employeeNumber).to.be.a(\"string\");\r",
													"            }\r",
													"            if (enterpriseUser.managedOrg) {\r",
													"                pm.expect(enterpriseUser.managedOrg).to.be.a(\"string\");\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_user_mgt_list\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Users",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"itemsPerPage\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    responseBody.schemas.forEach(schema => {\r",
													"        pm.expect(schema).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"Resources\" array\r",
													"pm.test(\"Validate 'Resources' array\", () => {\r",
													"    responseBody.Resources.forEach(resource => {\r",
													"        pm.expect(resource).to.have.property(\"name\").that.is.an(\"object\");\r",
													"        pm.expect(resource.name).to.have.property(\"familyName\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"id\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"userName\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_user_mgt_list\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"\n],\n\"attributes\": [\n  \"name.familyName\",\n  \"userName\"\n],\n\"filter\": \"userName sw Mal and name.familyName co err\",\n\"domain\": \"PRIMARY\",\n\"startIndex\": 1,\n\"count\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Users/.search",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Users",
												".search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"emails\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"name\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"userName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\").that.is.an(\"object\");\r",
													"});\r",
													"\r",
													"// Validate \"emails\" array\r",
													"pm.test(\"Validate 'emails' array\", () => {\r",
													"    responseBody.emails.forEach((email, index) => {\r",
													"        if (typeof email === \"object\") {\r",
													"            pm.expect(email).to.have.property(\"type\").that.is.a(\"string\");\r",
													"            pm.expect(email).to.have.property(\"value\").that.is.a(\"string\");\r",
													"        } else {\r",
													"            pm.expect(email).to.be.a(\"string\");\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"meta\" object\r",
													"pm.test(\"Validate 'meta' object\", () => {\r",
													"    pm.expect(responseBody.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"resourceType\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    responseBody.schemas.forEach((schema, index) => {\r",
													"        pm.expect(schema).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"name\" object\r",
													"pm.test(\"Validate 'name' object\", () => {\r",
													"    pm.expect(responseBody.name).to.have.property(\"givenName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.name).to.have.property(\"familyName\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\" object\r",
													"pm.test(\"Validate SCIM enterprise user extension\", () => {\r",
													"    let enterpriseUser = responseBody[\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"];\r",
													"    if (enterpriseUser.manager) {\r",
													"        pm.expect(enterpriseUser.manager).to.have.property(\"value\").that.is.a(\"string\");\r",
													"    }\r",
													"    if (enterpriseUser.employeeNumber) {\r",
													"        pm.expect(enterpriseUser.employeeNumber).to.be.a(\"string\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_user_mgt_view\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Users/{{user_id_subOrg}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Users",
												"{{user_id_subOrg}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user - PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"emails\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"name\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"userName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\").that.is.an(\"object\");\r",
													"});\r",
													"\r",
													"// Validate \"emails\" array\r",
													"pm.test(\"Validate 'emails' array\", () => {\r",
													"    responseBody.emails.forEach((email, index) => {\r",
													"        if (typeof email === \"object\") {\r",
													"            pm.expect(email).to.have.property(\"type\").that.is.a(\"string\");\r",
													"            pm.expect(email).to.have.property(\"value\").that.is.a(\"string\");\r",
													"        } else {\r",
													"            pm.expect(email).to.be.a(\"string\");\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"meta\" object\r",
													"pm.test(\"Validate 'meta' object\", () => {\r",
													"    pm.expect(responseBody.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"resourceType\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    responseBody.schemas.forEach((schema, index) => {\r",
													"        pm.expect(schema).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"name\" object\r",
													"pm.test(\"Validate 'name' object\", () => {\r",
													"    pm.expect(responseBody.name).to.have.property(\"givenName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.name).to.have.property(\"familyName\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\" object\r",
													"pm.test(\"Validate SCIM enterprise user extension\", () => {\r",
													"    let enterpriseUser = responseBody[\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"];\r",
													"    if (enterpriseUser.manager) {\r",
													"        pm.expect(enterpriseUser.manager).to.have.property(\"value\").that.is.a(\"string\");\r",
													"    }\r",
													"    if (enterpriseUser.employeeNumber) {\r",
													"        pm.expect(enterpriseUser.employeeNumber).to.be.a(\"string\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_user_mgt_update\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [],\n\"name\": {\n  \"givenName\": \"Kim\",\n  \"familyName\": \"Berrymmm\"\n},\n\"userName\": \"Malcome\",\n\"emails\": [\n  {\n    \"value\": \"kim@gmail.com\",\n  },\n  {\n    \"type\": \"work\",\n    \"value\": \"kim@wso2.com\"\n  }\n],\n\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\n  \"employeeNumber\": \"1234A\",\n  \"manager\": {\n    \"value\": \"Taylor\"\n  }\n}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Users/{{user_id_subOrg}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Users",
												"{{user_id_subOrg}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user - PATCH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"emails\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"nickName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"name\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"userName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\").that.is.an(\"object\");\r",
													"});\r",
													"\r",
													"// Validate \"emails\" array\r",
													"pm.test(\"Validate 'emails' array\", () => {\r",
													"    responseBody.emails.forEach(email => {\r",
													"        if (typeof email === \"object\") {\r",
													"            pm.expect(email).to.have.property(\"type\").that.is.a(\"string\");\r",
													"            pm.expect(email).to.have.property(\"value\").that.is.a(\"string\");\r",
													"        } else {\r",
													"            pm.expect(email).to.be.a(\"string\");\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"meta\" object\r",
													"pm.test(\"Validate 'meta' object\", () => {\r",
													"    pm.expect(responseBody.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"resourceType\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    responseBody.schemas.forEach(schema => {\r",
													"        pm.expect(schema).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"name\" object\r",
													"pm.test(\"Validate 'name' object\", () => {\r",
													"    pm.expect(responseBody.name).to.have.property(\"givenName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.name).to.have.property(\"familyName\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\" object\r",
													"pm.test(\"Validate SCIM enterprise user extension\", () => {\r",
													"    let enterpriseUser = responseBody[\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"];\r",
													"    if (enterpriseUser.manager) {\r",
													"        pm.expect(enterpriseUser.manager).to.have.property(\"value\").that.is.a(\"string\");\r",
													"    }\r",
													"    if (enterpriseUser.employeeNumber) {\r",
													"        pm.expect(enterpriseUser.employeeNumber).to.be.a(\"string\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_user_mgt_update\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n],\n\"Operations\": [\n  {\n    \"op\": \"add\",\n    \"value\": {\n      \"nickName\": \"shaggy\"\n    }\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Users/{{user_id_subOrg}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Users",
												"{{user_id_subOrg}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "SCIM 2.0 Groups API",
					"item": [
						{
							"name": "Groups Endpoint",
							"item": [
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 201\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"meta\" object\r",
													"pm.test(\"Validate 'meta' object\", () => {\r",
													"    pm.expect(responseBody.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    pm.expect(responseBody.schemas).to.be.an(\"array\");\r",
													"    responseBody.schemas.forEach(schema => {\r",
													"        pm.expect(schema).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.collectionVariables.set(\"group_id_subOrg\", responseBody.id);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_group_mgt_create\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:schemas:core:2.0:Group\"\n],\n\"displayName\": \"Organizor\",\n\"members\": [\n  {\n    \"value\": \"{{user_id_subOrg}}\",\n    \"display\": \"Malcome\"\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Groups",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Filter groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"itemsPerPage\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\").with.length.greaterThan(0);\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    responseBody.schemas.forEach(schema => {\r",
													"        pm.expect(schema).to.be.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Validate \"Resources\" array\r",
													"pm.test(\"Validate 'Resources' array\", () => {\r",
													"    responseBody.Resources.forEach(resource => {\r",
													"        pm.expect(resource).to.have.property(\"displayName\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"        pm.expect(resource).to.have.property(\"id\").that.is.a(\"string\");\r",
													"\r",
													"        // Validate \"meta\" object\r",
													"        pm.expect(resource.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"        pm.expect(resource.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"        pm.expect(resource.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"\r",
													"        // Validate \"members\" array (if present)\r",
													"        if (resource.members) {\r",
													"            pm.expect(resource.members).to.be.an(\"array\").with.length.greaterThan(0);\r",
													"            resource.members.forEach(member => {\r",
													"                pm.expect(member).to.have.property(\"display\").that.is.a(\"string\");\r",
													"                pm.expect(member).to.have.property(\"value\").that.is.a(\"string\");\r",
													"                pm.expect(member).to.have.property(\"$ref\").that.is.a(\"string\");\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_group_mgt_view\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Groups",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"itemsPerPage\").that.is.a(\"number\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    pm.expect(responseBody.schemas).to.include(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\");\r",
													"});\r",
													"\r",
													"// Validate \"Resources\" array\r",
													"pm.test(\"Validate 'Resources' array\", () => {\r",
													"    pm.expect(responseBody.Resources.length).to.be.greaterThan(0);\r",
													"\r",
													"    responseBody.Resources.forEach(resource => {\r",
													"        pm.expect(resource).to.have.property(\"displayName\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"        pm.expect(resource.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"        pm.expect(resource.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"        pm.expect(resource.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"        pm.expect(resource).to.have.property(\"id\").that.is.a(\"string\");\r",
													"\r",
													"        if (resource.members) {\r",
													"            pm.expect(resource.members).to.be.an(\"array\");\r",
													"            resource.members.forEach(member => {\r",
													"                pm.expect(member).to.have.property(\"display\").that.is.a(\"string\");\r",
													"                pm.expect(member).to.have.property(\"value\").that.is.a(\"string\");\r",
													"                pm.expect(member).to.have.property(\"$ref\").that.is.a(\"string\");\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_group_mgt_view\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"\n],\n\"startIndex\": 1,\n\"filter\": \"displayName eq Organizor\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Groups/.search",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Groups",
												".search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get group by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"members\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"meta\" object\r",
													"pm.test(\"Validate 'meta' object\", () => {\r",
													"    pm.expect(responseBody.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    pm.expect(responseBody.schemas).to.include(\"urn:ietf:params:scim:schemas:core:2.0:Group\");\r",
													"});\r",
													"\r",
													"// Validate \"members\" array\r",
													"pm.test(\"Validate 'members' array\", () => {\r",
													"    pm.expect(responseBody.members.length).to.be.greaterThan(0);\r",
													"\r",
													"    responseBody.members.forEach(member => {\r",
													"        pm.expect(member).to.have.property(\"display\").that.is.a(\"string\");\r",
													"        pm.expect(member).to.have.property(\"value\").that.is.a(\"string\");\r",
													"        pm.expect(member).to.have.property(\"$ref\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_group_mgt_view\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Groups/{{group_id_subOrg}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Groups",
												"{{group_id_subOrg}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group - PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"members\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"meta\" object\r",
													"pm.test(\"Validate 'meta' object\", () => {\r",
													"    pm.expect(responseBody.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    pm.expect(responseBody.schemas).to.include(\"urn:ietf:params:scim:schemas:core:2.0:Group\");\r",
													"});\r",
													"\r",
													"// Validate \"members\" array\r",
													"pm.test(\"Validate 'members' array\", () => {\r",
													"    pm.expect(responseBody.members.length).to.be.greaterThan(0);\r",
													"\r",
													"    responseBody.members.forEach(member => {\r",
													"        pm.expect(member).to.have.property(\"display\").that.is.a(\"string\");\r",
													"        pm.expect(member).to.have.property(\"value\").that.is.a(\"string\");\r",
													"        pm.expect(member).to.have.property(\"$ref\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_group_mgt_update\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"displayName\": \"Organizor\",\n\"members\": [\n  {\n    \"value\": \"{{user_id_subOrg}}\",\n    \"display\": \"Malcome\"\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Groups/{{group_id_subOrg}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Groups",
												"{{group_id_subOrg}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update group - PATCH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code is 200\", function () {\r",
													"     pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Parse the response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Validate top-level properties\r",
													"pm.test(\"Validate top-level properties\", () => {\r",
													"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"members\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"meta\" object\r",
													"pm.test(\"Validate 'meta' object\", () => {\r",
													"    pm.expect(responseBody.meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    pm.expect(responseBody.meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Validate \"schemas\" array\r",
													"pm.test(\"Validate 'schemas' array\", () => {\r",
													"    pm.expect(responseBody.schemas).to.include(\"urn:ietf:params:scim:schemas:core:2.0:Group\");\r",
													"});\r",
													"\r",
													"// Validate \"members\" array\r",
													"pm.test(\"Validate 'members' array\", () => {\r",
													"    pm.expect(responseBody.members.length).to.be.greaterThan(0);\r",
													"\r",
													"    responseBody.members.forEach(member => {\r",
													"        pm.expect(member).to.have.property(\"display\").that.is.a(\"string\");\r",
													"        pm.expect(member).to.have.property(\"value\").that.is.a(\"string\");\r",
													"        pm.expect(member).to.have.property(\"$ref\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_group_mgt_update\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n],\n\"Operations\": [\n  {\n    \"op\": \"add\",\n    \"value\": {\n      \"members\": [\n        {\n          \"display\": \"Malcome\",\n          \"value\": \"{{user_id_subOrg}}\"\n        }\n      ]\n    }\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Groups/{{group_id_subOrg}}",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Groups",
												"{{group_id_subOrg}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "SCIM 2.0 Bulk API",
					"item": [
						{
							"name": "Bulk Endpoint",
							"item": [
								{
									"name": "Create, Update, Delete Users and Groups in bulk and update Roles in bulk",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Response status is 200', function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate SCIM BulkResponse structure\", () => {\r",
													"    var responseBody = pm.response.json();\r",
													"\r",
													"    // Validate top-level properties\r",
													"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"    pm.expect(responseBody).to.have.property(\"Operations\").that.is.an(\"array\");\r",
													"\r",
													"    // Validate schemas array\r",
													"    const schemas = responseBody.schemas;\r",
													"    schemas.forEach(schema => {\r",
													"        pm.expect(schema).to.be.a(\"string\");\r",
													"    });\r",
													"\r",
													"    // Validate Operations array\r",
													"    const operations = responseBody.Operations;\r",
													"    operations.forEach(operation => {\r",
													"        pm.expect(operation).to.have.property(\"bulkId\").that.is.a(\"string\");\r",
													"        pm.expect(operation).to.have.property(\"method\").that.is.a(\"string\");\r",
													"        pm.expect(operation).to.have.property(\"response\").that.is.a(\"string\");\r",
													"        pm.expect(operation).to.have.property(\"location\").that.is.a(\"string\");\r",
													"        pm.expect(operation).to.have.property(\"status\").that.is.an(\"object\");\r",
													"\r",
													"        // Validate status object\r",
													"        const status = operation.status;\r",
													"        pm.expect(status).to.have.property(\"code\").that.is.a(\"number\");\r",
													"\r",
													"        // Validate response string (if parsing is required)\r",
													"        const response = JSON.parse(operation.response);\r",
													"        pm.expect(response).to.have.property(\"meta\").that.is.an(\"object\");\r",
													"        pm.expect(response).to.have.property(\"schemas\").that.is.an(\"array\");\r",
													"        pm.expect(response).to.have.property(\"id\").that.is.a(\"string\");\r",
													"        pm.expect(response).to.have.property(\"userName\").that.is.a(\"string\");\r",
													"\r",
													"        // Validate meta object within response\r",
													"        const meta = response.meta;\r",
													"        pm.expect(meta).to.have.property(\"created\").that.is.a(\"string\");\r",
													"        pm.expect(meta).to.have.property(\"location\").that.is.a(\"string\");\r",
													"        pm.expect(meta).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
													"        pm.expect(meta).to.have.property(\"resourceType\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													"\r",
													"// Getting the id of the user\r",
													"// Parse the main response body\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"// Check if Operations array and response exist\r",
													"if (responseBody.Operations && responseBody.Operations.length > 0) {\r",
													"    let operation = responseBody.Operations[0];\r",
													"    \r",
													"    // Check if 'response' field exists\r",
													"    if (operation.response) {\r",
													"        // Parse the 'response' field\r",
													"        let nestedResponse = JSON.parse(operation.response);\r",
													"        \r",
													"        // Check if 'id' exists in the parsed response\r",
													"        if (nestedResponse.id) {\r",
													"            // Set the id as a collection variable\r",
													"            pm.collectionVariables.set(\"user_id_01_subOrg\", nestedResponse.id);\r",
													"            console.log(\"User ID set as collection variable:\", nestedResponse.id);\r",
													"        } else {\r",
													"            console.warn(\"ID not found in the nested response.\");\r",
													"        }\r",
													"    } else {\r",
													"        console.warn(\"'response' field is missing in the operation.\");\r",
													"    }\r",
													"} else {\r",
													"    console.warn(\"Operations array is empty or missing.\");\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: pm.collectionVariables.get(\"token_url\"),\r",
													"    method: \"POST\",\r",
													"    header: {\r",
													"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
													"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
													"    },\r",
													"    body: {\r",
													"        mode: \"urlencoded\",\r",
													"        urlencoded: [\r",
													"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
													"            { key: \"grant_type\", value: \"organization_switch\" },\r",
													"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
													"            { key: \"scope\", value: \"internal_org_bulk_resource_create\" }\r",
													"        ]\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Token request failed:\", err);\r",
													"    } else {\r",
													"        let jsonResponse = res.json();\r",
													"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
													"    } \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/scim+json"
											},
											{
												"key": "Content-Type",
												"value": "application/scim+json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"failOnErrors\": 1,\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"\n],\n\"Operations\": [\n  {\n    \"method\": \"POST\",\n    \"path\": \"/Users\",\n    \"bulkId\": \"ytrewq\",\n    \"data\": {\n      \"schemas\": [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\"\n      ],\n      \"userName\": \"jesse\",\n      \"password\": \"jessPass!123\"\n    }\n  }\n]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Bulk",
											"protocol": "https",
											"host": [
												"{{serverUrl}}"
											],
											"path": [
												"t",
												"{{tenantDomain}}",
												"o",
												"scim2",
												"Bulk"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authenticators API",
			"item": [
				{
					"name": "Authenticators",
					"item": [
						{
							"name": "List all authenticators in the server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body once\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Test to ensure response contains an array of authenticators\r",
											"pm.test(\"Response contains authenticators array\", function () {\r",
											"    pm.expect(responseBody).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Validate each authenticator's core properties\r",
											"pm.test(\"Authenticators have necessary properties\", function () {\r",
											"    responseBody.forEach(authenticator => {\r",
											"        pm.expect(authenticator).to.have.property('id');\r",
											"        pm.expect(authenticator).to.have.property('name');\r",
											"        pm.expect(authenticator).to.have.property('displayName');\r",
											"        pm.expect(authenticator).to.have.property('isEnabled');\r",
											"        pm.expect(authenticator).to.have.property('type');\r",
											"        pm.expect(authenticator).to.have.property('self');\r",
											"    });\r",
											"});\r",
											"\r",
											"// Check if 'isEnabled' is a boolean for each authenticator\r",
											"pm.test(\"Each authenticator has 'isEnabled' as a boolean\", function () {\r",
											"    responseBody.forEach(authenticator => {\r",
											"        pm.expect(authenticator.isEnabled).to.be.a('boolean');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_authenticator_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "List all authenticator tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body once\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Test to ensure response contains an array of authenticators\r",
											"pm.test(\"Response contains authenticator tags array\", function () {\r",
											"    pm.expect(responseBody).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_authenticator_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/authenticators/meta/tags",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"authenticators",
										"meta",
										"tags"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Connected apps of local authenticators",
					"item": [
						{
							"name": "Get connected app by authenticator id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate satatus code\r",
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body once\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Test to ensure the response contains the necessary properties\r",
											"pm.test(\"Response contains required properties\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
											"    pm.expect(responseBody).to.have.property(\"count\");\r",
											"    pm.expect(responseBody).to.have.property(\"links\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"authenticator_Id\", \"QmFzaWNBdXRoZW50aWNhdG9y\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_authenticator_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/authenticators/{{authenticator_Id}}/connected-apps",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"authenticators",
										"{{authenticator_Id}}",
										"connected-apps"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Branding management API",
			"item": [
				{
					"name": "Branding Preference",
					"item": [
						{
							"name": "Add branding preferences for a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate the top-level properties\r",
											"pm.test(\"Validate top-level properties\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"type\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\");\r",
											"});\r",
											"\r",
											"// Validate the `preference` object structure\r",
											"pm.test(\"Validate preference properties\", function () {\r",
											"    pm.expect(responseBody.preference).to.have.property(\"organizationDetails\");\r",
											"    pm.expect(responseBody.preference).to.have.property(\"images\");\r",
											"    pm.expect(responseBody.preference).to.have.property(\"urls\");\r",
											"    pm.expect(responseBody.preference).to.have.property(\"stylesheets\");\r",
											"    pm.expect(responseBody.preference).to.have.property(\"configs\");\r",
											"});\r",
											"\r",
											"// Validate `organizationDetails` properties\r",
											"pm.test(\"Validate organizationDetails properties\", function () {\r",
											"    const orgDetails = responseBody.preference.organizationDetails;\r",
											"    pm.expect(orgDetails).to.have.property(\"displayName\");\r",
											"    pm.expect(orgDetails).to.have.property(\"siteTitle\");\r",
											"    pm.expect(orgDetails).to.have.property(\"copyrightText\");\r",
											"    pm.expect(orgDetails).to.have.property(\"supportEmail\");\r",
											"});\r",
											"\r",
											"// Validate `images` properties\r",
											"pm.test(\"Validate images properties\", function () {\r",
											"    const images = responseBody.preference.images;\r",
											"    pm.expect(images).to.have.property(\"logo\");\r",
											"    pm.expect(images).to.have.property(\"favicon\");\r",
											"    pm.expect(images.logo).to.have.property(\"imgURL\");\r",
											"    pm.expect(images.logo).to.have.property(\"altText\");\r",
											"    pm.expect(images.favicon).to.have.property(\"imgURL\");\r",
											"});\r",
											"\r",
											"// Validate `urls` properties\r",
											"pm.test(\"Validate urls properties\", function () {\r",
											"    const urls = responseBody.preference.urls;\r",
											"    pm.expect(urls).to.have.property(\"privacyPolicyURL\");\r",
											"    pm.expect(urls).to.have.property(\"termsOfUseURL\");\r",
											"    pm.expect(urls).to.have.property(\"cookiePolicyURL\");\r",
											"});\r",
											"\r",
											"// Validate `stylesheets` properties\r",
											"pm.test(\"Validate stylesheets properties\", function () {\r",
											"    const stylesheets = responseBody.preference.stylesheets;\r",
											"    pm.expect(stylesheets).to.have.property(\"accountApp\");\r",
											"    pm.expect(stylesheets).to.have.property(\"myAccountApp\");\r",
											"});\r",
											"\r",
											"// Validate `configs` properties\r",
											"pm.test(\"Validate configs properties\", function () {\r",
											"    const configs = responseBody.preference.configs;\r",
											"    pm.expect(configs).to.have.property(\"isBrandingEnabled\");\r",
											"    pm.expect(configs).to.have.property(\"removeDefaultBranding\");\r",
											"    pm.expect(configs).to.have.property(\"selfSignUpEnabled\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_branding_preference_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"ORG\",\n  \"name\": \"WSO2\",\n  \"locale\": \"en-US\",\n  \"preference\": {\n    \"organizationDetails\": {\n      \"displayName\": \"Ballerina.io\",\n      \"siteTitle\": \"Login - Ballerina\",\n      \"copyrightText\": \"© 2021 WSO2\",\n      \"supportEmail\": \"support@ballerina.io\"\n    },\n    \"images\": {\n      \"logo\": {\n        \"imgURL\": \"https://ballerina.io/img/ballerina-logo.svg\",\n        \"altText\": \"Ballerina.io Logo\"\n      },\n      \"favicon\": {\n        \"imgURL\": \"https://central.ballerina.io/favicon.ico\"\n      }\n    },\n    \"urls\": {\n      \"privacyPolicyURL\": \"https://ballerina.io/privacy-policy\",\n      \"termsOfUseURL\": \"https://ballerina.io/terms-of-service/\",\n      \"cookiePolicyURL\": \"https://ballerina.io/privacy-policy/#cookie-policy\"\n    },\n    \"stylesheets\": {\n      \"accountApp\": \"https://firebasestorage.googleapis.com/v0/b/asgardeo-branding.appspot.com/o/ballerina%2Flogin-portal.overrides.css?alt=media&token=0315462e-534e-4f33-83f9-e4c092d0273d\",\n      \"myAccountApp\": \"https://asgardeo-branding/user-portal.css\"\n    },\n    \"configs\": {\n      \"isBrandingEnabled\": true,\n      \"removeDefaultBranding\": false,\n      \"selfSignUpEnabled\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/branding-preference",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"branding-preference"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update branding preferences of an organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate all properties in the response\r",
											"pm.test(\"Validate JSON structure\", () => {\r",
											"    pm.expect(responseBody).to.have.property(\"type\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\");\r",
											"\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"organizationDetails\");\r",
											"    pm.expect(preference).to.have.property(\"images\");\r",
											"    pm.expect(preference).to.have.property(\"urls\");\r",
											"    pm.expect(preference).to.have.property(\"stylesheets\");\r",
											"    pm.expect(preference).to.have.property(\"configs\");\r",
											"\r",
											"    const orgDetails = preference.organizationDetails;\r",
											"    pm.expect(orgDetails).to.have.property(\"displayName\");\r",
											"    pm.expect(orgDetails).to.have.property(\"siteTitle\");\r",
											"    pm.expect(orgDetails).to.have.property(\"copyrightText\");\r",
											"    pm.expect(orgDetails).to.have.property(\"supportEmail\");\r",
											"\r",
											"    const images = preference.images;\r",
											"    pm.expect(images).to.have.property(\"logo\");\r",
											"    pm.expect(images).to.have.property(\"favicon\");\r",
											"\r",
											"    pm.expect(images.logo).to.have.property(\"imgURL\");\r",
											"    pm.expect(images.logo).to.have.property(\"altText\");\r",
											"\r",
											"    pm.expect(images.favicon).to.have.property(\"imgURL\");\r",
											"\r",
											"    const urls = preference.urls;\r",
											"    pm.expect(urls).to.have.property(\"privacyPolicyURL\");\r",
											"    pm.expect(urls).to.have.property(\"termsOfUseURL\");\r",
											"    pm.expect(urls).to.have.property(\"cookiePolicyURL\");\r",
											"\r",
											"    const stylesheets = preference.stylesheets;\r",
											"    pm.expect(stylesheets).to.have.property(\"accountApp\");\r",
											"    pm.expect(stylesheets).to.have.property(\"myAccountApp\");\r",
											"\r",
											"    const configs = preference.configs;\r",
											"    pm.expect(configs).to.have.property(\"isBrandingEnabled\");\r",
											"    pm.expect(configs).to.have.property(\"removeDefaultBranding\");\r",
											"    pm.expect(configs).to.have.property(\"selfSignUpEnabled\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_branding_preference_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"ORG\",\n  \"name\": \"WSO2\",\n  \"locale\": \"en-US\",\n  \"preference\": {\n    \"organizationDetails\": {\n      \"displayName\": \"Ballerina.io\",\n      \"siteTitle\": \"Login - Ballerina\",\n      \"copyrightText\": \"© 2021 WSO2\",\n      \"supportEmail\": \"support@ballerina.io\"\n    },\n    \"images\": {\n      \"logo\": {\n        \"imgURL\": \"https://ballerina.io/img/ballerina-logo.svg\",\n        \"altText\": \"Ballerina.io Logo\"\n      },\n      \"favicon\": {\n        \"imgURL\": \"https://central.ballerina.io/favicon.ico\"\n      }\n    },\n    \"urls\": {\n      \"privacyPolicyURL\": \"https://ballerina.io/privacy-policy\",\n      \"termsOfUseURL\": \"https://ballerina.io/terms-of-service/\",\n      \"cookiePolicyURL\": \"https://ballerina.io/privacy-policy/#cookie-policy\"\n    },\n    \"stylesheets\": {\n      \"accountApp\": \"https://firebasestorage.googleapis.com/v0/b/asgardeo-branding.appspot.com/o/ballerina%2Flogin-portal.overrides.css?alt=media&token=0315462e-534e-4f33-83f9-e4c092d0273d\",\n      \"myAccountApp\": \"https://asgardeo-branding/user-portal.css\"\n    },\n    \"configs\": {\n      \"isBrandingEnabled\": true,\n      \"removeDefaultBranding\": false,\n      \"selfSignUpEnabled\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/branding-preference",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"branding-preference"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resolve branding preference of an organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"organization_id_subOrg\", \"c5b91305-43d9-4832-ab68-e4e2d1536f4f\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/{{organization_id_subOrg}}/api/server/v1/branding-preference/resolve?type=ORG&name=WSO2&locale=en-US",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"{{organization_id_subOrg}}",
										"api",
										"server",
										"v1",
										"branding-preference",
										"resolve"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes branding preferences of a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_branding_preference_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/branding-preference?type=ORG&name=WSO2&locale=en-US",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"branding-preference"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Custom Text",
					"item": [
						{
							"name": "Add custom text for a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate all properties in the response\r",
											"pm.test(\"Validate JSON structure\", () => {\r",
											"    // Top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\");\r",
											"    pm.expect(responseBody).to.have.property(\"screen\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\");\r",
											"\r",
											"    // Validate properties within \"preference\"\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"login\");\r",
											"    pm.expect(preference).to.have.property(\"welcome\");\r",
											"    pm.expect(preference).to.have.property(\"account.linking\");\r",
											"    pm.expect(preference).to.have.property(\"username\");\r",
											"    pm.expect(preference).to.have.property(\"email.username\");\r",
											"    pm.expect(preference).to.have.property(\"back.to.sign.in\");\r",
											"    pm.expect(preference).to.have.property(\"or\");\r",
											"    pm.expect(preference).to.have.property(\"dont.have.an.account\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_branding_preference_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"ORG\",\n  \"name\": \"WSO2\",\n  \"locale\": \"en-US\",\n  \"screen\": \"login\",\n  \"preference\": {\n    \"login\": \"Sign In\",\n    \"welcome\": \"Welcome\",\n    \"account.linking\": \"Account Linking\",\n    \"username\": \"Username\",\n    \"email.username\": \"Email address\",\n    \"back.to.sign.in\": \"Back to Sign In\",\n    \"or\": \"Or\",\n    \"dont.have.an.account\": \"Don't have an account?\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/branding-preference/text",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom text of a tenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Validate all properties in the response\r",
											"pm.test(\"Validate JSON structure\", () => {\r",
											"    // Top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"type\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\");\r",
											"    pm.expect(responseBody).to.have.property(\"locale\");\r",
											"    pm.expect(responseBody).to.have.property(\"screen\");\r",
											"    pm.expect(responseBody).to.have.property(\"preference\");\r",
											"\r",
											"    // Validate properties within \"preference\"\r",
											"    const preference = responseBody.preference;\r",
											"    pm.expect(preference).to.have.property(\"login\");\r",
											"    pm.expect(preference).to.have.property(\"welcome\");\r",
											"    pm.expect(preference).to.have.property(\"account.linking\");\r",
											"    pm.expect(preference).to.have.property(\"username\");\r",
											"    pm.expect(preference).to.have.property(\"email.username\");\r",
											"    pm.expect(preference).to.have.property(\"back.to.sign.in\");\r",
											"    pm.expect(preference).to.have.property(\"or\");\r",
											"    pm.expect(preference).to.have.property(\"dont.have.an.account\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_branding_preference_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"ORG\",\n  \"name\": \"WSO2\",\n  \"locale\": \"en-US\",\n  \"screen\": \"login\",\n  \"preference\": {\n    \"login\": \"Sign In\",\n    \"welcome\": \"Welcome\",\n    \"account.linking\": \"Account Linking\",\n    \"username\": \"Username\",\n    \"email.username\": \"Email address\",\n    \"back.to.sign.in\": \"Back to Sign In\",\n    \"or\": \"Or\",\n    \"dont.have.an.account\": \"Don't have an account?\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/branding-preference/text",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletes custom text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_branding_preference_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/branding-preference/text?type=ORG&name=WSO2&locale=en-US&screen=login",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										},
										{
											"key": "screen",
											"value": "login"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Resolve custom text of an organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/{{organization_id_subOrg}}/api/server/v1/branding-preference/text/resolve?type=ORG&name=WSO2&locale=en-US&screen=login",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"{{organization_id_subOrg}}",
										"api",
										"server",
										"v1",
										"branding-preference",
										"text",
										"resolve"
									],
									"query": [
										{
											"key": "type",
											"value": "ORG"
										},
										{
											"key": "name",
											"value": "WSO2"
										},
										{
											"key": "locale",
											"value": "en-US"
										},
										{
											"key": "screen",
											"value": "login"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Claim management API",
			"item": [
				{
					"name": "management",
					"item": [
						{
							"name": "Retrieve local claims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate that the response is an array\r",
											"    pm.expect(Array.isArray(responseBody)).to.be.true;\r",
											"\r",
											"    // Validate each object in the response array\r",
											"    responseBody.forEach(item => {\r",
											"        // Validate required keys exist and their types\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"claimURI\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"        pm.expect(item).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"readOnly\").that.is.a(\"boolean\");\r",
											"        pm.expect(item).to.have.property(\"regEx\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"required\").that.is.a(\"boolean\");\r",
											"        pm.expect(item).to.have.property(\"supportedByDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"        // Validate attributeMapping is an array of objects\r",
											"        pm.expect(item).to.have.property(\"attributeMapping\").that.is.an(\"array\");\r",
											"        item.attributeMapping.forEach(mapping => {\r",
											"            pm.expect(mapping).to.have.property(\"mappedAttribute\").that.is.a(\"string\");\r",
											"            pm.expect(mapping).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"        });\r",
											"\r",
											"        // Validate properties is an array of objects\r",
											"        pm.expect(item).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"        item.properties.forEach(property => {\r",
											"            pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"            pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_claim_meta_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/claim-dialects/local/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"local",
										"claims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve local claim by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"claim_Id\",\"aHR0cDovL3dzbzIub3JnL2NsYWltcy9nZW5kZXI\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_claim_meta_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the response is an object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate required keys and their types\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"claimURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"readOnly\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"regEx\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"required\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"supportedByDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate 'attributeMapping' array\r",
											"    pm.expect(responseBody).to.have.property(\"attributeMapping\").that.is.an(\"array\");\r",
											"    responseBody.attributeMapping.forEach(mapping => {\r",
											"        pm.expect(mapping).to.have.property(\"mappedAttribute\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate 'properties' array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/claim-dialects/local/claims/{{claim_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"local",
										"claims",
										"{{claim_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve claim dialects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate that the response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each object in the array\r",
											"    responseBody.forEach(item => {\r",
											"        // Validate item structure\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"link\").that.is.an(\"object\");\r",
											"\r",
											"        // Validate 'link' object structure\r",
											"        const link = item.link;\r",
											"        pm.expect(link).to.have.property(\"href\").that.is.a(\"string\");\r",
											"        pm.expect(link).to.have.property(\"rel\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_claim_meta_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/claim-dialects",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"claim-dialects"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve claim dialect",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"dialect_Id\", \"aHR0cDovL3dzbzIub3JnL29pZGMvY2xhaW0\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_claim_meta_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure validation\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the root object\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"\r",
											"    // Validate properties at the root level\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"dialectURI\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"link\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate the nested 'link' object\r",
											"    const link = responseBody.link;\r",
											"    pm.expect(link).to.have.property(\"href\").that.is.a(\"string\");\r",
											"    pm.expect(link).to.have.property(\"rel\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/claim-dialects/{{dialect_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve external claims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_claim_meta_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/claim-dialects/{{dialect_Id}}/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}",
										"claims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve external claim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"external_Claim_Id\", \"Z2VuZGVy\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_claim_meta_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/claim-dialects/{{dialect_Id}}/claims/{{external_Claim_Id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"claim-dialects",
										"{{dialect_Id}}",
										"claims",
										"{{external_Claim_Id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Identity provider management API",
			"item": [
				{
					"name": "Identity Providers",
					"item": [
						{
							"name": "Add a new identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Response structure validation\", () => {\r",
											"\r",
											"    // Validate root-level properties\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isPrimary\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"image\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isFederationHub\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmIdentifier\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate certificate\r",
											"    pm.expect(responseBody).to.have.property(\"certificate\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.certificate).to.have.property(\"jwksUri\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate alias\r",
											"    pm.expect(responseBody).to.have.property(\"alias\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate claims\r",
											"    pm.expect(responseBody).to.have.property(\"claims\").that.is.an(\"object\");\r",
											"    const claims = responseBody.claims;\r",
											"    pm.expect(claims).to.have.property(\"userIdClaim\").that.is.an(\"object\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(claims).to.have.property(\"roleClaim\").that.is.an(\"object\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(claims).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    claims.mappings.forEach((mapping) => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\").that.is.an(\"object\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    });\r",
											"    pm.expect(claims).to.have.property(\"provisioningClaims\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate roles\r",
											"    pm.expect(responseBody).to.have.property(\"roles\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate groups\r",
											"    pm.expect(responseBody).to.have.property(\"groups\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate federatedAuthenticators\r",
											"    pm.expect(responseBody).to.have.property(\"federatedAuthenticators\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"    responseBody.federatedAuthenticators.authenticators.forEach((authenticator) => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"definedBy\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate provisioning\r",
											"    pm.expect(responseBody).to.have.property(\"provisioning\").that.is.an(\"object\");\r",
											"    const provisioning = responseBody.provisioning;\r",
											"    pm.expect(provisioning).to.have.property(\"jit\").that.is.an(\"object\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning).to.have.property(\"outboundConnectors\").that.is.an(\"object\");\r",
											"    pm.expect(provisioning.outboundConnectors).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.outboundConnectors).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"    provisioning.outboundConnectors.connectors.forEach((connector) => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate implicitAssociation\r",
											"    pm.expect(responseBody).to.have.property(\"implicitAssociation\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"lookupAttribute\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Set collection variable\r",
											"pm.collectionVariables.set(\"IDP_id_subOrg\", responseBody.id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_create\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"google\",\n    \"description\": \"IdP for Google Federation\",\n    \"image\": \"https://localhost:9443/console/resources/connections/assets/images/logos/google.svg\",\n    \"isPrimary\": false,\n    \"isFederationHub\": false,\n    \"homeRealmIdentifier\": \"localhost\",\n    \"certificate\": {\n        \"certificates\": [\n            \"string\"\n        ],\n        \"jwksUri\": \"https://localhost:9444/oauth2/jwks\"\n    },\n    \"alias\": \"https://localhost:9444/oauth2/token\",\n    \"claims\": {\n        \"userIdClaim\": {\n            \"uri\": \"http://wso2.org/claims/username\"\n        },\n        \"roleClaim\": {\n            \"uri\": \"http://wso2.org/claims/username\"\n        },\n        \"mappings\": [\n            {\n                \"idpClaim\": \"country\",\n                \"localClaim\": {\n                    \"uri\": \"http://wso2.org/claims/username\"\n                }\n            }\n        ],\n        \"provisioningClaims\": [\n            {\n                \"claim\": {\n                    \"uri\": \"http://wso2.org/claims/username\"\n                },\n                \"defaultValue\": \"sathya\"\n            }\n        ]\n    },\n    \"roles\": {\n        \"mappings\": [\n            {\n                \"idpRole\": \"google-manager\",\n                \"localRole\": \"loginRole\"\n            }\n        ],\n        \"outboundProvisioningRoles\": [\n            \"loginRole\"\n        ]\n    },\n    \"federatedAuthenticators\": {\n        \"defaultAuthenticatorId\": \"VHdpdHRlckF1dGhlbnRpY2F0b3I\",\n        \"authenticators\": [\n            {\n                \"authenticatorId\": \"VHdpdHRlckF1dGhlbnRpY2F0b3I\",\n                \"isEnabled\": true,\n                \"isDefault\": false,\n                \"properties\": [\n                    {\n                        \"key\": \"somePropertyKey\",\n                        \"value\": \"somePropertyValue\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"provisioning\": {\n        \"jit\": {\n            \"isEnabled\": true,\n            \"scheme\": \"PROVISION_SILENTLY\",\n            \"userstore\": \"PRIMARY\",\n            \"associateLocalUser\": true\n        },\n        \"outboundConnectors\": {\n            \"defaultConnectorId\": \"U0NJTTI\",\n            \"connectors\": [\n                {\n                    \"connectorId\": \"U0NJTTI\",\n                    \"isEnabled\": true,\n                    \"isDefault\": false,\n                    \"blockingEnabled\": false,\n                    \"rulesEnabled\": false,\n                    \"properties\": [\n                        {\n                            \"key\": \"somePropertyKey\",\n                            \"value\": \"somePropertyValue\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "List identity providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Validate response body\r",
											"pm.test(\"Response structure validation\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root-level properties\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"count\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"links\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"identityProviders\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate the 'identityProviders' array\r",
											"    const identityProviders = responseBody.identityProviders;\r",
											"    identityProviders.forEach((provider) => {\r",
											"        pm.expect(provider).to.be.an(\"object\");\r",
											"        pm.expect(provider).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(provider).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(provider).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(provider).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(provider).to.have.property(\"image\").that.is.a(\"string\");\r",
											"        pm.expect(provider).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve identity provider by identity provider's ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Response structure validation\", () => {\r",
											"\r",
											"    // Validate root-level properties\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isPrimary\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"image\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isFederationHub\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmIdentifier\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate certificate\r",
											"    pm.expect(responseBody).to.have.property(\"certificate\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.certificate).to.have.property(\"jwksUri\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate alias\r",
											"    pm.expect(responseBody).to.have.property(\"alias\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate claims\r",
											"    pm.expect(responseBody).to.have.property(\"claims\").that.is.an(\"object\");\r",
											"    const claims = responseBody.claims;\r",
											"    pm.expect(claims).to.have.property(\"userIdClaim\").that.is.an(\"object\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(claims).to.have.property(\"roleClaim\").that.is.an(\"object\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(claims).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    claims.mappings.forEach((mapping) => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\").that.is.an(\"object\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    });\r",
											"    pm.expect(claims).to.have.property(\"provisioningClaims\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate roles\r",
											"    pm.expect(responseBody).to.have.property(\"roles\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate groups\r",
											"    pm.expect(responseBody).to.have.property(\"groups\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate federatedAuthenticators\r",
											"    pm.expect(responseBody).to.have.property(\"federatedAuthenticators\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"    responseBody.federatedAuthenticators.authenticators.forEach((authenticator) => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"definedBy\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate provisioning\r",
											"    pm.expect(responseBody).to.have.property(\"provisioning\").that.is.an(\"object\");\r",
											"    const provisioning = responseBody.provisioning;\r",
											"    pm.expect(provisioning).to.have.property(\"jit\").that.is.an(\"object\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning).to.have.property(\"outboundConnectors\").that.is.an(\"object\");\r",
											"    pm.expect(provisioning.outboundConnectors).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.outboundConnectors).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"    provisioning.outboundConnectors.connectors.forEach((connector) => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate implicitAssociation\r",
											"    pm.expect(responseBody).to.have.property(\"implicitAssociation\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"lookupAttribute\").that.is.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch an identity provider property by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Response structure validation\", () => {\r",
											"\r",
											"    // Validate root-level properties\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isPrimary\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"image\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isFederationHub\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmIdentifier\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate certificate\r",
											"    pm.expect(responseBody).to.have.property(\"certificate\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.certificate).to.have.property(\"jwksUri\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate alias\r",
											"    pm.expect(responseBody).to.have.property(\"alias\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate claims\r",
											"    pm.expect(responseBody).to.have.property(\"claims\").that.is.an(\"object\");\r",
											"    const claims = responseBody.claims;\r",
											"    pm.expect(claims).to.have.property(\"userIdClaim\").that.is.an(\"object\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(claims.userIdClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(claims).to.have.property(\"roleClaim\").that.is.an(\"object\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(claims.roleClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(claims).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    claims.mappings.forEach((mapping) => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\").that.is.an(\"object\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    });\r",
											"    pm.expect(claims).to.have.property(\"provisioningClaims\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate roles\r",
											"    pm.expect(responseBody).to.have.property(\"roles\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.roles).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate groups\r",
											"    pm.expect(responseBody).to.have.property(\"groups\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate federatedAuthenticators\r",
											"    pm.expect(responseBody).to.have.property(\"federatedAuthenticators\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.federatedAuthenticators).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"    responseBody.federatedAuthenticators.authenticators.forEach((authenticator) => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"definedBy\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate provisioning\r",
											"    pm.expect(responseBody).to.have.property(\"provisioning\").that.is.an(\"object\");\r",
											"    const provisioning = responseBody.provisioning;\r",
											"    pm.expect(provisioning).to.have.property(\"jit\").that.is.an(\"object\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(provisioning.jit).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning).to.have.property(\"outboundConnectors\").that.is.an(\"object\");\r",
											"    pm.expect(provisioning.outboundConnectors).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(provisioning.outboundConnectors).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"    provisioning.outboundConnectors.connectors.forEach((connector) => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate implicitAssociation\r",
											"    pm.expect(responseBody).to.have.property(\"implicitAssociation\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.implicitAssociation).to.have.property(\"lookupAttribute\").that.is.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n{\n  \"operation\": \"REPLACE\",\n  \"path\": \"/homeRealmIdentifier\",\n  \"value\": \"google\"\n}\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Export identity provider in XML, YAML, or JSON file formats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Identity Provider Config Response\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"identityProviderName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"identityProviderDescription\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"alias\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"primary\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"federationHub\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"homeRealmId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningRole\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"enable\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate 'federatedAuthenticatorConfigs'\r",
											"    pm.expect(responseBody).to.have.property(\"federatedAuthenticatorConfigs\").that.is.an(\"array\");\r",
											"    responseBody.federatedAuthenticatorConfigs.forEach((config) => {\r",
											"        pm.expect(config).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(config).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(config).to.have.property(\"enabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(config).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"        config.properties.forEach((property) => {\r",
											"            pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
											"            pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"        });\r",
											"    });\r",
											"\r",
											"    // Validate 'defaultAuthenticatorConfig'\r",
											"    pm.expect(responseBody).to.have.property(\"defaultAuthenticatorConfig\").that.is.an(\"object\");\r",
											"    const defaultAuthConfig = responseBody.defaultAuthenticatorConfig;\r",
											"    pm.expect(defaultAuthConfig).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(defaultAuthConfig).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(defaultAuthConfig).to.have.property(\"enabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate 'provisioningConnectorConfigs'\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningConnectorConfigs\").that.is.an(\"array\");\r",
											"    responseBody.provisioningConnectorConfigs.forEach((connector) => {\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"enabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"blocking\").that.is.a(\"boolean\");\r",
											"    });\r",
											"\r",
											"    // Validate 'claimConfig'\r",
											"    pm.expect(responseBody).to.have.property(\"claimConfig\").that.is.an(\"object\");\r",
											"    const claimConfig = responseBody.claimConfig;\r",
											"    pm.expect(claimConfig).to.have.property(\"roleClaimURI\").that.is.a(\"string\");\r",
											"    pm.expect(claimConfig).to.have.property(\"userClaimURI\").that.is.a(\"string\");\r",
											"    pm.expect(claimConfig).to.have.property(\"idpClaims\").that.is.an(\"array\");\r",
											"    pm.expect(claimConfig).to.have.property(\"claimMappings\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate 'justInTimeProvisioningConfig'\r",
											"    pm.expect(responseBody).to.have.property(\"justInTimeProvisioningConfig\").that.is.an(\"object\");\r",
											"    const jitConfig = responseBody.justInTimeProvisioningConfig;\r",
											"    pm.expect(jitConfig).to.have.property(\"provisioningUserStore\").that.is.a(\"string\");\r",
											"    pm.expect(jitConfig).to.have.property(\"provisioningEnabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate 'idpProperties'\r",
											"    pm.expect(responseBody).to.have.property(\"idpProperties\").that.is.an(\"array\");\r",
											"    responseBody.idpProperties.forEach((property) => {\r",
											"        pm.expect(property).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/export?excludeSecrets=true",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"export"
									],
									"query": [
										{
											"key": "excludeSecrets",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Metadata",
					"item": [
						{
							"name": "Metadata about supported federated authenticators of identity providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate federated authenticators structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    responseBody.forEach(authenticator => {\r",
											"        // Validate root properties of each authenticator object\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"\r",
											"        // Validate tags (optional property)\r",
											"        if (authenticator.hasOwnProperty(\"tags\")) {\r",
											"            pm.expect(authenticator.tags).to.be.an(\"array\");\r",
											"            authenticator.tags.forEach(tag => {\r",
											"                pm.expect(tag).to.be.a(\"string\");\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/meta/federated-authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"meta",
										"federated-authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Metadata about a supported federated authenticator",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"federated_authenticator_id\", \"R2l0aHViQXV0aGVudGljYXRvcg\")\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate GitHub Authenticator object structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate root-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"tags\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate tags array\r",
											"    responseBody.tags.forEach(tag => {\r",
											"        pm.expect(tag).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate properties array\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"        pm.expect(property).to.have.property(\"regex\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"isMandatory\").that.is.a(\"boolean\");\r",
											"        pm.expect(property).to.have.property(\"isConfidential\").that.is.a(\"boolean\");\r",
											"        pm.expect(property).to.have.property(\"options\").that.is.an(\"array\");\r",
											"        pm.expect(property).to.have.property(\"defaultValue\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"subProperties\").that.is.an(\"array\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/meta/federated-authenticators/{{federated_authenticator_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"meta",
										"federated-authenticators",
										"{{federated_authenticator_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Metadata about supported outbound provisioning connectors by identity providers in the identity server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate outbound provisioning connectors structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate that the response is an array\r",
											"    pm.expect(responseBody).to.be.an(\"array\");\r",
											"\r",
											"    // Validate each connector object in the array\r",
											"    responseBody.forEach(connector => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/meta/outbound-provisioning-connectors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"meta",
										"outbound-provisioning-connectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Metadata about supported outbound provisioning connectors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"outbound_provisioning_connector_id\", \"Z29vZ2xlYXBwcw\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Google Apps connector structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"blockingEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"rulesEnabled\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate \"properties\" array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"displayOrder\").that.is.a(\"number\");\r",
											"        pm.expect(property).to.have.property(\"regex\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"isMandatory\").that.is.a(\"boolean\");\r",
											"        pm.expect(property).to.have.property(\"isConfidential\").that.is.a(\"boolean\");\r",
											"        pm.expect(property).to.have.property(\"options\").that.is.an(\"array\");\r",
											"        pm.expect(property).to.have.property(\"defaultValue\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"subProperties\").that.is.an(\"array\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/meta/outbound-provisioning-connectors/{{outbound_provisioning_connector_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"meta",
										"outbound-provisioning-connectors",
										"{{outbound_provisioning_connector_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Federated Authenticators",
					"item": [
						{
							"name": "Federated authenticators of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate default authenticator structure\", () => {\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate each authenticator in the \"authenticators\" array\r",
											"    responseBody.authenticators.forEach(authenticator => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"federated_authenticator_id_subOrg\", responseBody.defaultAuthenticatorId);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/federated-authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"federated-authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Federated authenticators of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate default authenticator structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"defaultAuthenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"authenticators\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate each authenticator in the \"authenticators\" array\r",
											"    responseBody.authenticators.forEach(authenticator => {\r",
											"        pm.expect(authenticator).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(authenticator).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(authenticator).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"defaultAuthenticatorId\": \"VHdpdHRlckF1dGhlbnRpY2F0b3I\",\n\"authenticators\": [\n  {\n    \"authenticatorId\": \"VHdpdHRlckF1dGhlbnRpY2F0b3I\",\n    \"isEnabled\": true,\n    \"isDefault\": false,\n    \"properties\": [\n      {\n        \"key\": \"somePropertyKey\",\n        \"value\": \"somePropertyValue\"\n      }\n    ]\n  }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/federated-authenticators",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"federated-authenticators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve the federated authenticator config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate authenticator structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"definedBy\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate \"properties\" array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/federated-authenticators/{{federated_authenticator_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"federated-authenticators",
										"{{federated_authenticator_id_subOrg}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a federated authenticator of an IdP using authenticator id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate authenticator structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"authenticatorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"definedBy\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isDefault\").that.is.a(\"boolean\");\r",
											"\r",
											"    // Validate \"properties\" array\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.properties.forEach(property => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"isEnabled\": true,\n\"isDefault\": false,\n\"properties\": [\n  {\n    \"key\": \"somePropertyKey\",\n    \"value\": \"somePropertyValue\"\n  }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/federated-authenticators/{{federated_authenticator_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"federated-authenticators",
										"{{federated_authenticator_id_subOrg}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Provisioning",
					"item": [
						{
							"name": "Provisioning entities of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate JIT and outbound connectors structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate JIT object\r",
											"    pm.expect(responseBody).to.have.property(\"jit\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody.jit).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate outboundConnectors object\r",
											"    pm.expect(responseBody).to.have.property(\"outboundConnectors\").that.is.an(\"object\");\r",
											"    pm.expect(responseBody.outboundConnectors).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.outboundConnectors).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate the connectors array\r",
											"    responseBody.outboundConnectors.connectors.forEach(connector => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/provisioning",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"provisioning"
									]
								}
							},
							"response": []
						},
						{
							"name": "Outbound provisioning connectors of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate outbound connectors structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate outboundConnectors object\r",
											"    pm.expect(responseBody).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate the connectors array\r",
											"    responseBody.connectors.forEach(connector => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/provisioning/outbound-connectors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"provisioning",
										"outbound-connectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update outbound provisioning connectors of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Outbound Connectors Response\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the existence and type of top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"defaultConnectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"connectors\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate the structure of each connector in the 'connectors' array\r",
											"    responseBody.connectors.forEach((connector) => {\r",
											"        pm.expect(connector).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(connector).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"        pm.expect(connector).to.have.property(\"self\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"defaultConnectorId\": \"U0NJTTI\",\n  \"connectors\": [\n    {\n      \"connectorId\": \"U0NJTTI\",\n      \"isEnabled\": true,\n      \"isDefault\": false,\n      \"blockingEnabled\": false,\n      \"rulesEnabled\": false,\n      \"properties\": [\n        {\n          \"key\": \"somePropertyKey\",\n          \"value\": \"somePropertyValue\"\n        }\n      ]\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/provisioning/outbound-connectors",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"provisioning",
										"outbound-connectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve the outbound provisioning connector of an identity provider",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/provisioning/outbound-connectors/U0NJTQ",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"provisioning",
										"outbound-connectors",
										"U0NJTQ"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an outbound provisioning connector of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate SCIM2 Connector Response\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the existence and type of top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"connectorId\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"isDefault\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"blockingEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"rulesEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"properties\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate the structure of each property object in the 'properties' array\r",
											"    responseBody.properties.forEach((property) => {\r",
											"        pm.expect(property).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(property).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"isEnabled\": true,\n\"isDefault\": false,\n\"blockingEnabled\": false,\n\"rulesEnabled\": false,\n\"properties\": [\n  {\n    \"key\": \"somePropertyKey\",\n    \"value\": \"somePropertyValue\"\n  }\n]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/provisioning/outbound-connectors/U0NJTTI",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"provisioning",
										"outbound-connectors",
										"U0NJTTI"
									]
								}
							},
							"response": []
						},
						{
							"name": "Just-In-Time provisioning config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resources status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Provisioning Configuration Response Structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/provisioning/jit",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"provisioning",
										"jit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the just-in-time provisioning config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Provisioning Configuration Response\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the existence and type of each property\r",
											"    pm.expect(responseBody).to.have.property(\"isEnabled\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"scheme\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"userstore\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"associateLocalUser\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseBody).to.have.property(\"attributeSyncMethod\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"isEnabled\": true,\n\"scheme\": \"PROVISION_SILENTLY\",\n\"userstore\": \"PRIMARY\",\n\"associateLocalUser\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/provisioning/jit",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"provisioning",
										"jit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Claims",
					"item": [
						{
							"name": "Claim config of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate claims and mappings structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate userIdClaim structure\r",
											"    pm.expect(responseBody).to.have.property(\"userIdClaim\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate roleClaim structure\r",
											"    pm.expect(responseBody).to.have.property(\"roleClaim\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate mappings array\r",
											"    pm.expect(responseBody).to.have.property(\"mappings\").that.is.an(\"array\");\r",
											"    responseBody.mappings.forEach(mapping => {\r",
											"        pm.expect(mapping).to.have.property(\"idpClaim\").that.is.a(\"string\");\r",
											"        pm.expect(mapping).to.have.property(\"localClaim\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"        pm.expect(mapping.localClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate provisioningClaims array (should be empty)\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningClaims\").that.is.an(\"array\").with.lengthOf(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"claims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the claims of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"pm.test(\"Validate claims, mappings, and provisioningClaims structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate userIdClaim structure\r",
											"    pm.expect(responseBody).to.have.property(\"userIdClaim\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.userIdClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate roleClaim structure\r",
											"    pm.expect(responseBody).to.have.property(\"roleClaim\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.roleClaim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate mappings array (should be empty)\r",
											"    pm.expect(responseBody).to.have.property(\"mappings\").that.is.an(\"array\").with.lengthOf(0);\r",
											"\r",
											"    // Validate provisioningClaims array\r",
											"    pm.expect(responseBody).to.have.property(\"provisioningClaims\").that.is.an(\"array\").with.lengthOf(1);\r",
											"    pm.expect(responseBody.provisioningClaims[0]).to.have.property(\"claim\");\r",
											"    pm.expect(responseBody.provisioningClaims[0].claim).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioningClaims[0].claim).to.have.property(\"uri\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioningClaims[0].claim).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.provisioningClaims[0]).to.have.property(\"defaultValue\").that.is.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userIdClaim\": {\n    \"uri\": \"http://wso2.org/claims/username\"\n  },\n  \"roleClaim\": {\n    \"uri\": \"http://wso2.org/claims/username\"\n  },\n  \"mappings\": [  ],\n  \"provisioningClaims\": [\n    {\n      \"claim\": {\n        \"uri\": \"http://wso2.org/claims/username\"\n      },\n      \"defaultValue\": \"sathya\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/claims",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"claims"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Connected Apps",
					"item": [
						{
							"name": "Connected applications of an identity provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure for empty result\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate totalResults\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\");\r",
											"    pm.expect(responseBody).to.have.property(\"count\");\r",
											"    pm.expect(responseBody).to.have.property(\"links\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_idp_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}/connected-apps",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"identity-providers",
										"{{IDP_id_subOrg}}",
										"connected-apps"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Idle accounts identification API",
			"item": [
				{
					"name": "Get inactive users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
									"            { key: \"grant_type\", value: \"organization_switch\" },\r",
									"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
									"            { key: \"scope\", value: \"internal_org_idle_account_list\" }\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/idle-account-identification/v1/inactive-users?inactiveAfter=2023-01-31&excludeBefore=2023-01-01",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"o",
								"api",
								"idle-account-identification",
								"v1",
								"inactive-users"
							],
							"query": [
								{
									"key": "inactiveAfter",
									"value": "2023-01-31"
								},
								{
									"key": "excludeBefore",
									"value": "2023-01-01"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invite parent organization's users API",
			"item": [
				{
					"name": "Parent Organization User Invitation",
					"item": [
						{
							"name": "Invite a parent organization user to a child organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response structure and content\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the response is an array and is not empty\r",
											"    pm.expect(responseBody).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    // Validate each item in the array has the expected properties\r",
											"    responseBody.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"username\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"result\").that.is.an(\"object\");\r",
											"        \r",
											"        // Validate the result status\r",
											"        pm.expect(item.result).to.have.property(\"status\").that.is.a(\"string\");\r",
											"\r",
											"        // Check if status is \"Successful\" or \"Failed\"\r",
											"        if (item.result.status === \"Successful\") {\r",
											"            pm.expect(item.result).to.not.have.property(\"errorCode\");\r",
											"            pm.expect(item.result).to.not.have.property(\"errorMessage\");\r",
											"            pm.expect(item.result).to.not.have.property(\"errorDescription\");\r",
											"        } else if (item.result.status === \"Failed\") {\r",
											"            pm.expect(item.result).to.have.property(\"errorCode\").that.is.a(\"string\");\r",
											"            pm.expect(item.result).to.have.property(\"errorMessage\").that.is.a(\"string\");\r",
											"            pm.expect(item.result).to.have.property(\"errorDescription\").that.is.a(\"string\");\r",
											"        } else {\r",
											"            pm.expect.fail(\"Unexpected status value\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_guest_mgt_invite_add\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"usernames\": [\n        \"MainDomainUser01\"\n    ],\n    \"roles\": [\n   \n    ],\n    \"groups\": [\n\n    ],\n    \"properties\": [\n        {\n          \"key\": \"manageNotificationsInternally\",\n          \"value\": \"true\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/guests/invite",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"guests",
										"invite"
									]
								}
							},
							"response": []
						},
						{
							"name": "introspect an invitation's confirmation code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_guest_mgt_invite_list\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"confirmationCode\": \"2663329b-c8c5-4c71-9500-9ea8c4e77d94\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/guests/invitation/introspect",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"guests",
										"invitation",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Accepts an invitation from a user in the parent organization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.execution.skipRequest();\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"confirmationCode\": \"2663329b-c8c5-4c71-9500-9ea8c4e77d94\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/guests/invitation/accept",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"guests",
										"invitation",
										"accept"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invitation Management",
					"item": [
						{
							"name": "List down the user invitations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate Invitations Response Structure\", () => {\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"invitations\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate each invitation object\r",
											"    responseBody.invitations.forEach(invitation => {\r",
											"        pm.expect(invitation).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(invitation).to.have.property(\"username\").that.is.a(\"string\");\r",
											"        pm.expect(invitation).to.have.property(\"email\").that.is.a(\"string\");\r",
											"        pm.expect(invitation).to.have.property(\"status\").that.is.a(\"string\");\r",
											"        pm.expect(invitation).to.have.property(\"expiredAt\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// set collection variable\r",
											"pm.collectionVariables.set(\"invitation_id\", responseBody.invitations[0].id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_guest_mgt_invite_list\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/guests/invitations",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"guests",
										"invitations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an invitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_guest_mgt_invite_delete\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/guests/invitations/{{invitation_id}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"guests",
										"invitations",
										"{{invitation_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Offline user onboard management API",
			"item": [
				{
					"name": "Temporary Link",
					"item": [
						{
							"name": "Generates a random link that can be used to set a new password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_offline_invite\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Malcome\",\n    \"userstore\": \"PRIMARY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/users/v1/offline-invite-link",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"users",
										"v1",
										"offline-invite-link"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Organization discovery API",
			"item": [
				{
					"name": "Organization Discovery",
					"item": [
						{
							"name": "Check whether given discovery attribute exists among the organization hierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate availability\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate the availability status\r",
											"    pm.expect(responseBody).to.have.property(\"available\").that.is.a(\"boolean\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_discovery_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"emailDomain\",\n  \"value\": \"abc.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations/check-discovery",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations",
										"check-discovery"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Organization management API",
			"item": [
				{
					"name": "Organization",
					"item": [
						{
							"name": "Create a new organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){\r",
											"\r",
											"// Validate status code, 201\r",
											"    pm.test(\"Response status is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate tenant response structure\", () => {\r",
											"\r",
											"    // Validate basic properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"created\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate parent object\r",
											"    pm.expect(responseBody).to.have.property(\"parent\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"ref\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate attributes array\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\").that.is.an(\"array\");\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(attribute).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"org_id_subOrg\", responseBody.id);\r",
											"\r",
											"}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_create\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"ABC Builders\",\n  \"description\": \"Building constructions\",\n  \"attributes\": [\n    {\n      \"key\": \"Country\",\n      \"value\": \"USA\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve organizations created for this tenant which matches the defined search criteria, if any",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate organizations response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate organizations array\r",
											"    pm.expect(responseBody).to.have.property(\"organizations\").that.is.an(\"array\");\r",
											"\r",
											"    responseBody.organizations.forEach(organization => {\r",
											"        // Validate individual organization properties\r",
											"        pm.expect(organization).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(organization).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(organization).to.have.property(\"status\").that.is.a(\"string\");\r",
											"        pm.expect(organization).to.have.property(\"ref\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check organization with given name exist among the organizations hierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate availability response\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate available property\r",
											"    pm.expect(responseBody).to.have.property(\"available\").that.is.a(\"boolean\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"XYZ Builders\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations/check-name",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations",
										"check-name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an existing organization, identified by the organization ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate organization response\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate organization properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"created\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    \r",
											"    // Validate parent object\r",
											"    pm.expect(responseBody).to.have.property(\"parent\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"ref\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate attributes array\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\").that.is.an(\"array\");\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(attribute).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate permissions array\r",
											"    pm.expect(responseBody).to.have.property(\"permissions\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations/{{org_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations",
										"{{org_id_subOrg}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch an organization property by ID. Patch is supported only for key-value pairs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate organization response\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate organization properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"created\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    \r",
											"    // Validate parent object\r",
											"    pm.expect(responseBody).to.have.property(\"parent\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"ref\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate attributes array\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\").that.is.an(\"array\");\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(attribute).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"operation\": \"REPLACE\",\n    \"path\": \"/name\",\n    \"value\": \"XYZ Builders\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations/{{org_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations",
										"{{org_id_subOrg}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an organization by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(function(){\r",
											"\r",
											"// Validate status code, 201\r",
											"    pm.test(\"Response status is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate tenant response structure\", () => {\r",
											"\r",
											"    // Validate basic properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"created\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate parent object\r",
											"    pm.expect(responseBody).to.have.property(\"parent\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"ref\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate attributes array\r",
											"    pm.expect(responseBody).to.have.property(\"attributes\").that.is.an(\"array\");\r",
											"    responseBody.attributes.forEach(attribute => {\r",
											"        pm.expect(attribute).to.have.property(\"key\").that.is.a(\"string\");\r",
											"        pm.expect(attribute).to.have.property(\"value\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"}, 6000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"ABCD Builders\",\n  \"description\": \"Building constructions company\",\n  \"status\": \"ACTIVE\",\n  \"attributes\": [\n    {\n      \"key\": \"Country\",\n      \"value\": \"USA\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations/{{org_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations",
										"{{org_id_subOrg}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an organization by using the organization's ID.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_delete\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations/{{org_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations",
										"{{org_id_subOrg}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization Metadata",
					"item": [
						{
							"name": "Get metadata of the logged in organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate organization response\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate organization properties\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"name\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"created\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"lastModified\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"type\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate parent object\r",
											"    pm.expect(responseBody).to.have.property(\"parent\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody.parent).to.have.property(\"ref\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate permissions array\r",
											"    pm.expect(responseBody).to.have.property(\"permissions\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate discoveryAttributes array\r",
											"    pm.expect(responseBody).to.have.property(\"discoveryAttributes\").that.is.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_organization_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/organizations/metadata",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"api",
										"server",
										"v1",
										"organizations",
										"metadata"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "SCIM 2.0 Role management API",
			"item": [
				{
					"name": "Roles Endpoint",
					"item": [
						{
							"name": "Filter Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resources status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate SCIM ListResponse structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate general response properties\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"itemsPerPage\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
											"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate each resource in Resources array\r",
											"    responseBody.Resources.forEach(resource => {\r",
											"        // Basic role properties\r",
											"        pm.expect(resource).to.have.property(\"audience\");\r",
											"        pm.expect(resource.audience).to.have.property(\"display\").that.is.a(\"string\");\r",
											"        pm.expect(resource.audience).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(resource.audience).to.have.property(\"value\").that.is.a(\"string\");\r",
											"\r",
											"        pm.expect(resource).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"        pm.expect(resource).to.have.property(\"meta\");\r",
											"        pm.expect(resource.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
											"        pm.expect(resource).to.have.property(\"id\").that.is.a(\"string\");\r",
											"\r",
											"        // Validate permissions array\r",
											"        pm.expect(resource).to.have.property(\"permissions\").that.is.an(\"array\");\r",
											"        resource.permissions.forEach(permission => {\r",
											"            pm.expect(permission).to.have.property(\"display\").that.is.a(\"string\");\r",
											"            pm.expect(permission).to.have.property(\"value\").that.is.a(\"string\");\r",
											"            pm.expect(permission).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"        });\r",
											"\r",
											"        // Validate associatedApplications array\r",
											"        pm.expect(resource).to.have.property(\"associatedApplications\").that.is.an(\"array\");\r",
											"        resource.associatedApplications.forEach(app => {\r",
											"            pm.expect(app).to.have.property(\"value\").that.is.a(\"string\");\r",
											"            pm.expect(app).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"        });\r",
											"\r",
											"        // Validate users array (if present)\r",
											"        if (resource.hasOwnProperty(\"users\")) {\r",
											"            pm.expect(resource.users).to.be.an(\"array\");\r",
											"            resource.users.forEach(user => {\r",
											"                pm.expect(user).to.have.property(\"display\").that.is.a(\"string\");\r",
											"                pm.expect(user).to.have.property(\"value\").that.is.a(\"string\");\r",
											"                pm.expect(user).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_role_mgt_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/scim+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/v2/Roles",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"scim2",
										"v2",
										"Roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resources status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate SCIM role list response structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"totalResults\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"startIndex\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"itemsPerPage\").that.is.a(\"number\");\r",
											"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
											"    responseBody.schemas.forEach(schema => {\r",
											"        pm.expect(schema).to.be.a(\"string\");\r",
											"    });\r",
											"    pm.expect(responseBody).to.have.property(\"Resources\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate each resource in the Resources array\r",
											"    responseBody.Resources.forEach(resource => {\r",
											"        pm.expect(resource).to.have.property(\"audience\").that.is.an(\"object\");\r",
											"        const audience = resource.audience;\r",
											"        pm.expect(audience).to.have.property(\"display\").that.is.a(\"string\");\r",
											"        pm.expect(audience).to.have.property(\"type\").that.is.a(\"string\");\r",
											"        pm.expect(audience).to.have.property(\"value\").that.is.a(\"string\");\r",
											"\r",
											"        pm.expect(resource).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"\r",
											"        pm.expect(resource).to.have.property(\"meta\").that.is.an(\"object\");\r",
											"        pm.expect(resource.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
											"\r",
											"        pm.expect(resource).to.have.property(\"permissions\").that.is.an(\"array\");\r",
											"        resource.permissions.forEach(permission => {\r",
											"            pm.expect(permission).to.have.property(\"display\").that.is.a(\"string\");\r",
											"            pm.expect(permission).to.have.property(\"value\").that.is.a(\"string\");\r",
											"            pm.expect(permission).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"        });\r",
											"\r",
											"        pm.expect(resource).to.have.property(\"id\").that.is.a(\"string\");\r",
											"\r",
											"        pm.expect(resource).to.have.property(\"associatedApplications\").that.is.an(\"array\");\r",
											"        resource.associatedApplications.forEach(application => {\r",
											"            pm.expect(application).to.have.property(\"value\").that.is.a(\"string\");\r",
											"            pm.expect(application).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Extract role_id for Role-03\", function () {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    // Find the resource with displayName equal to \"Role-03\"\r",
											"    const role = response.Resources.find(r => r.displayName === \"loginRole\");\r",
											"\r",
											"    if (role && role.id) {\r",
											"        // Set the id as a collection variable\r",
											"        pm.collectionVariables.set(\"role_id_subOrg\", role.id);\r",
											"        console.log(`role_id_subOrg set to: ${role.id}`);\r",
											"    } else {\r",
											"        pm.collectionVariables.unset(\"role_id_subOrg\"); // Unset the variable if not found\r",
											"        throw new Error(\"loginRole not found or missing 'id' property\");\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_role_mgt_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/scim+json"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"schemas\": [\n  \"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"\n],\n\"startIndex\": 1,\n\"filter\": \"displayName eq loginRole\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/v2/Roles/.search",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"scim2",
										"v2",
										"Roles",
										".search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Role by ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_role_mgt_view\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate SCIM Role structure\", () => {\r",
											"    const resource = pm.response.json();\r",
											"\r",
											"    // Validate audience\r",
											"    pm.expect(resource).to.have.property(\"audience\");\r",
											"    pm.expect(resource.audience).to.have.property(\"display\").that.is.a(\"string\");\r",
											"    pm.expect(resource.audience).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(resource.audience).to.have.property(\"value\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate basic properties\r",
											"    pm.expect(resource).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(resource).to.have.property(\"meta\");\r",
											"    pm.expect(resource.meta).to.have.property(\"location\").that.is.a(\"string\");\r",
											"    pm.expect(resource).to.have.property(\"id\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate permissions array\r",
											"    pm.expect(resource).to.have.property(\"permissions\").that.is.an(\"array\");\r",
											"    resource.permissions.forEach(permission => {\r",
											"        pm.expect(permission).to.have.property(\"display\").that.is.a(\"string\");\r",
											"        pm.expect(permission).to.have.property(\"value\").that.is.a(\"string\");\r",
											"        pm.expect(permission).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate schemas\r",
											"    pm.expect(resource).to.have.property(\"schemas\").that.is.an(\"array\").with.length.greaterThan(0);\r",
											"\r",
											"    // Validate associatedApplications array\r",
											"    pm.expect(resource).to.have.property(\"associatedApplications\").that.is.an(\"array\");\r",
											"    resource.associatedApplications.forEach(app => {\r",
											"        pm.expect(app).to.have.property(\"value\").that.is.a(\"string\");\r",
											"        pm.expect(app).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/scim+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/v2/Roles/{{role_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"scim2",
										"v2",
										"Roles",
										"{{role_id_subOrg}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Role - PUT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//pm.execution.skipRequest();\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_role_mgt_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/scim+json"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"displayName\": \"loginRole\",\n    \"audience\": {\n        \"value\": \"{{Main_Application_ID}}\",\n        \"display\": \"E2E-Test-Suite-Token\",\n        \"type\": \"application\"\n    },\n    \"users\": [],\n    \"groups\": [],\n    \"permissions\": [\n        {\n            \"value\": \"internal_org_bulk_resource_create\",\n            \"display\": \"Create Bulk Resource\"\n        }\n    ],\n    \"associatedApplications\": [\n        {\n            \"value\": \"{{Main_Application_ID}}\",\n            \"display\": \"E2E-Test-Suite-Token\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/v2/Roles/{{role_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"scim2",
										"v2",
										"Roles",
										"{{role_id_subOrg}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Role - PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Resources status is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate SCIM Role structure\", () => {\r",
											"    var responseBody = pm.response.json();\r",
											"\r",
											"    // Validate top-level properties\r",
											"    pm.expect(responseBody).to.have.property(\"audience\");\r",
											"    pm.expect(responseBody).to.have.property(\"displayName\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"meta\");\r",
											"    pm.expect(responseBody).to.have.property(\"permissions\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"schemas\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"groups\").that.is.an(\"array\");\r",
											"    pm.expect(responseBody).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseBody).to.have.property(\"associatedApplications\").that.is.an(\"array\");\r",
											"\r",
											"    // Validate audience object\r",
											"    const audience = responseBody.audience;\r",
											"    pm.expect(audience).to.have.property(\"display\").that.is.a(\"string\");\r",
											"    pm.expect(audience).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(audience).to.have.property(\"value\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate meta object\r",
											"    const meta = responseBody.meta;\r",
											"    pm.expect(meta).to.have.property(\"location\").that.is.a(\"string\");\r",
											"\r",
											"    // Validate permissions array\r",
											"    const permissions = responseBody.permissions;\r",
											"    permissions.forEach(permission => {\r",
											"        pm.expect(permission).to.have.property(\"display\").that.is.a(\"string\");\r",
											"        pm.expect(permission).to.have.property(\"value\").that.is.a(\"string\");\r",
											"        pm.expect(permission).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate schemas array\r",
											"    const schemas = responseBody.schemas;\r",
											"    schemas.forEach(schema => {\r",
											"        pm.expect(schema).to.be.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate groups array\r",
											"    const groups = responseBody.groups;\r",
											"    groups.forEach(group => {\r",
											"        pm.expect(group).to.have.property(\"display\").that.is.a(\"string\");\r",
											"        pm.expect(group).to.have.property(\"value\").that.is.a(\"string\");\r",
											"        pm.expect(group).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"    });\r",
											"\r",
											"    // Validate associatedApplications array\r",
											"    const associatedApplications = responseBody.associatedApplications;\r",
											"    associatedApplications.forEach(application => {\r",
											"        pm.expect(application).to.have.property(\"value\").that.is.a(\"string\");\r",
											"        pm.expect(application).to.have.property(\"$ref\").that.is.a(\"string\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"token_url\"),\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
											"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"urlencoded\",\r",
											"        urlencoded: [\r",
											"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
											"            { key: \"grant_type\", value: \"organization_switch\" },\r",
											"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
											"            { key: \"scope\", value: \"internal_org_role_mgt_update\" }\r",
											"        ]\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Token request failed:\", err);\r",
											"    } else {\r",
											"        let jsonResponse = res.json();\r",
											"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
											"    } \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "accept",
										"value": "application/scim+json"
									},
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Operations\": [\n        {\n            \"op\": \"add\",\n            \"value\": {\n                \"groups\": [\n                    {\n                        \"value\": \"{{group_id_subOrg}}\"\n                    }\n                ]\n            }\n        },\n                {\n            \"op\": \"add\",\n            \"value\": {\n                \"users\": [\n                    {\n                        \"value\": \"{{user_id_subOrg}}\"\n                    }\n                ]\n            }\n        }\n    ],\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/v2/Roles/{{role_id_subOrg}}",
									"protocol": "https",
									"host": [
										"{{serverUrl}}"
									],
									"path": [
										"t",
										"{{tenantDomain}}",
										"o",
										"scim2",
										"v2",
										"Roles",
										"{{role_id_subOrg}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete folder",
			"item": [
				{
					"name": "Delete user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 204\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
									"            { key: \"grant_type\", value: \"organization_switch\" },\r",
									"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
									"            { key: \"scope\", value: \"internal_org_user_mgt_delete\" }\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Users/{{user_id_subOrg}}",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"o",
								"scim2",
								"Users",
								"{{user_id_subOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 204\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
									"            { key: \"grant_type\", value: \"organization_switch\" },\r",
									"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
									"            { key: \"scope\", value: \"internal_org_group_mgt_delete\" }\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/scim2/Groups/{{group_id_subOrg}}",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"o",
								"scim2",
								"Groups",
								"{{group_id_subOrg}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an identity provider by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
									"            { key: \"grant_type\", value: \"organization_switch\" },\r",
									"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
									"            { key: \"scope\", value: \"internal_org_idp_delete\" }\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "https://{{serverUrl}}/t/{{tenantDomain}}/o/api/server/v1/identity-providers/{{IDP_id_subOrg}}?force=false",
							"protocol": "https",
							"host": [
								"{{serverUrl}}"
							],
							"path": [
								"t",
								"{{tenantDomain}}",
								"o",
								"api",
								"server",
								"v1",
								"identity-providers",
								"{{IDP_id_subOrg}}"
							],
							"query": [
								{
									"key": "force",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Bulk User/s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get(\"token_url\"),\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Authorization\": pm.collectionVariables.get(\"authHeader\"),\r",
									"        \"Content-Type\": \"application/x-www-form-urlencoded\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"urlencoded\",\r",
									"        urlencoded: [\r",
									"            { key: \"token\", value: pm.collectionVariables.get(\"access_token\") }, // Use existing token\r",
									"            { key: \"grant_type\", value: \"organization_switch\" },\r",
									"            { key: \"switching_organization\", value: pm.collectionVariables.get(\"Main_Organization_ID\") },\r",
									"            { key: \"scope\", value: \"internal_org_user_mgt_delete\" }\r",
									"        ]\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Token request failed:\", err);\r",
									"    } else {\r",
									"        let jsonResponse = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonResponse.access_token);\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer d369fde0-41b6-336b-af5b-2ad9b1fc7bdb"
							},
							{
								"key": "Cookie",
								"value": "JSESSIONID=E9EF04867AB52A8AD4FFDAFED3E9F903"
							}
						],
						"url": {
							"raw": "https://localhost:9443/t/carbon.super/o/scim2/Users/{{user_id_01_subOrg}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "9443",
							"path": [
								"t",
								"carbon.super",
								"o",
								"scim2",
								"Users",
								"{{user_id_01_subOrg}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main delete",
			"item": [
				{
					"name": "Delete main domain user/s",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "https://localhost:9443/scim2/Users/{{Main_User_ID1}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "9443",
							"path": [
								"scim2",
								"Users",
								"{{Main_User_ID1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete main application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "https://localhost:9443/api/server/v1/applications/{{Main_Application_ID}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "9443",
							"path": [
								"api",
								"server",
								"v1",
								"applications",
								"{{Main_Application_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete main organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 204\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "https://localhost:9443/api/server/v1/organizations/{{Main_Organization_ID}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "9443",
							"path": [
								"api",
								"server",
								"v1",
								"organizations",
								"{{Main_Organization_ID}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "admin",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authenticator_Id",
			"value": ""
		},
		{
			"key": "organization_Id",
			"value": ""
		},
		{
			"key": "claim_Id",
			"value": ""
		},
		{
			"key": "dialect_Id",
			"value": ""
		},
		{
			"key": "external_Claim_Id",
			"value": ""
		},
		{
			"key": "federated_authenticator_id",
			"value": ""
		},
		{
			"key": "outbound_provisioning_connector_id",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "shared_application_id",
			"value": ""
		},
		{
			"key": "organization_id_subOrg",
			"value": ""
		},
		{
			"key": "IDP_id_subOrg",
			"value": ""
		},
		{
			"key": "federated_authenticator_id_subOrg",
			"value": ""
		},
		{
			"key": "invitation_id",
			"value": ""
		},
		{
			"key": "org_id_subOrg",
			"value": ""
		},
		{
			"key": "user_id_subOrg",
			"value": ""
		},
		{
			"key": "group_id_subOrg",
			"value": ""
		},
		{
			"key": "user_id_01_subOrg",
			"value": ""
		},
		{
			"key": "all_scopes",
			"value": "internal_org_bulk_resource_create internal_org_idle_account_list internal_org_api_resource_view internal_org_recovery_create internal_org_recovery_view internal_org_branding_preference_update internal_org_group_mgt_delete internal_org_group_mgt_create internal_org_group_mgt_view internal_org_group_mgt_update internal_org_password_expired_user_view internal_org_organization_update internal_org_organization_create internal_org_organization_view internal_org_organization_delete internal_org_user_mgt_view internal_org_user_mgt_delete internal_org_user_mgt_create internal_org_user_mgt_update internal_org_user_mgt_list internal_org_notification_senders_update internal_org_notification_senders_delete internal_org_notification_senders_view internal_org_notification_senders_create internal_org_claim_meta_view internal_org_role_mgt_update internal_org_role_mgt_view internal_org_guest_mgt_invite_add internal_org_guest_mgt_invite_list internal_org_guest_mgt_invite_delete internal_org_application_mgt_update internal_org_application_mgt_view internal_org_authenticator_view internal_org_userstore_view internal_org_organization_discovery_view internal_org_idp_create internal_org_idp_delete internal_org_idp_view internal_org_idp_update internal_org_offline_invite internal_org_session_view internal_org_session_delete",
			"type": "string"
		},
		{
			"key": "Main_Organization_ID",
			"value": ""
		},
		{
			"key": "Main_Application_ID",
			"value": ""
		},
		{
			"key": "Main_Application_Client_ID",
			"value": ""
		},
		{
			"key": "Main_Application_Client_Secret",
			"value": ""
		},
		{
			"key": "{role_id_subOrg",
			"value": ""
		},
		{
			"key": "Main_User_ID1",
			"value": ""
		},
		{
			"key": "role_id_subOrg",
			"value": ""
		},
		{
			"key": "tenantDomain",
			"value": "carbon.super",
			"type": "string"
		},
		{
			"key": "serverUrl",
			"value": "localhost:9443",
			"type": "string"
		},
		{
			"key": "authHeader",
			"value": ""
		},
		{
			"key": "token_url",
			"value": "https://localhost:9443/t/carbon.super/oauth2/token",
			"type": "string"
		},
		{
			"key": "idp_connector_id1",
			"value": ""
		}
	]
}